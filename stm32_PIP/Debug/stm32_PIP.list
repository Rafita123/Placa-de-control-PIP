
stm32_PIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a104  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800a214  0800a214  0001a214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a458  0800a458  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a458  0800a458  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a458  0800a458  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a458  0800a458  0001a458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800a460  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000108c  200000c8  0800a524  000200c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001154  0800a524  00021154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b73f  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385b  00000000  00000000  0003b82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  00040580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a607  00000000  00000000  00041958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c0c  00000000  00000000  0005bf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000967cb  00000000  00000000  00072b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e30  00000000  00000000  0010938c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c8 	.word	0x200000c8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1fc 	.word	0x0800a1fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000cc 	.word	0x200000cc
 800014c:	0800a1fc 	.word	0x0800a1fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000faa:	4619      	mov	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000fb8:	3301      	adds	r3, #1
 8000fba:	425a      	negs	r2, r3
 8000fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fc4:	bf58      	it	pl
 8000fc6:	4253      	negpl	r3, r2
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000fd6:	2b80      	cmp	r3, #128	; 0x80
 8000fd8:	d113      	bne.n	8001002 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000fe8:	3301      	adds	r3, #1
 8000fea:	425a      	negs	r2, r3
 8000fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ff4:	bf58      	it	pl
 8000ff6:	4253      	negpl	r3, r2
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8001000:	e00b      	b.n	800101a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001010:	3301      	adds	r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001034:	461a      	mov	r2, r3
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f805 	bl	8001048 <RingGetNBytes>
 800103e:	4603      	mov	r3, r0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <RingGetNBytes+0x1e>
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <RingGetNBytes+0x22>
 8001066:	2300      	movs	r3, #0
 8001068:	e03e      	b.n	80010e8 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b80      	cmp	r3, #128	; 0x80
 800106e:	d901      	bls.n	8001074 <RingGetNBytes+0x2c>
 8001070:	2300      	movs	r3, #0
 8001072:	e039      	b.n	80010e8 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]
 8001078:	e01b      	b.n	80010b2 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001080:	4619      	mov	r1, r3
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	5c52      	ldrb	r2, [r2, r1]
 800108c:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001094:	3301      	adds	r3, #1
 8001096:	425a      	negs	r2, r3
 8001098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800109c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a0:	bf58      	it	pl
 80010a2:	4253      	negpl	r3, r2
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	3301      	adds	r3, #1
 80010b0:	75fb      	strb	r3, [r7, #23]
 80010b2:	7dfa      	ldrb	r2, [r7, #23]
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d205      	bcs.n	80010c6 <RingGetNBytes+0x7e>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80010c0:	7dfa      	ldrb	r2, [r7, #23]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3d9      	bcc.n	800107a <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 f805 	bl	80010f0 <RingClear>

	return uCounter;
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af02      	add	r7, sp, #8
 800112a:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <ModbusInit+0x114>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d87d      	bhi.n	8001230 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	33bc      	adds	r3, #188	; 0xbc
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ffd9 	bl	80010f0 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d109      	bne.n	800115a <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8001146:	4a3d      	ldr	r2, [pc, #244]	; (800123c <ModbusInit+0x118>)
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	483d      	ldr	r0, [pc, #244]	; (8001240 <ModbusInit+0x11c>)
 800114c:	f005 f9ca 	bl	80064e4 <osThreadNew>
 8001150:	4602      	mov	r2, r0
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001158:	e033      	b.n	80011c2 <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d12e      	bne.n	80011c0 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8001162:	4a38      	ldr	r2, [pc, #224]	; (8001244 <ModbusInit+0x120>)
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <ModbusInit+0x124>)
 8001168:	f005 f9bc 	bl	80064e4 <osThreadNew>
 800116c:	4602      	mov	r2, r0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800117a:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8001182:	4a32      	ldr	r2, [pc, #200]	; (800124c <ModbusInit+0x128>)
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	4831      	ldr	r0, [pc, #196]	; (8001250 <ModbusInit+0x12c>)
 800118a:	f007 fe85 	bl	8008e98 <xTimerCreate>
 800118e:	4602      	mov	r2, r0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d100      	bne.n	80011a2 <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 80011a0:	e7fe      	b.n	80011a0 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 80011a2:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <ModbusInit+0x130>)
 80011a4:	2110      	movs	r1, #16
 80011a6:	2002      	movs	r0, #2
 80011a8:	f005 fb10 	bl	80067cc <osMessageQueueNew>
 80011ac:	4602      	mov	r2, r0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 80011be:	e7fe      	b.n	80011be <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 80011c0:	e7fe      	b.n	80011c0 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 80011cc:	e7fe      	b.n	80011cc <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <ModbusInit+0x134>)
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	2105      	movs	r1, #5
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <ModbusInit+0x138>)
 80011de:	f007 fe5b 	bl	8008e98 <xTimerCreate>
 80011e2:	4602      	mov	r2, r0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d100      	bne.n	80011f6 <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 80011f4:	e7fe      	b.n	80011f4 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <ModbusInit+0x13c>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	2001      	movs	r0, #1
 80011fc:	f005 fa4a 	bl	8006694 <osSemaphoreNew>
 8001200:	4602      	mov	r2, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8001212:	e7fe      	b.n	8001212 <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <ModbusInit+0x114>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <ModbusInit+0x140>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <ModbusInit+0x114>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	3301      	adds	r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b03      	ldr	r3, [pc, #12]	; (8001238 <ModbusInit+0x114>)
 800122c:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800122e:	e000      	b.n	8001232 <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8001230:	e7fe      	b.n	8001230 <ModbusInit+0x10c>
}
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200000e4 	.word	0x200000e4
 800123c:	0800a304 	.word	0x0800a304
 8001240:	08001451 	.word	0x08001451
 8001244:	0800a328 	.word	0x0800a328
 8001248:	080018c5 	.word	0x080018c5
 800124c:	080013f5 	.word	0x080013f5
 8001250:	0800a258 	.word	0x0800a258
 8001254:	0800a2ec 	.word	0x0800a2ec
 8001258:	08001371 	.word	0x08001371
 800125c:	0800a268 	.word	0x0800a268
 8001260:	0800a34c 	.word	0x0800a34c
 8001264:	20000e00 	.word	0x20000e00

08001268 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001276:	2b01      	cmp	r3, #1
 8001278:	d00f      	beq.n	800129a <ModbusStart+0x32>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001280:	2b03      	cmp	r3, #3
 8001282:	d00a      	beq.n	800129a <ModbusStart+0x32>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800128a:	2b02      	cmp	r3, #2
 800128c:	d005      	beq.n	800129a <ModbusStart+0x32>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001294:	2b04      	cmp	r3, #4
 8001296:	d000      	beq.n	800129a <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8001298:	e7fe      	b.n	8001298 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d100      	bne.n	80012a6 <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 80012a4:	e7fe      	b.n	80012a4 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d004      	beq.n	80012ba <ModbusStart+0x52>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d13c      	bne.n	8001334 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68d8      	ldr	r0, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	8a1b      	ldrh	r3, [r3, #16]
 80012ca:	2200      	movs	r2, #0
 80012cc:	4619      	mov	r1, r3
 80012ce:	f002 febb 	bl	8004048 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d105      	bne.n	80012e6 <ModbusStart+0x7e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d100      	bne.n	80012e6 <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 80012e4:	e7fe      	b.n	80012e4 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 80012e6:	bf00      	nop
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fe46 	bl	8005f7e <HAL_UART_GetState>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	d1f7      	bne.n	80012e8 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6858      	ldr	r0, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	33a6      	adds	r3, #166	; 0xa6
 8001300:	2201      	movs	r2, #1
 8001302:	4619      	mov	r1, r3
 8001304:	f004 fb74 	bl	80059f0 <HAL_UART_Receive_IT>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d000      	beq.n	8001310 <ModbusStart+0xa8>
          {
                while(1)
 800130e:	e7fe      	b.n	800130e <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7a1b      	ldrb	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <ModbusStart+0xba>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d100      	bne.n	8001322 <ModbusStart+0xba>
          {
        	  while(1)
 8001320:	e7fe      	b.n	8001320 <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7a1b      	ldrb	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d104      	bne.n	8001334 <ModbusStart+0xcc>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b03      	cmp	r3, #3
 8001330:	d100      	bne.n	8001334 <ModbusStart+0xcc>
          {
             	  while(1)
 8001332:	e7fe      	b.n	8001332 <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e02a      	b.n	80013d4 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <vTimerCallbackT35+0x7c>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	d11e      	bne.n	80013ce <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8001390:	4a16      	ldr	r2, [pc, #88]	; (80013ec <vTimerCallbackT35+0x7c>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b04      	cmp	r3, #4
 800139c:	d10c      	bne.n	80013b8 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <vTimerCallbackT35+0x7c>)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80013aa:	2300      	movs	r3, #0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	2200      	movs	r2, #0
 80013b2:	2103      	movs	r1, #3
 80013b4:	f007 fdc4 	bl	8008f40 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <vTimerCallbackT35+0x7c>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80013c4:	2300      	movs	r3, #0
 80013c6:	2203      	movs	r2, #3
 80013c8:	2100      	movs	r1, #0
 80013ca:	f007 fb5b 	bl	8008a84 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3301      	adds	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <vTimerCallbackT35+0x80>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4293      	cmp	r3, r2
 80013de:	dbce      	blt.n	800137e <vTimerCallbackT35+0xe>
		}

	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000e00 	.word	0x20000e00
 80013f0:	200000e4 	.word	0x200000e4

080013f4 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e017      	b.n	8001432 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8001402:	4a11      	ldr	r2, [pc, #68]	; (8001448 <vTimerCallbackTimeout+0x54>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	d10b      	bne.n	800142c <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <vTimerCallbackTimeout+0x54>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001420:	2300      	movs	r3, #0
 8001422:	2203      	movs	r2, #3
 8001424:	f06f 0107 	mvn.w	r1, #7
 8001428:	f007 fb2c 	bl	8008a84 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <vTimerCallbackTimeout+0x58>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4293      	cmp	r3, r2
 800143c:	dbe1      	blt.n	8001402 <vTimerCallbackTimeout+0xe>
		}

	}

}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000e00 	.word	0x20000e00
 800144c:	200000e4 	.word	0x200000e4

08001450 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001468:	2b01      	cmp	r3, #1
 800146a:	d004      	beq.n	8001476 <StartTaskModbusSlave+0x26>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001472:	2b04      	cmp	r3, #4
 8001474:	d117      	bne.n	80014a6 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8001476:	f04f 31ff 	mov.w	r1, #4294967295
 800147a:	2001      	movs	r0, #1
 800147c:	f007 faba 	bl	80089f4 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 fbe9 	bl	8001c58 <getRxBuffer>
 8001486:	4603      	mov	r3, r0
 8001488:	f113 0f03 	cmn.w	r3, #3
 800148c:	d10b      	bne.n	80014a6 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	22fd      	movs	r2, #253	; 0xfd
 8001492:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800149a:	3301      	adds	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 80014a4:	e0a1      	b.n	80015ea <StartTaskModbusSlave+0x19a>
	  }
	   //modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
   }

   if (modH->u8BufferSize < 7)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80014ac:	2b06      	cmp	r3, #6
 80014ae:	d80b      	bhi.n	80014c8 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	22fa      	movs	r2, #250	; 0xfa
 80014b4:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80014bc:	3301      	adds	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	  {
		  netconn_close(modH->newconn);
		  netconn_delete(modH->newconn);
	  }
  #endif
	  continue;
 80014c6:	e090      	b.n	80015ea <StartTaskModbusSlave+0x19a>
    }

		// check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	7cda      	ldrb	r2, [r3, #19]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	7a1b      	ldrb	r3, [r3, #8]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8089 	bne.w	80015e8 <StartTaskModbusSlave+0x198>
        #endif
		continue;
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 fc08 	bl	8001cec <validateRequest>
 80014dc:	4603      	mov	r3, r0
 80014de:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 80014e0:	7afb      	ldrb	r3, [r7, #11]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 80014e6:	7afb      	ldrb	r3, [r7, #11]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fda0 	bl	8002030 <buildException>
			sendTxBuffer(modH);
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fdbb 	bl	800206c <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 80014f6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	749a      	strb	r2, [r3, #18]
		{
		    netconn_close(modH->newconn);
		  	netconn_delete(modH->newconn);
		}
        #endif
		continue;
 80014fe:	e074      	b.n	80015ea <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	749a      	strb	r2, [r3, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	4618      	mov	r0, r3
 8001512:	f005 ff55 	bl	80073c0 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	7d1b      	ldrb	r3, [r3, #20]
 800151a:	3b01      	subs	r3, #1
 800151c:	2b0f      	cmp	r3, #15
 800151e:	d859      	bhi.n	80015d4 <StartTaskModbusSlave+0x184>
 8001520:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <StartTaskModbusSlave+0xd8>)
 8001522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001526:	bf00      	nop
 8001528:	08001569 	.word	0x08001569
 800152c:	08001569 	.word	0x08001569
 8001530:	0800157b 	.word	0x0800157b
 8001534:	0800157b 	.word	0x0800157b
 8001538:	0800158d 	.word	0x0800158d
 800153c:	0800159f 	.word	0x0800159f
 8001540:	080015d5 	.word	0x080015d5
 8001544:	080015d5 	.word	0x080015d5
 8001548:	080015d5 	.word	0x080015d5
 800154c:	080015d5 	.word	0x080015d5
 8001550:	080015d5 	.word	0x080015d5
 8001554:	080015d5 	.word	0x080015d5
 8001558:	080015d5 	.word	0x080015d5
 800155c:	080015d5 	.word	0x080015d5
 8001560:	080015b1 	.word	0x080015b1
 8001564:	080015c3 	.word	0x080015c3
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fe0f 	bl	800218c <process_FC1>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8001578:	e02d      	b.n	80015d6 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 febb 	bl	80022f6 <process_FC3>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800158a:	e024      	b.n	80015d6 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 ff1d 	bl	80023cc <process_FC5>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 800159c:	e01b      	b.n	80015d6 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 ff6d 	bl	800247e <process_FC6>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80015ae:	e012      	b.n	80015d6 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 ff96 	bl	80024e2 <process_FC15>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80015c0:	e009      	b.n	80015d6 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f001 f81b 	bl	80025fe <process_FC16>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80015d2:	e000      	b.n	80015d6 <StartTaskModbusSlave+0x186>
			default:
				break;
 80015d4:	bf00      	nop
	    netconn_close(modH->newconn);
	  	netconn_delete(modH->newconn);
	 }
   #endif

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80015dc:	2300      	movs	r3, #0
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	f005 fc77 	bl	8006ed4 <xQueueGenericSend>

	 continue;
 80015e6:	e000      	b.n	80015ea <StartTaskModbusSlave+0x19a>
		continue;
 80015e8:	bf00      	nop
  {
 80015ea:	e737      	b.n	800145c <StartTaskModbusSlave+0xc>

080015ec <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80015ec:	b084      	sub	sp, #16
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	f107 001c 	add.w	r0, r7, #28
 80015fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	4618      	mov	r0, r3
 800160e:	f005 fed7 	bl	80073c0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7a1b      	ldrb	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SendQuery+0x32>
 800161a:	23ff      	movs	r3, #255	; 0xff
 800161c:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SendQuery+0x40>
 8001628:	23fe      	movs	r3, #254	; 0xfe
 800162a:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 800162c:	7f3b      	ldrb	r3, [r7, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <SendQuery+0x4c>
 8001632:	7f3b      	ldrb	r3, [r7, #28]
 8001634:	2bf7      	cmp	r3, #247	; 0xf7
 8001636:	d901      	bls.n	800163c <SendQuery+0x50>
 8001638:	23f7      	movs	r3, #247	; 0xf7
 800163a:	73bb      	strb	r3, [r7, #14]

	if(error)
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00e      	beq.n	8001660 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8001642:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001650:	2300      	movs	r3, #0
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	f005 fc3d 	bl	8006ed4 <xQueueGenericSend>
		 return error;
 800165a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800165e:	e129      	b.n	80018b4 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8001660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8001668:	7f3a      	ldrb	r2, [r7, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800166e:	7f7a      	ldrb	r2, [r7, #29]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8001674:	8bfb      	ldrh	r3, [r7, #30]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2da      	uxtb	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8001680:	8bfb      	ldrh	r3, [r7, #30]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8001688:	7f7b      	ldrb	r3, [r7, #29]
 800168a:	3b01      	subs	r3, #1
 800168c:	2b0f      	cmp	r3, #15
 800168e:	f200 80fe 	bhi.w	800188e <SendQuery+0x2a2>
 8001692:	a201      	add	r2, pc, #4	; (adr r2, 8001698 <SendQuery+0xac>)
 8001694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001698:	080016d9 	.word	0x080016d9
 800169c:	080016d9 	.word	0x080016d9
 80016a0:	080016d9 	.word	0x080016d9
 80016a4:	080016d9 	.word	0x080016d9
 80016a8:	080016f7 	.word	0x080016f7
 80016ac:	08001719 	.word	0x08001719
 80016b0:	0800188f 	.word	0x0800188f
 80016b4:	0800188f 	.word	0x0800188f
 80016b8:	0800188f 	.word	0x0800188f
 80016bc:	0800188f 	.word	0x0800188f
 80016c0:	0800188f 	.word	0x0800188f
 80016c4:	0800188f 	.word	0x0800188f
 80016c8:	0800188f 	.word	0x0800188f
 80016cc:	0800188f 	.word	0x0800188f
 80016d0:	0800173b 	.word	0x0800173b
 80016d4:	080017f9 	.word	0x080017f9
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80016d8:	8c3b      	ldrh	r3, [r7, #32]
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80016e4:	8c3b      	ldrh	r3, [r7, #32]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2206      	movs	r2, #6
 80016f0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80016f4:	e0cb      	b.n	800188e <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SendQuery+0x116>
 80016fe:	22ff      	movs	r2, #255	; 0xff
 8001700:	e000      	b.n	8001704 <SendQuery+0x118>
 8001702:	2200      	movs	r2, #0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2206      	movs	r2, #6
 8001712:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8001716:	e0ba      	b.n	800188e <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2206      	movs	r2, #6
 8001734:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8001738:	e0a9      	b.n	800188e <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800173a:	8c3b      	ldrh	r3, [r7, #32]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	b29b      	uxth	r3, r3
 8001740:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8001742:	7a7b      	ldrb	r3, [r7, #9]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8001748:	8c3b      	ldrh	r3, [r7, #32]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	b29b      	uxth	r3, r3
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3301      	adds	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 800175a:	7a7b      	ldrb	r3, [r7, #9]
 800175c:	3301      	adds	r3, #1
 800175e:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8001760:	8c3b      	ldrh	r3, [r7, #32]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2da      	uxtb	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800176c:	8c3b      	ldrh	r3, [r7, #32]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2207      	movs	r2, #7
 800177e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	81bb      	strh	r3, [r7, #12]
 8001786:	e031      	b.n	80017ec <SendQuery+0x200>
	    {
	        if(i%2)
 8001788:	89bb      	ldrh	r3, [r7, #12]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	b29b      	uxth	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00f      	beq.n	80017b4 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8001794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	b29b      	uxth	r3, r3
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	881a      	ldrh	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017a8:	4619      	mov	r1, r3
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	440b      	add	r3, r1
 80017b0:	74da      	strb	r2, [r3, #19]
 80017b2:	e010      	b.n	80017d6 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80017b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b6:	89bb      	ldrh	r3, [r7, #12]
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017cc:	4619      	mov	r1, r3
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	440b      	add	r3, r1
 80017d4:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017dc:	3301      	adds	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80017e6:	89bb      	ldrh	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	81bb      	strh	r3, [r7, #12]
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	89ba      	ldrh	r2, [r7, #12]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3c8      	bcc.n	8001788 <SendQuery+0x19c>
	    }
	    break;
 80017f6:	e04a      	b.n	800188e <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80017f8:	8c3b      	ldrh	r3, [r7, #32]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8001804:	8c3b      	ldrh	r3, [r7, #32]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800180c:	8c3b      	ldrh	r3, [r7, #32]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2207      	movs	r2, #7
 800181c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	817b      	strh	r3, [r7, #10]
 8001824:	e02e      	b.n	8001884 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8001826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001828:	897b      	ldrh	r3, [r7, #10]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800183a:	4619      	mov	r1, r3
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	440b      	add	r3, r1
 8001842:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8001854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001856:	897b      	ldrh	r3, [r7, #10]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001864:	4619      	mov	r1, r3
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	440b      	add	r3, r1
 800186c:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001874:	3301      	adds	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	3301      	adds	r3, #1
 8001882:	817b      	strh	r3, [r7, #10]
 8001884:	8c3b      	ldrh	r3, [r7, #32]
 8001886:	897a      	ldrh	r2, [r7, #10]
 8001888:	429a      	cmp	r2, r3
 800188a:	d3cc      	bcc.n	8001826 <SendQuery+0x23a>
	    }
	    break;
 800188c:	bf00      	nop
	}

	sendTxBuffer(modH);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fbec 	bl	800206c <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800189a:	2300      	movs	r3, #0
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	f005 fb18 	bl	8006ed4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	749a      	strb	r2, [r3, #18]
	return 0;
 80018b2:	2300      	movs	r3, #0


}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018be:	b004      	add	sp, #16
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80018d6:	f107 010c 	add.w	r1, r7, #12
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 fc8e 	bl	8007200 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018f0:	f7ff fe7c 	bl	80015ec <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	2001      	movs	r0, #1
 80018fa:	f007 f87b 	bl	80089f4 <ulTaskNotifyTake>
 80018fe:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	2200      	movs	r2, #0
 8001904:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d018      	beq.n	800193e <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	2200      	movs	r2, #0
 8001910:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	22f8      	movs	r2, #248	; 0xf8
 8001918:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001920:	3301      	adds	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800192a:	69b8      	ldr	r0, [r7, #24]
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001932:	4619      	mov	r1, r3
 8001934:	2300      	movs	r3, #0
 8001936:	2203      	movs	r2, #3
 8001938:	f007 f8a4 	bl	8008a84 <xTaskGenericNotify>
    	  continue;
 800193c:	e097      	b.n	8001a6e <StartTaskModbusMaster+0x1aa>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 800193e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001940:	f000 f98a 	bl	8001c58 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800194a:	2b05      	cmp	r3, #5
 800194c:	d818      	bhi.n	8001980 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	2200      	movs	r2, #0
 8001952:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	22fa      	movs	r2, #250	; 0xfa
 800195a:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001962:	3301      	adds	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800196c:	69b8      	ldr	r0, [r7, #24]
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001974:	4619      	mov	r1, r3
 8001976:	2300      	movs	r3, #0
 8001978:	2203      	movs	r2, #3
 800197a:	f007 f883 	bl	8008a84 <xTaskGenericNotify>
		  continue;
 800197e:	e076      	b.n	8001a6e <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8001986:	2300      	movs	r3, #0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	2200      	movs	r2, #0
 800198e:	2103      	movs	r1, #3
 8001990:	f007 fad6 	bl	8008f40 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8001994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001996:	f000 f8f1 	bl	8001b7c <validateAnswer>
 800199a:	4603      	mov	r3, r0
 800199c:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 800199e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d010      	beq.n	80019c8 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	7ffa      	ldrb	r2, [r7, #31]
 80019b2:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80019b4:	69b8      	ldr	r0, [r7, #24]
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80019bc:	4619      	mov	r1, r3
 80019be:	2300      	movs	r3, #0
 80019c0:	2203      	movs	r2, #3
 80019c2:	f007 f85f 	bl	8008a84 <xTaskGenericNotify>
	     continue;
 80019c6:	e052      	b.n	8001a6e <StartTaskModbusMaster+0x1aa>
	  }

	  modH->i8lastError = u8exception;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	7ffa      	ldrb	r2, [r7, #31]
 80019cc:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 fcf1 	bl	80073c0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	7d1b      	ldrb	r3, [r3, #20]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d82b      	bhi.n	8001a40 <StartTaskModbusMaster+0x17c>
 80019e8:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <StartTaskModbusMaster+0x12c>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a31 	.word	0x08001a31
 80019f4:	08001a31 	.word	0x08001a31
 80019f8:	08001a39 	.word	0x08001a39
 80019fc:	08001a39 	.word	0x08001a39
 8001a00:	08001a41 	.word	0x08001a41
 8001a04:	08001a41 	.word	0x08001a41
 8001a08:	08001a41 	.word	0x08001a41
 8001a0c:	08001a41 	.word	0x08001a41
 8001a10:	08001a41 	.word	0x08001a41
 8001a14:	08001a41 	.word	0x08001a41
 8001a18:	08001a41 	.word	0x08001a41
 8001a1c:	08001a41 	.word	0x08001a41
 8001a20:	08001a41 	.word	0x08001a41
 8001a24:	08001a41 	.word	0x08001a41
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a41 	.word	0x08001a41
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8001a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a32:	f000 f81d 	bl	8001a70 <get_FC1>
	      break;
 8001a36:	e004      	b.n	8001a42 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8001a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a3a:	f000 f870 	bl	8001b1e <get_FC3>
	      break;
 8001a3e:	e000      	b.n	8001a42 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8001a40:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001a50:	2300      	movs	r3, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	f005 fa3d 	bl	8006ed4 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001a5a:	69b8      	ldr	r0, [r7, #24]
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001a62:	4619      	mov	r1, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	2203      	movs	r2, #3
 8001a68:	f007 f80c 	bl	8008a84 <xTaskGenericNotify>
	  continue;
 8001a6c:	bf00      	nop
  {
 8001a6e:	e72f      	b.n	80018d0 <StartTaskModbusMaster+0xc>

08001a70 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e043      	b.n	8001b0a <get_FC1+0x9a>

        if(i%2)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01c      	beq.n	8001ac8 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	7bbb      	ldrb	r3, [r7, #14]
 8001a92:	4413      	add	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	7cd8      	ldrb	r0, [r3, #19]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b2d9      	uxtb	r1, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	18d4      	adds	r4, r2, r3
 8001abe:	f000 fa5f 	bl	8001f80 <word>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	8023      	strh	r3, [r4, #0]
 8001ac6:	e01d      	b.n	8001b04 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b2d8      	uxtb	r0, r3
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	7bbb      	ldrb	r3, [r7, #14]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	7cd9      	ldrb	r1, [r3, #19]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	18d4      	adds	r4, r2, r3
 8001afc:	f000 fa40 	bl	8001f80 <word>
 8001b00:	4603      	mov	r3, r0
 8001b02:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	3301      	adds	r3, #1
 8001b08:	73fb      	strb	r3, [r7, #15]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7d5b      	ldrb	r3, [r3, #21]
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d3b6      	bcc.n	8001a82 <get_FC1+0x12>
        }

     }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}

08001b1e <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8001b1e:	b590      	push	{r4, r7, lr}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8001b26:	2303      	movs	r3, #3
 8001b28:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73bb      	strb	r3, [r7, #14]
 8001b2e:	e018      	b.n	8001b62 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	7cd8      	ldrb	r0, [r3, #19]
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	7cd9      	ldrb	r1, [r3, #19]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b48:	7bbb      	ldrb	r3, [r7, #14]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	18d4      	adds	r4, r2, r3
 8001b4e:	f000 fa17 	bl	8001f80 <word>
 8001b52:	4603      	mov	r3, r0
 8001b54:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73bb      	strb	r3, [r7, #14]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7d5b      	ldrb	r3, [r3, #21]
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	7bba      	ldrb	r2, [r7, #14]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3df      	bcc.n	8001b30 <get_FC3+0x12>
    }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
	...

08001b7c <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001b8a:	3b02      	subs	r3, #2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	7cdb      	ldrb	r3, [r3, #19]
 8001b92:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	440b      	add	r3, r1
 8001ba2:	7cdb      	ldrb	r3, [r3, #19]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8001baa:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f103 0213 	add.w	r2, r3, #19
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001bb8:	3b02      	subs	r3, #2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f000 f9f0 	bl	8001fa4 <calcCRC>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	89bb      	ldrh	r3, [r7, #12]
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8001bde:	23fc      	movs	r3, #252	; 0xfc
 8001be0:	e034      	b.n	8001c4c <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7d1b      	ldrb	r3, [r3, #20]
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da09      	bge.n	8001c00 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8001bfc:	23fb      	movs	r3, #251	; 0xfb
 8001bfe:	e025      	b.n	8001c4c <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	73bb      	strb	r3, [r7, #14]
 8001c08:	e00c      	b.n	8001c24 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001c0a:	7bbb      	ldrb	r3, [r7, #14]
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <validateAnswer+0xd8>)
 8001c0e:	5cd2      	ldrb	r2, [r2, r3]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d102      	bne.n	8001c1e <validateAnswer+0xa2>
        {
            isSupported = 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
            break;
 8001c1c:	e005      	b.n	8001c2a <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	3301      	adds	r3, #1
 8001c22:	73bb      	strb	r3, [r7, #14]
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d9ef      	bls.n	8001c0a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	0800a35c 	.word	0x0800a35c

08001c58 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d104      	bne.n	8001c74 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 feee 	bl	8005a50 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	33bc      	adds	r3, #188	; 0xbc
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa34 	bl	80010f0 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8001c88:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8001c8c:	81fb      	strh	r3, [r7, #14]
 8001c8e:	e019      	b.n	8001cc4 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3313      	adds	r3, #19
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7ff f9c1 	bl	8001024 <RingGetAllBytes>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001cc2:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6858      	ldr	r0, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	33a6      	adds	r3, #166	; 0xa6
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f003 fe89 	bl	80059f0 <HAL_UART_Receive_IT>
	}

    return i16result;
 8001cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001cfa:	3b02      	subs	r3, #2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	7cdb      	ldrb	r3, [r3, #19]
 8001d02:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	440b      	add	r3, r1
 8001d12:	7cdb      	ldrb	r3, [r3, #19]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001d1a:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f103 0213 	add.w	r2, r3, #19
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d28:	3b02      	subs	r3, #2
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f000 f938 	bl	8001fa4 <calcCRC>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	893b      	ldrh	r3, [r7, #8]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001d44:	3301      	adds	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8001d4e:	23fc      	movs	r3, #252	; 0xfc
 8001d50:	e10f      	b.n	8001f72 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	73bb      	strb	r3, [r7, #14]
 8001d5a:	e00c      	b.n	8001d76 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	4a87      	ldr	r2, [pc, #540]	; (8001f7c <validateRequest+0x290>)
 8001d60:	5cd2      	ldrb	r2, [r2, r3]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7d1b      	ldrb	r3, [r3, #20]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d102      	bne.n	8001d70 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
	            break;
 8001d6e:	e005      	b.n	8001d7c <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001d70:	7bbb      	ldrb	r3, [r7, #14]
 8001d72:	3301      	adds	r3, #1
 8001d74:	73bb      	strb	r3, [r7, #14]
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	2b07      	cmp	r3, #7
 8001d7a:	d9ef      	bls.n	8001d5c <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	f083 0301 	eor.w	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0ea      	b.n	8001f72 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7d1b      	ldrb	r3, [r3, #20]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	2b0f      	cmp	r3, #15
 8001dac:	f200 80e0 	bhi.w	8001f70 <validateRequest+0x284>
 8001db0:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <validateRequest+0xcc>)
 8001db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db6:	bf00      	nop
 8001db8:	08001df9 	.word	0x08001df9
 8001dbc:	08001df9 	.word	0x08001df9
 8001dc0:	08001f11 	.word	0x08001f11
 8001dc4:	08001f11 	.word	0x08001f11
 8001dc8:	08001ea5 	.word	0x08001ea5
 8001dcc:	08001eed 	.word	0x08001eed
 8001dd0:	08001f71 	.word	0x08001f71
 8001dd4:	08001f71 	.word	0x08001f71
 8001dd8:	08001f71 	.word	0x08001f71
 8001ddc:	08001f71 	.word	0x08001f71
 8001de0:	08001f71 	.word	0x08001f71
 8001de4:	08001f71 	.word	0x08001f71
 8001de8:	08001f71 	.word	0x08001f71
 8001dec:	08001f71 	.word	0x08001f71
 8001df0:	08001df9 	.word	0x08001df9
 8001df4:	08001f11 	.word	0x08001f11
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7d5a      	ldrb	r2, [r3, #21]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7d9b      	ldrb	r3, [r3, #22]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f000 f8bc 	bl	8001f80 <word>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7dda      	ldrb	r2, [r3, #23]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7e1b      	ldrb	r3, [r3, #24]
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f000 f8b1 	bl	8001f80 <word>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7dda      	ldrb	r2, [r3, #23]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e1b      	ldrb	r3, [r3, #24]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f000 f8a6 	bl	8001f80 <word>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <validateRequest+0x15a>
 8001e40:	897b      	ldrh	r3, [r7, #10]
 8001e42:	3301      	adds	r3, #1
 8001e44:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001e46:	89ba      	ldrh	r2, [r7, #12]
 8001e48:	897b      	ldrh	r3, [r7, #10]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001e52:	4293      	cmp	r3, r2
 8001e54:	dd01      	ble.n	8001e5a <validateRequest+0x16e>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e08b      	b.n	8001f72 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	7dda      	ldrb	r2, [r3, #23]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7e1b      	ldrb	r3, [r3, #24]
 8001e62:	4619      	mov	r1, r3
 8001e64:	4610      	mov	r0, r2
 8001e66:	f000 f88b 	bl	8001f80 <word>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7dda      	ldrb	r2, [r3, #23]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e1b      	ldrb	r3, [r3, #24]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f000 f880 	bl	8001f80 <word>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <validateRequest+0x1a6>
 8001e8c:	897b      	ldrh	r3, [r7, #10]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	3305      	adds	r3, #5
 8001e96:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9e:	d960      	bls.n	8001f62 <validateRequest+0x276>
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e066      	b.n	8001f72 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7d5a      	ldrb	r2, [r3, #21]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7d9b      	ldrb	r3, [r3, #22]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f000 f866 	bl	8001f80 <word>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7d5a      	ldrb	r2, [r3, #21]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7d9b      	ldrb	r3, [r3, #22]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	f000 f85b 	bl	8001f80 <word>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <validateRequest+0x1f0>
 8001ed6:	89bb      	ldrh	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001ee2:	89ba      	ldrh	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d93e      	bls.n	8001f66 <validateRequest+0x27a>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e042      	b.n	8001f72 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7d5a      	ldrb	r2, [r3, #21]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7d9b      	ldrb	r3, [r3, #22]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	f000 f842 	bl	8001f80 <word>
 8001efc:	4603      	mov	r3, r0
 8001efe:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001f06:	89ba      	ldrh	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d92e      	bls.n	8001f6a <validateRequest+0x27e>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e030      	b.n	8001f72 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7d5a      	ldrb	r2, [r3, #21]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7d9b      	ldrb	r3, [r3, #22]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f000 f830 	bl	8001f80 <word>
 8001f20:	4603      	mov	r3, r0
 8001f22:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7dda      	ldrb	r2, [r3, #23]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7e1b      	ldrb	r3, [r3, #24]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 f826 	bl	8001f80 <word>
 8001f34:	4603      	mov	r3, r0
 8001f36:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001f38:	89ba      	ldrh	r2, [r7, #12]
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001f44:	4293      	cmp	r3, r2
 8001f46:	dd01      	ble.n	8001f4c <validateRequest+0x260>
 8001f48:	2302      	movs	r3, #2
 8001f4a:	e012      	b.n	8001f72 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8001f4c:	897b      	ldrh	r3, [r7, #10]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3305      	adds	r3, #5
 8001f54:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5c:	d907      	bls.n	8001f6e <validateRequest+0x282>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e007      	b.n	8001f72 <validateRequest+0x286>
	        break;
 8001f62:	bf00      	nop
 8001f64:	e004      	b.n	8001f70 <validateRequest+0x284>
	        break;
 8001f66:	bf00      	nop
 8001f68:	e002      	b.n	8001f70 <validateRequest+0x284>
	        break;
 8001f6a:	bf00      	nop
 8001f6c:	e000      	b.n	8001f70 <validateRequest+0x284>
	        break;
 8001f6e:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8001f70:	2300      	movs	r3, #0

}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	0800a35c 	.word	0x0800a35c

08001f80 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8001f98:	89bb      	ldrh	r3, [r7, #12]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8001fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb4:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	74fb      	strb	r3, [r7, #19]
 8001fba:	e023      	b.n	8002004 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	4053      	eors	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001fcc:	2301      	movs	r3, #1
 8001fce:	74bb      	strb	r3, [r7, #18]
 8001fd0:	e012      	b.n	8001ff8 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	085b      	lsrs	r3, r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
            if (flag)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <calcCRC+0x4e>
                temp ^= 0xA001;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8001fec:	f083 0301 	eor.w	r3, r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001ff2:	7cbb      	ldrb	r3, [r7, #18]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	74bb      	strb	r3, [r7, #18]
 8001ff8:	7cbb      	ldrb	r3, [r7, #18]
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d9e9      	bls.n	8001fd2 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8001ffe:	7cfb      	ldrb	r3, [r7, #19]
 8002000:	3301      	adds	r3, #1
 8002002:	74fb      	strb	r3, [r7, #19]
 8002004:	7cfa      	ldrb	r2, [r7, #19]
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3d7      	bcc.n	8001fbc <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	b29b      	uxth	r3, r3
 8002020:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	b29b      	uxth	r3, r3

}
 8002026:	4618      	mov	r0, r3
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	7d1b      	ldrb	r3, [r3, #20]
 8002040:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	7a1a      	ldrb	r2, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3b80      	subs	r3, #128	; 0x80
 800204e:	b2da      	uxtb	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	79fa      	ldrb	r2, [r7, #7]
 8002058:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2203      	movs	r2, #3
 800205e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b087      	sub	sp, #28
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f103 0213 	add.w	r2, r3, #19
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff ff8e 	bl	8001fa4 <calcCRC>
 8002088:	4603      	mov	r3, r0
 800208a:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 800208c:	89fb      	ldrh	r3, [r7, #14]
 800208e:	0a1b      	lsrs	r3, r3, #8
 8002090:	b29a      	uxth	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002098:	4619      	mov	r1, r3
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	440b      	add	r3, r1
 80020a0:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020b8:	4619      	mov	r1, r3
 80020ba:	89fb      	ldrh	r3, [r7, #14]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	440b      	add	r3, r1
 80020c2:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80020ca:	3301      	adds	r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00c      	beq.n	80020f6 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fee6 	bl	8005eb2 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68d8      	ldr	r0, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8a1b      	ldrh	r3, [r3, #16]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4619      	mov	r1, r3
 80020f2:	f001 ffa9 	bl	8004048 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6858      	ldr	r0, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 0113 	add.w	r1, r3, #19
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	f003 fc2d 	bl	8005968 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800210e:	21fa      	movs	r1, #250	; 0xfa
 8002110:	2001      	movs	r0, #1
 8002112:	f006 fc6f 	bl	80089f4 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8002116:	bf00      	nop
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f7      	beq.n	8002118 <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00c      	beq.n	800214a <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68d8      	ldr	r0, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8a1b      	ldrh	r3, [r3, #16]
 8002138:	2200      	movs	r2, #0
 800213a:	4619      	mov	r1, r3
 800213c:	f001 ff84 	bl	8004048 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fee7 	bl	8005f18 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d10c      	bne.n	800216c <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8002158:	f005 ff6c 	bl	8008034 <xTaskGetTickCount>
 800215c:	4602      	mov	r2, r0
 800215e:	2300      	movs	r3, #0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	2102      	movs	r1, #2
 8002166:	4620      	mov	r0, r4
 8002168:	f006 feea 	bl	8008f40 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800217a:	3301      	adds	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}

0800218c <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7d5a      	ldrb	r2, [r3, #21]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7d9b      	ldrb	r3, [r3, #22]
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f7ff feee 	bl	8001f80 <word>
 80021a4:	4603      	mov	r3, r0
 80021a6:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7dda      	ldrb	r2, [r3, #23]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f7ff fee4 	bl	8001f80 <word>
 80021b8:	4603      	mov	r3, r0
 80021ba:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80021bc:	8a3b      	ldrh	r3, [r7, #16]
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80021c4:	8a3b      	ldrh	r3, [r7, #16]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <process_FC1+0x4a>
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	3301      	adds	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7dfa      	ldrb	r2, [r7, #23]
 80021da:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2203      	movs	r2, #3
 80021e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80021ea:	461a      	mov	r2, r3
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	4413      	add	r3, r2
 80021f0:	3b01      	subs	r3, #1
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	2200      	movs	r2, #0
 80021f8:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80021fe:	2300      	movs	r3, #0
 8002200:	82bb      	strh	r3, [r7, #20]
 8002202:	e058      	b.n	80022b6 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8002204:	8a7a      	ldrh	r2, [r7, #18]
 8002206:	8abb      	ldrh	r3, [r7, #20]
 8002208:	4413      	add	r3, r2
 800220a:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 800220c:	89bb      	ldrh	r3, [r7, #12]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8002212:	89bb      	ldrh	r3, [r7, #12]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	727b      	strb	r3, [r7, #9]

        bitWrite(
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	7a7b      	ldrb	r3, [r7, #9]
 800222e:	fa42 f303 	asr.w	r3, r2, r3
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d014      	beq.n	8002264 <process_FC1+0xd8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002240:	461a      	mov	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	7cda      	ldrb	r2, [r3, #19]
 8002248:	7dbb      	ldrb	r3, [r7, #22]
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8002258:	4313      	orrs	r3, r2
 800225a:	b2da      	uxtb	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	440b      	add	r3, r1
 8002260:	74da      	strb	r2, [r3, #19]
 8002262:	e015      	b.n	8002290 <process_FC1+0x104>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	7cda      	ldrb	r2, [r3, #19]
 8002272:	7dbb      	ldrb	r3, [r7, #22]
 8002274:	2101      	movs	r1, #1
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8002286:	4013      	ands	r3, r2
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	440b      	add	r3, r1
 800228e:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8002290:	7dbb      	ldrb	r3, [r7, #22]
 8002292:	3301      	adds	r3, #1
 8002294:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8002296:	7dbb      	ldrb	r3, [r7, #22]
 8002298:	2b07      	cmp	r3, #7
 800229a:	d909      	bls.n	80022b0 <process_FC1+0x124>
        {
            u8bitsno = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80022a6:	3301      	adds	r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80022b0:	8abb      	ldrh	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	82bb      	strh	r3, [r7, #20]
 80022b6:	8aba      	ldrh	r2, [r7, #20]
 80022b8:	8a3b      	ldrh	r3, [r7, #16]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d3a2      	bcc.n	8002204 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 80022be:	8a3b      	ldrh	r3, [r7, #16]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <process_FC1+0x14e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80022e0:	3302      	adds	r3, #2
 80022e2:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fec1 	bl	800206c <sendTxBuffer>
    return u8CopyBufferSize;
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7d5a      	ldrb	r2, [r3, #21]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7d9b      	ldrb	r3, [r3, #22]
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f7ff fe39 	bl	8001f80 <word>
 800230e:	4603      	mov	r3, r0
 8002310:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7dda      	ldrb	r2, [r3, #23]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7e1b      	ldrb	r3, [r3, #24]
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f7ff fe2f 	bl	8001f80 <word>
 8002322:	4603      	mov	r3, r0
 8002324:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8002326:	7afb      	ldrb	r3, [r7, #11]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	b2da      	uxtb	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2203      	movs	r2, #3
 8002334:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8002338:	89bb      	ldrh	r3, [r7, #12]
 800233a:	81fb      	strh	r3, [r7, #14]
 800233c:	e032      	b.n	80023a4 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29a      	uxth	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002356:	4619      	mov	r1, r3
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	440b      	add	r3, r1
 800235e:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002376:	89fb      	ldrh	r3, [r7, #14]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	881a      	ldrh	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002384:	4619      	mov	r1, r3
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	440b      	add	r3, r1
 800238c:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002394:	3301      	adds	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 800239e:	89fb      	ldrh	r3, [r7, #14]
 80023a0:	3301      	adds	r3, #1
 80023a2:	81fb      	strh	r3, [r7, #14]
 80023a4:	89fa      	ldrh	r2, [r7, #14]
 80023a6:	89b9      	ldrh	r1, [r7, #12]
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	440b      	add	r3, r1
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dbc6      	blt.n	800233e <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80023b6:	3302      	adds	r3, #2
 80023b8:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fe56 	bl	800206c <sendTxBuffer>

    return u8CopyBufferSize;
 80023c0:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7d5a      	ldrb	r2, [r3, #21]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7d9b      	ldrb	r3, [r3, #22]
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7ff fdce 	bl	8001f80 <word>
 80023e4:	4603      	mov	r3, r0
 80023e6:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 80023e8:	89fb      	ldrh	r3, [r7, #14]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7ddb      	ldrb	r3, [r3, #23]
 80023fc:	2bff      	cmp	r3, #255	; 0xff
 80023fe:	d115      	bne.n	800242c <process_FC5+0x60>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002406:	89bb      	ldrh	r3, [r7, #12]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	8819      	ldrh	r1, [r3, #0]
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	2201      	movs	r2, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	b29a      	uxth	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800241e:	89bb      	ldrh	r3, [r7, #12]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4403      	add	r3, r0
 8002424:	430a      	orrs	r2, r1
 8002426:	b292      	uxth	r2, r2
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	e016      	b.n	800245a <process_FC5+0x8e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002432:	89bb      	ldrh	r3, [r7, #12]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	8819      	ldrh	r1, [r3, #0]
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	2201      	movs	r2, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	b29b      	uxth	r3, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800244e:	89bb      	ldrh	r3, [r7, #12]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4403      	add	r3, r0
 8002454:	400a      	ands	r2, r1
 8002456:	b292      	uxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2206      	movs	r2, #6
 800245e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002468:	3302      	adds	r3, #2
 800246a:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fdfd 	bl	800206c <sendTxBuffer>

    return u8CopyBufferSize;
 8002472:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7d5a      	ldrb	r2, [r3, #21]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7d9b      	ldrb	r3, [r3, #22]
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f7ff fd75 	bl	8001f80 <word>
 8002496:	4603      	mov	r3, r0
 8002498:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7dda      	ldrb	r2, [r3, #23]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7e1b      	ldrb	r3, [r3, #24]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f7ff fd6b 	bl	8001f80 <word>
 80024aa:	4603      	mov	r3, r0
 80024ac:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	89ba      	ldrh	r2, [r7, #12]
 80024bc:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2206      	movs	r2, #6
 80024c2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80024cc:	3302      	adds	r3, #2
 80024ce:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fdcb 	bl	800206c <sendTxBuffer>

    return u8CopyBufferSize;
 80024d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7d5a      	ldrb	r2, [r3, #21]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7d9b      	ldrb	r3, [r3, #22]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f7ff fd43 	bl	8001f80 <word>
 80024fa:	4603      	mov	r3, r0
 80024fc:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7dda      	ldrb	r2, [r3, #23]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7e1b      	ldrb	r3, [r3, #24]
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f7ff fd39 	bl	8001f80 <word>
 800250e:	4603      	mov	r3, r0
 8002510:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8002516:	2307      	movs	r3, #7
 8002518:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800251a:	2300      	movs	r3, #0
 800251c:	82bb      	strh	r3, [r7, #20]
 800251e:	e058      	b.n	80025d2 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8002520:	8a7a      	ldrh	r2, [r7, #18]
 8002522:	8abb      	ldrh	r3, [r7, #20]
 8002524:	4413      	add	r3, r2
 8002526:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8002528:	89bb      	ldrh	r3, [r7, #12]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800252e:	89bb      	ldrh	r3, [r7, #12]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	7cdb      	ldrb	r3, [r3, #19]
 8002540:	461a      	mov	r2, r3
 8002542:	7dbb      	ldrb	r3, [r7, #22]
 8002544:	fa42 f303 	asr.w	r3, r2, r3
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8002556:	7a3b      	ldrb	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <process_FC15+0xa6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002562:	897b      	ldrh	r3, [r7, #10]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	8819      	ldrh	r1, [r3, #0]
 800256a:	7a7b      	ldrb	r3, [r7, #9]
 800256c:	2201      	movs	r2, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800257a:	897b      	ldrh	r3, [r7, #10]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4403      	add	r3, r0
 8002580:	430a      	orrs	r2, r1
 8002582:	b292      	uxth	r2, r2
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	e016      	b.n	80025b6 <process_FC15+0xd4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800258e:	897b      	ldrh	r3, [r7, #10]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	8819      	ldrh	r1, [r3, #0]
 8002596:	7a7b      	ldrb	r3, [r7, #9]
 8002598:	2201      	movs	r2, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80025aa:	897b      	ldrh	r3, [r7, #10]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4403      	add	r3, r0
 80025b0:	400a      	ands	r2, r1
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 80025b6:	7dbb      	ldrb	r3, [r7, #22]
 80025b8:	3301      	adds	r3, #1
 80025ba:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80025bc:	7dbb      	ldrb	r3, [r7, #22]
 80025be:	2b07      	cmp	r3, #7
 80025c0:	d904      	bls.n	80025cc <process_FC15+0xea>
        {
            u8bitsno = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	3301      	adds	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80025cc:	8abb      	ldrh	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	82bb      	strh	r3, [r7, #20]
 80025d2:	8aba      	ldrh	r2, [r7, #20]
 80025d4:	8a3b      	ldrh	r3, [r7, #16]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d3a2      	bcc.n	8002520 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2206      	movs	r2, #6
 80025de:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80025e8:	3302      	adds	r3, #2
 80025ea:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff fd3d 	bl	800206c <sendTxBuffer>
    return u8CopyBufferSize;
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7d5b      	ldrb	r3, [r3, #21]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b21a      	sxth	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7d9b      	ldrb	r3, [r3, #22]
 8002612:	b21b      	sxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b21b      	sxth	r3, r3
 8002618:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7ddb      	ldrb	r3, [r3, #23]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	b21a      	sxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7e1b      	ldrb	r3, [r3, #24]
 8002626:	b21b      	sxth	r3, r3
 8002628:	4313      	orrs	r3, r2
 800262a:	b21b      	sxth	r3, r3
 800262c:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8002634:	8a7b      	ldrh	r3, [r7, #18]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2206      	movs	r2, #6
 8002640:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	82fb      	strh	r3, [r7, #22]
 8002648:	e01d      	b.n	8002686 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800264a:	8afb      	ldrh	r3, [r7, #22]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	3307      	adds	r3, #7
        temp = word(
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8002656:	8afb      	ldrh	r3, [r7, #22]
 8002658:	3304      	adds	r3, #4
 800265a:	005b      	lsls	r3, r3, #1
        temp = word(
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4413      	add	r3, r2
 8002660:	7cdb      	ldrb	r3, [r3, #19]
 8002662:	4619      	mov	r1, r3
 8002664:	f7ff fc8c 	bl	8001f80 <word>
 8002668:	4603      	mov	r3, r0
 800266a:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002672:	8ab9      	ldrh	r1, [r7, #20]
 8002674:	8afb      	ldrh	r3, [r7, #22]
 8002676:	440b      	add	r3, r1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	89fa      	ldrh	r2, [r7, #14]
 800267e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8002680:	8afb      	ldrh	r3, [r7, #22]
 8002682:	3301      	adds	r3, #1
 8002684:	82fb      	strh	r3, [r7, #22]
 8002686:	8afa      	ldrh	r2, [r7, #22]
 8002688:	8a7b      	ldrh	r3, [r7, #18]
 800268a:	429a      	cmp	r2, r3
 800268c:	d3dd      	bcc.n	800264a <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002694:	3302      	adds	r3, #2
 8002696:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff fce7 	bl	800206c <sendTxBuffer>

    return u8CopyBufferSize;
 800269e:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e019      	b.n	80026f2 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 80026be:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_UART_TxCpltCallback+0x70>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d10e      	bne.n	80026ec <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80026ce:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_UART_TxCpltCallback+0x70>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	f006 fa71 	bl	8008bcc <xTaskGenericNotifyFromISR>
	   		break;
 80026ea:	e008      	b.n	80026fe <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_UART_TxCpltCallback+0x74>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	dbdf      	blt.n	80026be <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_UART_TxCpltCallback+0x68>
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <HAL_UART_TxCpltCallback+0x78>)
 8002706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000e00 	.word	0x20000e00
 8002720:	200000e4 	.word	0x200000e4
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b087      	sub	sp, #28
 800272c:	af02      	add	r7, sp, #8
 800272e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e042      	b.n	80027c0 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800273a:	4a2d      	ldr	r2, [pc, #180]	; (80027f0 <HAL_UART_RxCpltCallback+0xc8>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d137      	bne.n	80027ba <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800274a:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_UART_RxCpltCallback+0xc8>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002756:	2b01      	cmp	r3, #1
 8002758:	d139      	bne.n	80027ce <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800275a:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <HAL_UART_RxCpltCallback+0xc8>)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8002766:	4922      	ldr	r1, [pc, #136]	; (80027f0 <HAL_UART_RxCpltCallback+0xc8>)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800276e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f7fe fc0f 	bl	8000f98 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_UART_RxCpltCallback+0xc8>)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	6858      	ldr	r0, [r3, #4]
 8002784:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <HAL_UART_RxCpltCallback+0xc8>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278c:	33a6      	adds	r3, #166	; 0xa6
 800278e:	2201      	movs	r2, #1
 8002790:	4619      	mov	r1, r3
 8002792:	f003 f92d 	bl	80059f0 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_UART_RxCpltCallback+0xc8>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 80027a2:	f005 fc55 	bl	8008050 <xTaskGetTickCountFromISR>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	2100      	movs	r1, #0
 80027ae:	9100      	str	r1, [sp, #0]
 80027b0:	2107      	movs	r1, #7
 80027b2:	4620      	mov	r0, r4
 80027b4:	f006 fbc4 	bl	8008f40 <xTimerGenericCommand>
    		}
    		break;
 80027b8:	e009      	b.n	80027ce <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_UART_RxCpltCallback+0xcc>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	dbb6      	blt.n	800273a <HAL_UART_RxCpltCallback+0x12>
 80027cc:	e000      	b.n	80027d0 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 80027ce:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_UART_RxCpltCallback+0xbe>
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_UART_RxCpltCallback+0xd0>)
 80027d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000e00 	.word	0x20000e00
 80027f4:	200000e4 	.word	0x200000e4
 80027f8:	e000ed04 	.word	0xe000ed04
 80027fc:	00000000 	.word	0x00000000

08002800 <contol_step>:
real_T rtIntegrator_DSTATE;            /* '<S33>/Integrator' */
real_T rtSalida_Control;               /* '<Root>/Salida_Control' */

/* Model step function */
void contol_step(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
  real_T rtb_Gain;

  /* Gain: '<Root>/Gain' incorporates:
   *  Inport: '<Root>/Entrada_Control'
   */
  rtb_Gain = 6.28 * rtEntrada_Control;
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <contol_step+0x130>)
 8002808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280c:	a33c      	add	r3, pc, #240	; (adr r3, 8002900 <contol_step+0x100>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd fe59 	bl	80004c8 <__aeabi_dmul>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  /* Gain: '<S36>/Filter Coefficient' incorporates:
   *  DiscreteIntegrator: '<S28>/Filter'
   *  Gain: '<S27>/Derivative Gain'
   *  Sum: '<S28>/SumD'
   */
  rtb_FilterCoefficient = (0.001 * rtb_Gain - rtFilter_DSTATE) *
 800281e:	a33a      	add	r3, pc, #232	; (adr r3, 8002908 <contol_step+0x108>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002828:	f7fd fe4e 	bl	80004c8 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <contol_step+0x134>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd fc8d 	bl	8000158 <__aeabi_dsub>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	a332      	add	r3, pc, #200	; (adr r3, 8002910 <contol_step+0x110>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fe3c 	bl	80004c8 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9c7 2300 	strd	r2, r3, [r7]
  /* Outport: '<Root>/Salida_Control' incorporates:
   *  DiscreteIntegrator: '<S33>/Integrator'
   *  Gain: '<S38>/Proportional Gain'
   *  Sum: '<S42>/Sum'
   */
  rtSalida_Control = (1.58766614769585 * rtb_Gain + rtIntegrator_DSTATE) +
 8002858:	a32f      	add	r3, pc, #188	; (adr r3, 8002918 <contol_step+0x118>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002862:	f7fd fe31 	bl	80004c8 <__aeabi_dmul>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <contol_step+0x138>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fd fc72 	bl	800015c <__adddf3>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002884:	f7fd fc6a 	bl	800015c <__adddf3>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	492b      	ldr	r1, [pc, #172]	; (800293c <contol_step+0x13c>)
 800288e:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_FilterCoefficient;

  /* Update for DiscreteIntegrator: '<S33>/Integrator' incorporates:
   *  Gain: '<S30>/Integral Gain'
   */
  rtIntegrator_DSTATE = -0.0830444250911029 * rtb_Gain * 0.05 +
 8002892:	a323      	add	r3, pc, #140	; (adr r3, 8002920 <contol_step+0x120>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800289c:	f7fd fe14 	bl	80004c8 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	a31f      	add	r3, pc, #124	; (adr r3, 8002928 <contol_step+0x128>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fe0b 	bl	80004c8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <contol_step+0x138>)
 80028bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c0:	f7fd fc4c 	bl	800015c <__adddf3>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	491b      	ldr	r1, [pc, #108]	; (8002938 <contol_step+0x138>)
 80028ca:	e9c1 2300 	strd	r2, r3, [r1]
    rtIntegrator_DSTATE;

  /* Update for DiscreteIntegrator: '<S28>/Filter' */
  rtFilter_DSTATE = 0.05 * rtb_FilterCoefficient + rtFilter_DSTATE;
 80028ce:	a316      	add	r3, pc, #88	; (adr r3, 8002928 <contol_step+0x128>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d8:	f7fd fdf6 	bl	80004c8 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <contol_step+0x134>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	f7fd fc37 	bl	800015c <__adddf3>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4910      	ldr	r1, [pc, #64]	; (8002934 <contol_step+0x134>)
 80028f4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	51eb851f 	.word	0x51eb851f
 8002904:	40191eb8 	.word	0x40191eb8
 8002908:	d2f1a9fc 	.word	0xd2f1a9fc
 800290c:	3f50624d 	.word	0x3f50624d
 8002910:	36e16be6 	.word	0x36e16be6
 8002914:	4023cbe6 	.word	0x4023cbe6
 8002918:	9e551ea5 	.word	0x9e551ea5
 800291c:	3ff96714 	.word	0x3ff96714
 8002920:	41e1a401 	.word	0x41e1a401
 8002924:	bfb54266 	.word	0xbfb54266
 8002928:	9999999a 	.word	0x9999999a
 800292c:	3fa99999 	.word	0x3fa99999
 8002930:	20000fb8 	.word	0x20000fb8
 8002934:	20000e08 	.word	0x20000e08
 8002938:	20000e10 	.word	0x20000e10
 800293c:	20000fd8 	.word	0x20000fd8

08002940 <contol_initialize>:

/* Model initialize function */
void contol_initialize(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	0000      	movs	r0, r0
	...

08002950 <funcion_linealizadora>:
//	result = result/((float)sizeof(arr));
//	return result;
//}


uint32_t funcion_linealizadora(uint16_t velocidadSetpoint){
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]

	float setp = (float)velocidadSetpoint;
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f973 	bl	8000c48 <__aeabi_ui2f>
 8002962:	4603      	mov	r3, r0
 8002964:	60fb      	str	r3, [r7, #12]

	if(setp/100.0 < 0.799034){
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f7fd fd56 	bl	8000418 <__aeabi_f2d>
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <funcion_linealizadora+0x1c8>)
 8002972:	f7fd fed3 	bl	800071c <__aeabi_ddiv>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	a362      	add	r3, pc, #392	; (adr r3, 8002b08 <funcion_linealizadora+0x1b8>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fe f812 	bl	80009ac <__aeabi_dcmplt>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d027      	beq.n	80029de <funcion_linealizadora+0x8e>
		htim1.Instance->CCR1=(uint32_t)(p1[0]*setp/100.0+p2[0]);
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <funcion_linealizadora+0x1cc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f9af 	bl	8000cf8 <__aeabi_fmul>
 800299a:	4603      	mov	r3, r0
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fd3b 	bl	8000418 <__aeabi_f2d>
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	4b5c      	ldr	r3, [pc, #368]	; (8002b18 <funcion_linealizadora+0x1c8>)
 80029a8:	f7fd feb8 	bl	800071c <__aeabi_ddiv>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4614      	mov	r4, r2
 80029b2:	461d      	mov	r5, r3
 80029b4:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <funcion_linealizadora+0x1d0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd2d 	bl	8000418 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4620      	mov	r0, r4
 80029c4:	4629      	mov	r1, r5
 80029c6:	f7fd fbc9 	bl	800015c <__adddf3>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4955      	ldr	r1, [pc, #340]	; (8002b24 <funcion_linealizadora+0x1d4>)
 80029d0:	680c      	ldr	r4, [r1, #0]
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fe f811 	bl	80009fc <__aeabi_d2uiz>
 80029da:	4603      	mov	r3, r0
 80029dc:	6363      	str	r3, [r4, #52]	; 0x34
	}

	if(setp/100.0 > 0.799034 && setp/100.0<=1.23805){
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7fd fd1a 	bl	8000418 <__aeabi_f2d>
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	4b4b      	ldr	r3, [pc, #300]	; (8002b18 <funcion_linealizadora+0x1c8>)
 80029ea:	f7fd fe97 	bl	800071c <__aeabi_ddiv>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	a344      	add	r3, pc, #272	; (adr r3, 8002b08 <funcion_linealizadora+0x1b8>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fff4 	bl	80009e8 <__aeabi_dcmpgt>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03b      	beq.n	8002a7e <funcion_linealizadora+0x12e>
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7fd fd06 	bl	8000418 <__aeabi_f2d>
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <funcion_linealizadora+0x1c8>)
 8002a12:	f7fd fe83 	bl	800071c <__aeabi_ddiv>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	a33c      	add	r3, pc, #240	; (adr r3, 8002b10 <funcion_linealizadora+0x1c0>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f7fd ffcc 	bl	80009c0 <__aeabi_dcmple>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d027      	beq.n	8002a7e <funcion_linealizadora+0x12e>
			htim1.Instance->CCR1=(uint32_t)(p1[1]*setp/100.0+p2[1]);
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <funcion_linealizadora+0x1cc>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe f95f 	bl	8000cf8 <__aeabi_fmul>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fceb 	bl	8000418 <__aeabi_f2d>
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <funcion_linealizadora+0x1c8>)
 8002a48:	f7fd fe68 	bl	800071c <__aeabi_ddiv>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	461d      	mov	r5, r3
 8002a54:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <funcion_linealizadora+0x1d0>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fcdd 	bl	8000418 <__aeabi_f2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f7fd fb79 	bl	800015c <__adddf3>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	492d      	ldr	r1, [pc, #180]	; (8002b24 <funcion_linealizadora+0x1d4>)
 8002a70:	680c      	ldr	r4, [r1, #0]
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7fd ffc1 	bl	80009fc <__aeabi_d2uiz>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6363      	str	r3, [r4, #52]	; 0x34
		}

	if(setp/100.0 > 1.23805) {
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7fd fcca 	bl	8000418 <__aeabi_f2d>
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <funcion_linealizadora+0x1c8>)
 8002a8a:	f7fd fe47 	bl	800071c <__aeabi_ddiv>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	a31e      	add	r3, pc, #120	; (adr r3, 8002b10 <funcion_linealizadora+0x1c0>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd ffa4 	bl	80009e8 <__aeabi_dcmpgt>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d027      	beq.n	8002af6 <funcion_linealizadora+0x1a6>
				htim1.Instance->CCR1=(uint32_t)(p1[2]*setp/100.0+p2[2]);
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <funcion_linealizadora+0x1cc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	68f9      	ldr	r1, [r7, #12]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe f923 	bl	8000cf8 <__aeabi_fmul>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fcaf 	bl	8000418 <__aeabi_f2d>
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <funcion_linealizadora+0x1c8>)
 8002ac0:	f7fd fe2c 	bl	800071c <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4614      	mov	r4, r2
 8002aca:	461d      	mov	r5, r3
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <funcion_linealizadora+0x1d0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fca1 	bl	8000418 <__aeabi_f2d>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fb3d 	bl	800015c <__adddf3>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	490f      	ldr	r1, [pc, #60]	; (8002b24 <funcion_linealizadora+0x1d4>)
 8002ae8:	680c      	ldr	r4, [r1, #0]
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fd ff85 	bl	80009fc <__aeabi_d2uiz>
 8002af2:	4603      	mov	r3, r0
 8002af4:	6363      	str	r3, [r4, #52]	; 0x34
			}
	return htim1.Instance->CCR1;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <funcion_linealizadora+0x1d4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}
 8002b04:	f3af 8000 	nop.w
 8002b08:	c04c8bca 	.word	0xc04c8bca
 8002b0c:	3fe991af 	.word	0x3fe991af
 8002b10:	844d013b 	.word	0x844d013b
 8002b14:	3ff3cf0d 	.word	0x3ff3cf0d
 8002b18:	40590000 	.word	0x40590000
 8002b1c:	20000038 	.word	0x20000038
 8002b20:	20000044 	.word	0x20000044
 8002b24:	20000fe8 	.word	0x20000fe8

08002b28 <HAL_GPIO_EXTI_Callback>:




// Si se interrumpe por flanco ascendente del pin 0 (Enconder optico)
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == D01_Encoder_Pin){
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f040 8106 	bne.w	8002d46 <HAL_GPIO_EXTI_Callback+0x21e>
		uint32_t ticksAux = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
		ticksAux = ticksPrev;
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]
		ticksPrev = ticksNow;
 8002b44:	4b87      	ldr	r3, [pc, #540]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a85      	ldr	r2, [pc, #532]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002b4a:	6013      	str	r3, [r2, #0]
		ticksNow = __HAL_TIM_GetCounter(&htim2);
 8002b4c:	4b86      	ldr	r3, [pc, #536]	; (8002d68 <HAL_GPIO_EXTI_Callback+0x240>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	4a84      	ldr	r2, [pc, #528]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002b54:	6013      	str	r3, [r2, #0]

		if (overflow == 0){
 8002b56:	4b85      	ldr	r3, [pc, #532]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x244>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d172      	bne.n	8002c44 <HAL_GPIO_EXTI_Callback+0x11c>
			// Todo cool, calculo normal
			deltaTicks = (uint64_t)(ticksNow - ticksPrev);
 8002b5e:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b7f      	ldr	r3, [pc, #508]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	4980      	ldr	r1, [pc, #512]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x248>)
 8002b70:	e9c1 2300 	strd	r2, r3, [r1]
			if (deltaTicks > tickFilter){
 8002b74:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x248>)
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	497e      	ldr	r1, [pc, #504]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x24c>)
 8002b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b80:	4299      	cmp	r1, r3
 8002b82:	bf08      	it	eq
 8002b84:	4290      	cmpeq	r0, r2
 8002b86:	d255      	bcs.n	8002c34 <HAL_GPIO_EXTI_Callback+0x10c>
				velocidad = ((1/(float)ranuras)/((float)deltaTicks/(float)fsTmr2));
 8002b88:	4b7b      	ldr	r3, [pc, #492]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x250>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe f85b 	bl	8000c48 <__aeabi_ui2f>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b9a:	f7fe f961 	bl	8000e60 <__aeabi_fdiv>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461d      	mov	r5, r3
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x248>)
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7fe f85e 	bl	8000c6c <__aeabi_ul2f>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	4b72      	ldr	r3, [pc, #456]	; (8002d7c <HAL_GPIO_EXTI_Callback+0x254>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fe f856 	bl	8000c6c <__aeabi_ul2f>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7fe f94b 	bl	8000e60 <__aeabi_fdiv>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f7fe f946 	bl	8000e60 <__aeabi_fdiv>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b69      	ldr	r3, [pc, #420]	; (8002d80 <HAL_GPIO_EXTI_Callback+0x258>)
 8002bda:	601a      	str	r2, [r3, #0]

				//Filtro IIR
				velocidad_prima2 = velocidad_prima1;
 8002bdc:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a69      	ldr	r2, [pc, #420]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x260>)
 8002be2:	6013      	str	r3, [r2, #0]
				velocidad_prima1 = 0.9*velocidad_prima2 + 0.1*velocidad;
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x260>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fc15 	bl	8000418 <__aeabi_f2d>
 8002bee:	a358      	add	r3, pc, #352	; (adr r3, 8002d50 <HAL_GPIO_EXTI_Callback+0x228>)
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f7fd fc68 	bl	80004c8 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	4b5f      	ldr	r3, [pc, #380]	; (8002d80 <HAL_GPIO_EXTI_Callback+0x258>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fc07 	bl	8000418 <__aeabi_f2d>
 8002c0a:	a353      	add	r3, pc, #332	; (adr r3, 8002d58 <HAL_GPIO_EXTI_Callback+0x230>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd fc5a 	bl	80004c8 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4620      	mov	r0, r4
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	f7fd fa9e 	bl	800015c <__adddf3>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fd ff08 	bl	8000a3c <__aeabi_d2f>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4a55      	ldr	r2, [pc, #340]	; (8002d84 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002c30:	6013      	str	r3, [r2, #0]
		//			velocidad = 0;
		//
		//	 }
	}

}
 8002c32:	e088      	b.n	8002d46 <HAL_GPIO_EXTI_Callback+0x21e>
				ticksNow = ticksPrev;
 8002c34:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002c3a:	6013      	str	r3, [r2, #0]
				ticksPrev = ticksAux;
 8002c3c:	4a48      	ldr	r2, [pc, #288]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6013      	str	r3, [r2, #0]
}
 8002c42:	e080      	b.n	8002d46 <HAL_GPIO_EXTI_Callback+0x21e>
			deltaTicks = (uint64_t)(ticksNow + overflow * cantTicksTmr2)- ticksPrev;
 8002c44:	4b49      	ldr	r3, [pc, #292]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x244>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a50      	ldr	r2, [pc, #320]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x264>)
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	fb02 f203 	mul.w	r2, r2, r3
 8002c50:	4b44      	ldr	r3, [pc, #272]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	4b40      	ldr	r3, [pc, #256]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	1a84      	subs	r4, r0, r2
 8002c68:	eb61 0503 	sbc.w	r5, r1, r3
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c6e:	e9c3 4500 	strd	r4, r5, [r3]
			if (deltaTicks > tickFilter){
 8002c72:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x248>)
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	493e      	ldr	r1, [pc, #248]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x24c>)
 8002c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c7e:	4299      	cmp	r1, r3
 8002c80:	bf08      	it	eq
 8002c82:	4290      	cmpeq	r0, r2
 8002c84:	d258      	bcs.n	8002d38 <HAL_GPIO_EXTI_Callback+0x210>
				velocidad = ((1/(float)ranuras)/((float)deltaTicks/(float)fsTmr2));
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x250>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd ffdc 	bl	8000c48 <__aeabi_ui2f>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4619      	mov	r1, r3
 8002c94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002c98:	f7fe f8e2 	bl	8000e60 <__aeabi_fdiv>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x248>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ffdf 	bl	8000c6c <__aeabi_ul2f>
 8002cae:	4604      	mov	r4, r0
 8002cb0:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_GPIO_EXTI_Callback+0x254>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f7fd ffd7 	bl	8000c6c <__aeabi_ul2f>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7fe f8cc 	bl	8000e60 <__aeabi_fdiv>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f7fe f8c7 	bl	8000e60 <__aeabi_fdiv>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	; (8002d80 <HAL_GPIO_EXTI_Callback+0x258>)
 8002cd8:	601a      	str	r2, [r3, #0]
				velocidad_prima2 = velocidad_prima1;
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x260>)
 8002ce0:	6013      	str	r3, [r2, #0]
				velocidad_prima1 = 0.9*velocidad_prima2 + 0.1*velocidad;
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x260>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fb96 	bl	8000418 <__aeabi_f2d>
 8002cec:	a318      	add	r3, pc, #96	; (adr r3, 8002d50 <HAL_GPIO_EXTI_Callback+0x228>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fbe9 	bl	80004c8 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4614      	mov	r4, r2
 8002cfc:	461d      	mov	r5, r3
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_GPIO_EXTI_Callback+0x258>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fb88 	bl	8000418 <__aeabi_f2d>
 8002d08:	a313      	add	r3, pc, #76	; (adr r3, 8002d58 <HAL_GPIO_EXTI_Callback+0x230>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	f7fd fbdb 	bl	80004c8 <__aeabi_dmul>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4620      	mov	r0, r4
 8002d18:	4629      	mov	r1, r5
 8002d1a:	f7fd fa1f 	bl	800015c <__adddf3>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fd fe89 	bl	8000a3c <__aeabi_d2f>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002d2e:	6013      	str	r3, [r2, #0]
				overflow = 0;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x244>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
}
 8002d36:	e006      	b.n	8002d46 <HAL_GPIO_EXTI_Callback+0x21e>
				ticksNow = ticksPrev;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002d3e:	6013      	str	r3, [r2, #0]
				ticksPrev = ticksAux;
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_GPIO_EXTI_Callback+0x238>)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6013      	str	r3, [r2, #0]
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	cccccccd 	.word	0xcccccccd
 8002d54:	3feccccc 	.word	0x3feccccc
 8002d58:	9999999a 	.word	0x9999999a
 8002d5c:	3fb99999 	.word	0x3fb99999
 8002d60:	200000ec 	.word	0x200000ec
 8002d64:	200000f0 	.word	0x200000f0
 8002d68:	20001058 	.word	0x20001058
 8002d6c:	200000f4 	.word	0x200000f4
 8002d70:	200000f8 	.word	0x200000f8
 8002d74:	20000030 	.word	0x20000030
 8002d78:	20000020 	.word	0x20000020
 8002d7c:	20000028 	.word	0x20000028
 8002d80:	200000e8 	.word	0x200000e8
 8002d84:	20001040 	.word	0x20001040
 8002d88:	20000fd0 	.word	0x20000fd0
 8002d8c:	20000024 	.word	0x20000024

08002d90 <Sentido>:
//	 overflow += 1;
//  }
//  /* USER CODE END Callback 1 */
//}

void Sentido(uint16_t valor){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
	//Motor gira en un sentido
	if(valor == 0){
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10c      	bne.n	8002dba <Sentido+0x2a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, SET);
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002da6:	4815      	ldr	r0, [pc, #84]	; (8002dfc <Sentido+0x6c>)
 8002da8:	f001 f94e 	bl	8004048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 8002dac:	2200      	movs	r2, #0
 8002dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002db2:	4812      	ldr	r0, [pc, #72]	; (8002dfc <Sentido+0x6c>)
 8002db4:	f001 f948 	bl	8004048 <HAL_GPIO_WritePin>
	}
	else{ // Break
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
	}
}
 8002db8:	e01b      	b.n	8002df2 <Sentido+0x62>
	else if(valor == 1){
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10c      	bne.n	8002dda <Sentido+0x4a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dc6:	480d      	ldr	r0, [pc, #52]	; (8002dfc <Sentido+0x6c>)
 8002dc8:	f001 f93e 	bl	8004048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, SET);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd2:	480a      	ldr	r0, [pc, #40]	; (8002dfc <Sentido+0x6c>)
 8002dd4:	f001 f938 	bl	8004048 <HAL_GPIO_WritePin>
}
 8002dd8:	e00b      	b.n	8002df2 <Sentido+0x62>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002de0:	4806      	ldr	r0, [pc, #24]	; (8002dfc <Sentido+0x6c>)
 8002de2:	f001 f931 	bl	8004048 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 8002de6:	2200      	movs	r2, #0
 8002de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <Sentido+0x6c>)
 8002dee:	f001 f92b 	bl	8004048 <HAL_GPIO_WritePin>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40010c00 	.word	0x40010c00

08002e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e04:	f000 fdda 	bl	80039bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e08:	f000 f884 	bl	8002f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e0c:	f000 fa04 	bl	8003218 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002e10:	f000 f9d8 	bl	80031c4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002e14:	f000 f8c4 	bl	8002fa0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e18:	f000 f986 	bl	8003128 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  contol_initialize();
 8002e1c:	f7ff fd90 	bl	8002940 <contol_initialize>

	// Definiciones para la biblioteca de modbus
	ModbusH.uModbusType = MB_SLAVE;
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <main+0xcc>)
 8002e22:	2203      	movs	r2, #3
 8002e24:	701a      	strb	r2, [r3, #0]
	ModbusH.port =  &huart3;
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <main+0xcc>)
 8002e28:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <main+0xd0>)
 8002e2a:	605a      	str	r2, [r3, #4]
	ModbusH.u8id = 1; //Modbus slave ID
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <main+0xcc>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	721a      	strb	r2, [r3, #8]
	ModbusH.u16timeOut = 1000;
 8002e32:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <main+0xcc>)
 8002e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e38:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	ModbusH.EN_Port = NULL;
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <main+0xcc>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
	ModbusH.u16regs = ModbusDATA;
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <main+0xcc>)
 8002e44:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <main+0xd4>)
 8002e46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <main+0xcc>)
 8002e4c:	220d      	movs	r2, #13
 8002e4e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	ModbusH.xTypeHW = USART_HW;
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <main+0xcc>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

	//Initialize Modbus library
	ModbusInit(&ModbusH);
 8002e5a:	481c      	ldr	r0, [pc, #112]	; (8002ecc <main+0xcc>)
 8002e5c:	f7fe f962 	bl	8001124 <ModbusInit>
	//Start capturing traffic on serial Port
	ModbusStart(&ModbusH);
 8002e60:	481a      	ldr	r0, [pc, #104]	; (8002ecc <main+0xcc>)
 8002e62:	f7fe fa01 	bl	8001268 <ModbusStart>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e66:	2100      	movs	r1, #0
 8002e68:	481b      	ldr	r0, [pc, #108]	; (8002ed8 <main+0xd8>)
 8002e6a:	f001 fe7b 	bl	8004b64 <HAL_TIM_PWM_Start>


	contol_initialize();
 8002e6e:	f7ff fd67 	bl	8002940 <contol_initialize>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002e72:	f003 fad1 	bl	8006418 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueDataADC */
  QueueDataADCHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueDataADC_attributes);
 8002e76:	4a19      	ldr	r2, [pc, #100]	; (8002edc <main+0xdc>)
 8002e78:	2102      	movs	r1, #2
 8002e7a:	2010      	movs	r0, #16
 8002e7c:	f003 fca6 	bl	80067cc <osMessageQueueNew>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <main+0xe0>)
 8002e84:	6013      	str	r3, [r2, #0]
	//  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Modbus */
  ModbusHandle = osThreadNew(StartModbus, NULL, &Modbus_attributes);
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <main+0xe4>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4817      	ldr	r0, [pc, #92]	; (8002ee8 <main+0xe8>)
 8002e8c:	f003 fb2a 	bl	80064e4 <osThreadNew>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4a16      	ldr	r2, [pc, #88]	; (8002eec <main+0xec>)
 8002e94:	6013      	str	r3, [r2, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(StartADC, NULL, &ADC_attributes);
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <main+0xf0>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4816      	ldr	r0, [pc, #88]	; (8002ef4 <main+0xf4>)
 8002e9c:	f003 fb22 	bl	80064e4 <osThreadNew>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <main+0xf8>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* creation of Encoders */
  EncodersHandle = osThreadNew(StartEncoders, NULL, &Encoders_attributes);
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <main+0xfc>)
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4815      	ldr	r0, [pc, #84]	; (8002f00 <main+0x100>)
 8002eac:	f003 fb1a 	bl	80064e4 <osThreadNew>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <main+0x104>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(StartControl, NULL, &Control_attributes);
 8002eb6:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <main+0x108>)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4814      	ldr	r0, [pc, #80]	; (8002f0c <main+0x10c>)
 8002ebc:	f003 fb12 	bl	80064e4 <osThreadNew>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <main+0x110>)
 8002ec4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002ec6:	f003 fad9 	bl	800647c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002eca:	e7fe      	b.n	8002eca <main+0xca>
 8002ecc:	20000e28 	.word	0x20000e28
 8002ed0:	20000f70 	.word	0x20000f70
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	20000fe8 	.word	0x20000fe8
 8002edc:	0800a3f4 	.word	0x0800a3f4
 8002ee0:	200010a4 	.word	0x200010a4
 8002ee4:	0800a364 	.word	0x0800a364
 8002ee8:	08003381 	.word	0x08003381
 8002eec:	200010a8 	.word	0x200010a8
 8002ef0:	0800a388 	.word	0x0800a388
 8002ef4:	080033d5 	.word	0x080033d5
 8002ef8:	200010a0 	.word	0x200010a0
 8002efc:	0800a3ac 	.word	0x0800a3ac
 8002f00:	080033e9 	.word	0x080033e9
 8002f04:	20000f6c 	.word	0x20000f6c
 8002f08:	0800a3d0 	.word	0x0800a3d0
 8002f0c:	080034b1 	.word	0x080034b1
 8002f10:	20000fc0 	.word	0x20000fc0

08002f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b090      	sub	sp, #64	; 0x40
 8002f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1a:	f107 0318 	add.w	r3, r7, #24
 8002f1e:	2228      	movs	r2, #40	; 0x28
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f006 fd36 	bl	8009994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f44:	2301      	movs	r3, #1
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f58:	f107 0318 	add.w	r3, r7, #24
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 f8bd 	bl	80040dc <HAL_RCC_OscConfig>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002f68:	f000 fb20 	bl	80035ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f70:	2302      	movs	r3, #2
 8002f72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2102      	movs	r1, #2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 fb28 	bl	80045dc <HAL_RCC_ClockConfig>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002f92:	f000 fb0b 	bl	80035ac <Error_Handler>
  }
}
 8002f96:	bf00      	nop
 8002f98:	3740      	adds	r7, #64	; 0x40
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b096      	sub	sp, #88	; 0x58
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	611a      	str	r2, [r3, #16]
 8002fce:	615a      	str	r2, [r3, #20]
 8002fd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f006 fcdb 	bl	8009994 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <MX_TIM1_Init+0x180>)
 8002fe0:	4a50      	ldr	r2, [pc, #320]	; (8003124 <MX_TIM1_Init+0x184>)
 8002fe2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002fe4:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <MX_TIM1_Init+0x180>)
 8002fe6:	2247      	movs	r2, #71	; 0x47
 8002fe8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fea:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <MX_TIM1_Init+0x180>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <MX_TIM1_Init+0x180>)
 8002ff2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ff6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <MX_TIM1_Init+0x180>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ffe:	4b48      	ldr	r3, [pc, #288]	; (8003120 <MX_TIM1_Init+0x180>)
 8003000:	2200      	movs	r2, #0
 8003002:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <MX_TIM1_Init+0x180>)
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800300a:	4845      	ldr	r0, [pc, #276]	; (8003120 <MX_TIM1_Init+0x180>)
 800300c:	f001 fcb0 	bl	8004970 <HAL_TIM_Base_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003016:	f000 fac9 	bl	80035ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800301a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003024:	4619      	mov	r1, r3
 8003026:	483e      	ldr	r0, [pc, #248]	; (8003120 <MX_TIM1_Init+0x180>)
 8003028:	f002 f804 	bl	8005034 <HAL_TIM_ConfigClockSource>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003032:	f000 fabb 	bl	80035ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003036:	483a      	ldr	r0, [pc, #232]	; (8003120 <MX_TIM1_Init+0x180>)
 8003038:	f001 fd3c 	bl	8004ab4 <HAL_TIM_PWM_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003042:	f000 fab3 	bl	80035ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003046:	2300      	movs	r3, #0
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800304e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003052:	4619      	mov	r1, r3
 8003054:	4832      	ldr	r0, [pc, #200]	; (8003120 <MX_TIM1_Init+0x180>)
 8003056:	f002 fb79 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003060:	f000 faa4 	bl	80035ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003064:	2360      	movs	r3, #96	; 0x60
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003070:	2300      	movs	r3, #0
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003078:	2300      	movs	r3, #0
 800307a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003084:	2200      	movs	r2, #0
 8003086:	4619      	mov	r1, r3
 8003088:	4825      	ldr	r0, [pc, #148]	; (8003120 <MX_TIM1_Init+0x180>)
 800308a:	f001 ff15 	bl	8004eb8 <HAL_TIM_PWM_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003094:	f000 fa8a 	bl	80035ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800309c:	2204      	movs	r2, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	481f      	ldr	r0, [pc, #124]	; (8003120 <MX_TIM1_Init+0x180>)
 80030a2:	f001 ff09 	bl	8004eb8 <HAL_TIM_PWM_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80030ac:	f000 fa7e 	bl	80035ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b4:	2208      	movs	r2, #8
 80030b6:	4619      	mov	r1, r3
 80030b8:	4819      	ldr	r0, [pc, #100]	; (8003120 <MX_TIM1_Init+0x180>)
 80030ba:	f001 fefd 	bl	8004eb8 <HAL_TIM_PWM_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80030c4:	f000 fa72 	bl	80035ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	220c      	movs	r2, #12
 80030ce:	4619      	mov	r1, r3
 80030d0:	4813      	ldr	r0, [pc, #76]	; (8003120 <MX_TIM1_Init+0x180>)
 80030d2:	f001 fef1 	bl	8004eb8 <HAL_TIM_PWM_ConfigChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80030dc:	f000 fa66 	bl	80035ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4807      	ldr	r0, [pc, #28]	; (8003120 <MX_TIM1_Init+0x180>)
 8003104:	f002 fb80 	bl	8005808 <HAL_TIMEx_ConfigBreakDeadTime>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800310e:	f000 fa4d 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003112:	4803      	ldr	r0, [pc, #12]	; (8003120 <MX_TIM1_Init+0x180>)
 8003114:	f000 fac0 	bl	8003698 <HAL_TIM_MspPostInit>

}
 8003118:	bf00      	nop
 800311a:	3758      	adds	r7, #88	; 0x58
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000fe8 	.word	0x20000fe8
 8003124:	40012c00 	.word	0x40012c00

08003128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800313c:	463b      	mov	r3, r7
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <MX_TIM2_Init+0x98>)
 8003146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800314a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1440-1;
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <MX_TIM2_Init+0x98>)
 800314e:	f240 529f 	movw	r2, #1439	; 0x59f
 8003152:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <MX_TIM2_Init+0x98>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 800315a:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <MX_TIM2_Init+0x98>)
 800315c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <MX_TIM2_Init+0x98>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <MX_TIM2_Init+0x98>)
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800316e:	4814      	ldr	r0, [pc, #80]	; (80031c0 <MX_TIM2_Init+0x98>)
 8003170:	f001 fbfe 	bl	8004970 <HAL_TIM_Base_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800317a:	f000 fa17 	bl	80035ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800317e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003182:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	4619      	mov	r1, r3
 800318a:	480d      	ldr	r0, [pc, #52]	; (80031c0 <MX_TIM2_Init+0x98>)
 800318c:	f001 ff52 	bl	8005034 <HAL_TIM_ConfigClockSource>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003196:	f000 fa09 	bl	80035ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031a2:	463b      	mov	r3, r7
 80031a4:	4619      	mov	r1, r3
 80031a6:	4806      	ldr	r0, [pc, #24]	; (80031c0 <MX_TIM2_Init+0x98>)
 80031a8:	f002 fad0 	bl	800574c <HAL_TIMEx_MasterConfigSynchronization>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80031b2:	f000 f9fb 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20001058 	.word	0x20001058

080031c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <MX_USART3_UART_Init+0x50>)
 80031cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	; (8003210 <MX_USART3_UART_Init+0x4c>)
 80031fc:	f002 fb67 	bl	80058ce <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003206:	f000 f9d1 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000f70 	.word	0x20000f70
 8003214:	40004800 	.word	0x40004800

08003218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800322c:	4b4f      	ldr	r3, [pc, #316]	; (800336c <MX_GPIO_Init+0x154>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	4a4e      	ldr	r2, [pc, #312]	; (800336c <MX_GPIO_Init+0x154>)
 8003232:	f043 0310 	orr.w	r3, r3, #16
 8003236:	6193      	str	r3, [r2, #24]
 8003238:	4b4c      	ldr	r3, [pc, #304]	; (800336c <MX_GPIO_Init+0x154>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003244:	4b49      	ldr	r3, [pc, #292]	; (800336c <MX_GPIO_Init+0x154>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4a48      	ldr	r2, [pc, #288]	; (800336c <MX_GPIO_Init+0x154>)
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	6193      	str	r3, [r2, #24]
 8003250:	4b46      	ldr	r3, [pc, #280]	; (800336c <MX_GPIO_Init+0x154>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	4b43      	ldr	r3, [pc, #268]	; (800336c <MX_GPIO_Init+0x154>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	4a42      	ldr	r2, [pc, #264]	; (800336c <MX_GPIO_Init+0x154>)
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	6193      	str	r3, [r2, #24]
 8003268:	4b40      	ldr	r3, [pc, #256]	; (800336c <MX_GPIO_Init+0x154>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003274:	4b3d      	ldr	r3, [pc, #244]	; (800336c <MX_GPIO_Init+0x154>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	4a3c      	ldr	r2, [pc, #240]	; (800336c <MX_GPIO_Init+0x154>)
 800327a:	f043 0308 	orr.w	r3, r3, #8
 800327e:	6193      	str	r3, [r2, #24]
 8003280:	4b3a      	ldr	r3, [pc, #232]	; (800336c <MX_GPIO_Init+0x154>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003292:	4837      	ldr	r0, [pc, #220]	; (8003370 <MX_GPIO_Init+0x158>)
 8003294:	f000 fed8 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 8003298:	2200      	movs	r2, #0
 800329a:	f24f 0118 	movw	r1, #61464	; 0xf018
 800329e:	4835      	ldr	r0, [pc, #212]	; (8003374 <MX_GPIO_Init+0x15c>)
 80032a0:	f000 fed2 	bl	8004048 <HAL_GPIO_WritePin>
                          |OUT3_2_Pin|OUT3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_1_Pin|OUT4_2_Pin, GPIO_PIN_RESET);
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80032aa:	4833      	ldr	r0, [pc, #204]	; (8003378 <MX_GPIO_Init+0x160>)
 80032ac:	f000 fecc 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80032b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2302      	movs	r3, #2
 80032c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0310 	add.w	r3, r7, #16
 80032c6:	4619      	mov	r1, r3
 80032c8:	4829      	ldr	r0, [pc, #164]	; (8003370 <MX_GPIO_Init+0x158>)
 80032ca:	f000 fd39 	bl	8003d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : D01_Encoder_Pin D02_Enconder_Pin D03_Enconder_Pin D04_Enconder_Pin */
  GPIO_InitStruct.Pin = D01_Encoder_Pin|D02_Enconder_Pin|D03_Enconder_Pin|D04_Enconder_Pin;
 80032ce:	231e      	movs	r3, #30
 80032d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032d2:	4b2a      	ldr	r3, [pc, #168]	; (800337c <MX_GPIO_Init+0x164>)
 80032d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	4619      	mov	r1, r3
 80032e0:	4825      	ldr	r0, [pc, #148]	; (8003378 <MX_GPIO_Init+0x160>)
 80032e2:	f000 fd2d 	bl	8003d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_1_Pin OUT2_2_Pin OUT1_2_Pin OUT1_1_Pin
                           OUT3_2_Pin OUT3_1_Pin */
  GPIO_InitStruct.Pin = OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 80032e6:	f24f 0318 	movw	r3, #61464	; 0xf018
 80032ea:	613b      	str	r3, [r7, #16]
                          |OUT3_2_Pin|OUT3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2302      	movs	r3, #2
 80032f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	4619      	mov	r1, r3
 80032fe:	481d      	ldr	r0, [pc, #116]	; (8003374 <MX_GPIO_Init+0x15c>)
 8003300:	f000 fd1e 	bl	8003d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT4_1_Pin OUT4_2_Pin */
  GPIO_InitStruct.Pin = OUT4_1_Pin|OUT4_2_Pin;
 8003304:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330a:	2301      	movs	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2302      	movs	r3, #2
 8003314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4619      	mov	r1, r3
 800331c:	4816      	ldr	r0, [pc, #88]	; (8003378 <MX_GPIO_Init+0x160>)
 800331e:	f000 fd0f 	bl	8003d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003322:	2200      	movs	r2, #0
 8003324:	2105      	movs	r1, #5
 8003326:	2007      	movs	r0, #7
 8003328:	f000 fc2f 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800332c:	2007      	movs	r0, #7
 800332e:	f000 fc48 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	2105      	movs	r1, #5
 8003336:	2008      	movs	r0, #8
 8003338:	f000 fc27 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800333c:	2008      	movs	r0, #8
 800333e:	f000 fc40 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2105      	movs	r1, #5
 8003346:	2009      	movs	r0, #9
 8003348:	f000 fc1f 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800334c:	2009      	movs	r0, #9
 800334e:	f000 fc38 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2105      	movs	r1, #5
 8003356:	200a      	movs	r0, #10
 8003358:	f000 fc17 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800335c:	200a      	movs	r0, #10
 800335e:	f000 fc30 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

}
 8003362:	bf00      	nop
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	40011000 	.word	0x40011000
 8003374:	40010c00 	.word	0x40010c00
 8003378:	40010800 	.word	0x40010800
 800337c:	10110000 	.word	0x10110000

08003380 <StartModbus>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartModbus */
void StartModbus(void *argument)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//	int i =0;
	//	char buff[64];
	uint16_t valor =1234;
 8003388:	f240 43d2 	movw	r3, #1234	; 0x4d2
 800338c:	81fb      	strh	r3, [r7, #14]
	osStatus_t status;
	/* Infinite loop */
	for(;;)
	{
		//	  osMessageGet( QueueDataADCHandle, &valor, 0 );
		prt=pvPortMalloc(100*sizeof (char));
 800338e:	2064      	movs	r0, #100	; 0x64
 8003390:	f006 fa94 	bl	80098bc <pvPortMalloc>
 8003394:	6178      	str	r0, [r7, #20]
		sprintf(prt,"Dato leido de la Queue: %u \n",valor);
 8003396:	89fb      	ldrh	r3, [r7, #14]
 8003398:	461a      	mov	r2, r3
 800339a:	490c      	ldr	r1, [pc, #48]	; (80033cc <StartModbus+0x4c>)
 800339c:	6978      	ldr	r0, [r7, #20]
 800339e:	f006 fbb7 	bl	8009b10 <siprintf>

		status = osMessageQueueGet(QueueDataADCHandle, &valor, NULL, 5000);   // wait for message
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <StartModbus+0x50>)
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	f107 010e 	add.w	r1, r7, #14
 80033aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80033ae:	2200      	movs	r2, #0
 80033b0:	f003 fa92 	bl	80068d8 <osMessageQueueGet>
 80033b4:	6138      	str	r0, [r7, #16]
		if (status == osOK) {
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <StartModbus+0x42>
			//	HAL_UART_Transmit(&huart3, (uint8_t*)prt, strlen(prt), 100);
			vPortFree(prt);
 80033bc:	6978      	ldr	r0, [r7, #20]
 80033be:	f006 fa8f 	bl	80098e0 <vPortFree>
			; // process data
		}

		osDelay(900);
 80033c2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80033c6:	f003 f937 	bl	8006638 <osDelay>
		prt=pvPortMalloc(100*sizeof (char));
 80033ca:	e7e0      	b.n	800338e <StartModbus+0xe>
 80033cc:	0800a2a4 	.word	0x0800a2a4
 80033d0:	200010a4 	.word	0x200010a4

080033d4 <StartADC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
		//	adc1 = HAL_ADC_PollForConversion(&hadc1, 5000);
		//	osMessageQueuePut(QueueDataADCHandle, &adc1, 5000);
		//	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
		//	osThreadYield();

		osDelay(1000);
 80033dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e0:	f003 f92a 	bl	8006638 <osDelay>
 80033e4:	e7fa      	b.n	80033dc <StartADC+0x8>
	...

080033e8 <StartEncoders>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoders */
void StartEncoders(void *argument)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	uint16_t pasador[2];
	uint16_t delta[2];// para mandar los deltaticks
	uint16_t meanData[2];


	HAL_TIM_Base_Start_IT(&htim2);
 80033f0:	4827      	ldr	r0, [pc, #156]	; (8003490 <StartEncoders+0xa8>)
 80033f2:	f001 fb0d 	bl	8004a10 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	for(;;)
	{

		//    Velocidad(ModbusDATA[0]);// Calculo la velocidad para devolver por modbus
		osDelay(Ts);// Delta T
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <StartEncoders+0xac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 f91c 	bl	8006638 <osDelay>
		Sentido(ModbusDATA[0]);
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <StartEncoders+0xb0>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fcc3 	bl	8002d90 <Sentido>

		memcpy(meanData, &deltaTicks, sizeof(deltaTicks));
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	2208      	movs	r2, #8
 8003410:	4922      	ldr	r1, [pc, #136]	; (800349c <StartEncoders+0xb4>)
 8003412:	4618      	mov	r0, r3
 8003414:	f006 fab0 	bl	8009978 <memcpy>
		ModbusDATA[4]=meanData[0];
 8003418:	89ba      	ldrh	r2, [r7, #12]
 800341a:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <StartEncoders+0xb0>)
 800341c:	811a      	strh	r2, [r3, #8]
		ModbusDATA[5]=meanData[1];
 800341e:	89fa      	ldrh	r2, [r7, #14]
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <StartEncoders+0xb0>)
 8003422:	815a      	strh	r2, [r3, #10]
 8003424:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <StartEncoders+0xb8>)
 8003426:	681b      	ldr	r3, [r3, #0]


		memcpy(pasador, &velocidad, sizeof(velocidad));//velocidad_prima1
 8003428:	617b      	str	r3, [r7, #20]
		ModbusDATA[8]=pasador[0];
 800342a:	8aba      	ldrh	r2, [r7, #20]
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <StartEncoders+0xb0>)
 800342e:	821a      	strh	r2, [r3, #16]
		ModbusDATA[9]=pasador[1];
 8003430:	8afa      	ldrh	r2, [r7, #22]
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <StartEncoders+0xb0>)
 8003434:	825a      	strh	r2, [r3, #18]
 8003436:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <StartEncoders+0xbc>)
 8003438:	681b      	ldr	r3, [r3, #0]

		memcpy(delta, &velocidad_prima1, sizeof(velocidad_prima1));
 800343a:	613b      	str	r3, [r7, #16]
		ModbusDATA[10]=delta[0];
 800343c:	8a3a      	ldrh	r2, [r7, #16]
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <StartEncoders+0xb0>)
 8003440:	829a      	strh	r2, [r3, #20]
		ModbusDATA[11]=delta[1];
 8003442:	8a7a      	ldrh	r2, [r7, #18]
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <StartEncoders+0xb0>)
 8003446:	82da      	strh	r2, [r3, #22]

		CCR_obtained=funcion_linealizadora(ModbusDATA[1]);
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <StartEncoders+0xb0>)
 800344a:	885b      	ldrh	r3, [r3, #2]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fa7f 	bl	8002950 <funcion_linealizadora>
 8003452:	4603      	mov	r3, r0
 8003454:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <StartEncoders+0xc0>)
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <StartEncoders+0xc0>)
 800345a:	681b      	ldr	r3, [r3, #0]

		memcpy(meanData, &CCR_obtained, sizeof(CCR_obtained));
 800345c:	60fb      	str	r3, [r7, #12]
				ModbusDATA[4]=meanData[0];
 800345e:	89ba      	ldrh	r2, [r7, #12]
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <StartEncoders+0xb0>)
 8003462:	811a      	strh	r2, [r3, #8]
				ModbusDATA[5]=meanData[1];
 8003464:	89fa      	ldrh	r2, [r7, #14]
 8003466:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <StartEncoders+0xb0>)
 8003468:	815a      	strh	r2, [r3, #10]


		ModbusDATA[6] = overflow;
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <StartEncoders+0xc4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <StartEncoders+0xb0>)
 8003472:	819a      	strh	r2, [r3, #12]
		if(overflow >= 2){
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <StartEncoders+0xc4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d9bc      	bls.n	80033f6 <StartEncoders+0xe>
			velocidad = 0;
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <StartEncoders+0xb8>)
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
			velocidad_prima1 = 0;
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <StartEncoders+0xbc>)
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
		osDelay(Ts);// Delta T
 800348c:	e7b3      	b.n	80033f6 <StartEncoders+0xe>
 800348e:	bf00      	nop
 8003490:	20001058 	.word	0x20001058
 8003494:	2000001c 	.word	0x2000001c
 8003498:	20000000 	.word	0x20000000
 800349c:	200000f8 	.word	0x200000f8
 80034a0:	200000e8 	.word	0x200000e8
 80034a4:	20001040 	.word	0x20001040
 80034a8:	20000100 	.word	0x20000100
 80034ac:	200000f4 	.word	0x200000f4

080034b0 <StartControl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
//	float i = 20.923911005445;
//	float d = 0;
//	float N = 100;
//	float T = 0.01;
////	float setPoint = (float)ModbusDATA[1]*1.5/10000.0; // 0  - 0 y 10000 - 1.5 [RPS]
	float U[3] = {0, 0 ,0};// U[0] es la actual
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]


	/* Infinite loop */
	for(;;)
	{
		osDelay(50);
 80034ca:	2032      	movs	r0, #50	; 0x32
 80034cc:	f003 f8b4 	bl	8006638 <osDelay>

		U[2] = U[1];
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	613b      	str	r3, [r7, #16]
		U[1] = U[0];
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	60fb      	str	r3, [r7, #12]
		setpoint = (float)(ModbusDATA[1]/100.0); // 0  -> 0 y 10000 -> 1.5 [RPS]
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <StartControl+0x98>)
 80034da:	885b      	ldrh	r3, [r3, #2]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fc ff89 	bl	80003f4 <__aeabi_i2d>
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	4b19      	ldr	r3, [pc, #100]	; (800354c <StartControl+0x9c>)
 80034e8:	f7fd f918 	bl	800071c <__aeabi_ddiv>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	f7fd faa2 	bl	8000a3c <__aeabi_d2f>
 80034f8:	4603      	mov	r3, r0
 80034fa:	617b      	str	r3, [r7, #20]
		rtEntrada_Control = setpoint-velocidad_prima1;
 80034fc:	4b14      	ldr	r3, [pc, #80]	; (8003550 <StartControl+0xa0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7fd faee 	bl	8000ae4 <__aeabi_fsub>
 8003508:	4603      	mov	r3, r0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc ff84 	bl	8000418 <__aeabi_f2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	490f      	ldr	r1, [pc, #60]	; (8003554 <StartControl+0xa4>)
 8003516:	e9c1 2300 	strd	r2, r3, [r1]
		contol_step();
 800351a:	f7ff f971 	bl	8002800 <contol_step>
		CCR_obtained=funcion_linealizadora(rtSalida_Control);
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <StartControl+0xa8>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	f7fd fa68 	bl	80009fc <__aeabi_d2uiz>
 800352c:	4603      	mov	r3, r0
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fa0d 	bl	8002950 <funcion_linealizadora>
 8003536:	4603      	mov	r3, r0
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <StartControl+0xac>)
 800353a:	6013      	str	r3, [r2, #0]
		htim1.Instance->CCR1 = CCR_obtained;
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <StartControl+0xb0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a06      	ldr	r2, [pc, #24]	; (800355c <StartControl+0xac>)
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	635a      	str	r2, [r3, #52]	; 0x34
		osDelay(50);
 8003546:	e7c0      	b.n	80034ca <StartControl+0x1a>
 8003548:	20000000 	.word	0x20000000
 800354c:	40590000 	.word	0x40590000
 8003550:	20001040 	.word	0x20001040
 8003554:	20000fb8 	.word	0x20000fb8
 8003558:	20000fd8 	.word	0x20000fd8
 800355c:	20000100 	.word	0x20000100
 8003560:	20000fe8 	.word	0x20000fe8

08003564 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//  // ESTO ES DE FREERTOS
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003576:	f000 fa37 	bl	80039e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2){
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d109      	bne.n	8003598 <HAL_TIM_PeriodElapsedCallback+0x34>
	 overflow += 1;
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	4a06      	ldr	r2, [pc, #24]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800358c:	6013      	str	r3, [r2, #0]
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800358e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003592:	4805      	ldr	r0, [pc, #20]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003594:	f000 fd70 	bl	8004078 <HAL_GPIO_TogglePin>
  }
  /* USER CODE END Callback 1 */
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40000800 	.word	0x40000800
 80035a4:	200000f4 	.word	0x200000f4
 80035a8:	40011000 	.word	0x40011000

080035ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035b0:	b672      	cpsid	i
}
 80035b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80035b4:	e7fe      	b.n	80035b4 <Error_Handler+0x8>
	...

080035b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <HAL_MspInit+0x68>)
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	4a17      	ldr	r2, [pc, #92]	; (8003620 <HAL_MspInit+0x68>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6193      	str	r3, [r2, #24]
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <HAL_MspInit+0x68>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <HAL_MspInit+0x68>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_MspInit+0x68>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	61d3      	str	r3, [r2, #28]
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_MspInit+0x68>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	210f      	movs	r1, #15
 80035f2:	f06f 0001 	mvn.w	r0, #1
 80035f6:	f000 fac8 	bl	8003b8a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_MspInit+0x6c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_MspInit+0x6c>)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000

08003628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_TIM_Base_MspInit+0x68>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10c      	bne.n	8003654 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <HAL_TIM_Base_MspInit+0x6c>)
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	4a15      	ldr	r2, [pc, #84]	; (8003694 <HAL_TIM_Base_MspInit+0x6c>)
 8003640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003644:	6193      	str	r3, [r2, #24]
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_TIM_Base_MspInit+0x6c>)
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003652:	e018      	b.n	8003686 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d113      	bne.n	8003686 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_TIM_Base_MspInit+0x6c>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_TIM_Base_MspInit+0x6c>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	61d3      	str	r3, [r2, #28]
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_TIM_Base_MspInit+0x6c>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2105      	movs	r1, #5
 800367a:	201c      	movs	r0, #28
 800367c:	f000 fa85 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003680:	201c      	movs	r0, #28
 8003682:	f000 fa9e 	bl	8003bc2 <HAL_NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 0310 	add.w	r3, r7, #16
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a10      	ldr	r2, [pc, #64]	; (80036f4 <HAL_TIM_MspPostInit+0x5c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d118      	bne.n	80036ea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_TIM_MspPostInit+0x60>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <HAL_TIM_MspPostInit+0x60>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	6193      	str	r3, [r2, #24]
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_TIM_MspPostInit+0x60>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_01_Pin|PWM_02_Pin|PWM_03_Pin|PWM_04_Pin;
 80036d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80036d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2302      	movs	r3, #2
 80036dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036de:	f107 0310 	add.w	r3, r7, #16
 80036e2:	4619      	mov	r1, r3
 80036e4:	4805      	ldr	r0, [pc, #20]	; (80036fc <HAL_TIM_MspPostInit+0x64>)
 80036e6:	f000 fb2b 	bl	8003d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036ea:	bf00      	nop
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40010800 	.word	0x40010800

08003700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a20      	ldr	r2, [pc, #128]	; (800379c <HAL_UART_MspInit+0x9c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d139      	bne.n	8003794 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003720:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <HAL_UART_MspInit+0xa0>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <HAL_UART_MspInit+0xa0>)
 8003726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372a:	61d3      	str	r3, [r2, #28]
 800372c:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <HAL_UART_MspInit+0xa0>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_UART_MspInit+0xa0>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <HAL_UART_MspInit+0xa0>)
 800373e:	f043 0308 	orr.w	r3, r3, #8
 8003742:	6193      	str	r3, [r2, #24]
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_UART_MspInit+0xa0>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003754:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800375a:	2303      	movs	r3, #3
 800375c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375e:	f107 0310 	add.w	r3, r7, #16
 8003762:	4619      	mov	r1, r3
 8003764:	480f      	ldr	r0, [pc, #60]	; (80037a4 <HAL_UART_MspInit+0xa4>)
 8003766:	f000 faeb 	bl	8003d40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800376a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800376e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	4619      	mov	r1, r3
 800377e:	4809      	ldr	r0, [pc, #36]	; (80037a4 <HAL_UART_MspInit+0xa4>)
 8003780:	f000 fade 	bl	8003d40 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003784:	2200      	movs	r2, #0
 8003786:	2105      	movs	r1, #5
 8003788:	2027      	movs	r0, #39	; 0x27
 800378a:	f000 f9fe 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800378e:	2027      	movs	r0, #39	; 0x27
 8003790:	f000 fa17 	bl	8003bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003794:	bf00      	nop
 8003796:	3720      	adds	r7, #32
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40004800 	.word	0x40004800
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40010c00 	.word	0x40010c00

080037a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08c      	sub	sp, #48	; 0x30
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80037b8:	2200      	movs	r2, #0
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	201e      	movs	r0, #30
 80037be:	f000 f9e4 	bl	8003b8a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037c2:	201e      	movs	r0, #30
 80037c4:	f000 f9fd 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80037c8:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <HAL_InitTick+0xa0>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <HAL_InitTick+0xa0>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	61d3      	str	r3, [r2, #28]
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <HAL_InitTick+0xa0>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037e0:	f107 0210 	add.w	r2, r7, #16
 80037e4:	f107 0314 	add.w	r3, r7, #20
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f872 	bl	80048d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80037f0:	f001 f848 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80037f4:	4603      	mov	r3, r0
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_InitTick+0xa4>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0c9b      	lsrs	r3, r3, #18
 8003804:	3b01      	subs	r3, #1
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_InitTick+0xa8>)
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_InitTick+0xac>)
 800380c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_InitTick+0xa8>)
 8003810:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003814:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003816:	4a0e      	ldr	r2, [pc, #56]	; (8003850 <HAL_InitTick+0xa8>)
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <HAL_InitTick+0xa8>)
 800381e:	2200      	movs	r2, #0
 8003820:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_InitTick+0xa8>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003828:	4809      	ldr	r0, [pc, #36]	; (8003850 <HAL_InitTick+0xa8>)
 800382a:	f001 f8a1 	bl	8004970 <HAL_TIM_Base_Init>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003834:	4806      	ldr	r0, [pc, #24]	; (8003850 <HAL_InitTick+0xa8>)
 8003836:	f001 f8eb 	bl	8004a10 <HAL_TIM_Base_Start_IT>
 800383a:	4603      	mov	r3, r0
 800383c:	e000      	b.n	8003840 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
}
 8003840:	4618      	mov	r0, r3
 8003842:	3730      	adds	r7, #48	; 0x30
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	431bde83 	.word	0x431bde83
 8003850:	200010b8 	.word	0x200010b8
 8003854:	40000800 	.word	0x40000800

08003858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800385c:	e7fe      	b.n	800385c <NMI_Handler+0x4>

0800385e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003862:	e7fe      	b.n	8003862 <HardFault_Handler+0x4>

08003864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003868:	e7fe      	b.n	8003868 <MemManage_Handler+0x4>

0800386a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800386e:	e7fe      	b.n	800386e <BusFault_Handler+0x4>

08003870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003874:	e7fe      	b.n	8003874 <UsageFault_Handler+0x4>

08003876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D01_Encoder_Pin);
 8003886:	2002      	movs	r0, #2
 8003888:	f000 fc10 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D02_Enconder_Pin);
 8003894:	2004      	movs	r0, #4
 8003896:	f000 fc09 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}

0800389e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D03_Enconder_Pin);
 80038a2:	2008      	movs	r0, #8
 80038a4:	f000 fc02 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}

080038ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D04_Enconder_Pin);
 80038b0:	2010      	movs	r0, #16
 80038b2:	f000 fbfb 	bl	80040ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <TIM2_IRQHandler+0x10>)
 80038c2:	f001 f9f1 	bl	8004ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20001058 	.word	0x20001058

080038d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM4_IRQHandler+0x10>)
 80038d6:	f001 f9e7 	bl	8004ca8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	200010b8 	.word	0x200010b8

080038e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <USART3_IRQHandler+0x10>)
 80038ea:	f002 f91b 	bl	8005b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000f70 	.word	0x20000f70

080038f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003900:	4a14      	ldr	r2, [pc, #80]	; (8003954 <_sbrk+0x5c>)
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <_sbrk+0x60>)
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <_sbrk+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <_sbrk+0x64>)
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <_sbrk+0x68>)
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <_sbrk+0x64>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	429a      	cmp	r2, r3
 8003926:	d207      	bcs.n	8003938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003928:	f005 ffec 	bl	8009904 <__errno>
 800392c:	4603      	mov	r3, r0
 800392e:	220c      	movs	r2, #12
 8003930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	e009      	b.n	800394c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <_sbrk+0x64>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <_sbrk+0x64>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	4a05      	ldr	r2, [pc, #20]	; (800395c <_sbrk+0x64>)
 8003948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800394a:	68fb      	ldr	r3, [r7, #12]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20005000 	.word	0x20005000
 8003958:	00000400 	.word	0x00000400
 800395c:	20000104 	.word	0x20000104
 8003960:	20001158 	.word	0x20001158

08003964 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003972:	490d      	ldr	r1, [pc, #52]	; (80039a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003978:	e002      	b.n	8003980 <LoopCopyDataInit>

0800397a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800397c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397e:	3304      	adds	r3, #4

08003980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003984:	d3f9      	bcc.n	800397a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003988:	4c0a      	ldr	r4, [pc, #40]	; (80039b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800398c:	e001      	b.n	8003992 <LoopFillZerobss>

0800398e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003990:	3204      	adds	r2, #4

08003992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003994:	d3fb      	bcc.n	800398e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003996:	f7ff ffe5 	bl	8003964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800399a:	f005 ffb9 	bl	8009910 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800399e:	f7ff fa2f 	bl	8002e00 <main>
  bx lr
 80039a2:	4770      	bx	lr
  ldr r0, =_sdata
 80039a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a8:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80039ac:	0800a460 	.word	0x0800a460
  ldr r2, =_sbss
 80039b0:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80039b4:	20001154 	.word	0x20001154

080039b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039b8:	e7fe      	b.n	80039b8 <ADC1_2_IRQHandler>
	...

080039bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_Init+0x28>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <HAL_Init+0x28>)
 80039c6:	f043 0310 	orr.w	r3, r3, #16
 80039ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039cc:	2003      	movs	r0, #3
 80039ce:	f000 f8d1 	bl	8003b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039d2:	200f      	movs	r0, #15
 80039d4:	f7ff fee8 	bl	80037a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039d8:	f7ff fdee 	bl	80035b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40022000 	.word	0x40022000

080039e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <HAL_IncTick+0x1c>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_IncTick+0x20>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4413      	add	r3, r2
 80039f8:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <HAL_IncTick+0x20>)
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	20000058 	.word	0x20000058
 8003a08:	20001100 	.word	0x20001100

08003a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a10:	4b02      	ldr	r3, [pc, #8]	; (8003a1c <HAL_GetTick+0x10>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	20001100 	.word	0x20001100

08003a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	60d3      	str	r3, [r2, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <__NVIC_GetPriorityGrouping+0x18>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 0307 	and.w	r3, r3, #7
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	db0b      	blt.n	8003aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	f003 021f 	and.w	r2, r3, #31
 8003a9c:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <__NVIC_EnableIRQ+0x34>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100

08003abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db0a      	blt.n	8003ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <__NVIC_SetPriority+0x4c>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae4:	e00a      	b.n	8003afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <__NVIC_SetPriority+0x50>)
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3b04      	subs	r3, #4
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	440b      	add	r3, r1
 8003afa:	761a      	strb	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000e100 	.word	0xe000e100
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
         );
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff4f 	bl	8003a20 <__NVIC_SetPriorityGrouping>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b9c:	f7ff ff64 	bl	8003a68 <__NVIC_GetPriorityGrouping>
 8003ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	6978      	ldr	r0, [r7, #20]
 8003ba8:	f7ff ffb2 	bl	8003b10 <NVIC_EncodePriority>
 8003bac:	4602      	mov	r2, r0
 8003bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff81 	bl	8003abc <__NVIC_SetPriority>
}
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff57 	bl	8003a84 <__NVIC_EnableIRQ>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d008      	beq.n	8003c06 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e020      	b.n	8003c48 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 020e 	bic.w	r2, r2, #14
 8003c14:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f202 	lsl.w	r2, r1, r2
 8003c34:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d005      	beq.n	8003c76 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	e051      	b.n	8003d1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 020e 	bic.w	r2, r2, #14
 8003c84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_DMA_Abort_IT+0xd0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d029      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0xa0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <HAL_DMA_Abort_IT+0xd4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0x9c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_DMA_Abort_IT+0xd8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01a      	beq.n	8003cea <HAL_DMA_Abort_IT+0x96>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_DMA_Abort_IT+0xdc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d012      	beq.n	8003ce4 <HAL_DMA_Abort_IT+0x90>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_DMA_Abort_IT+0xe0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00a      	beq.n	8003cde <HAL_DMA_Abort_IT+0x8a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <HAL_DMA_Abort_IT+0xe4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d102      	bne.n	8003cd8 <HAL_DMA_Abort_IT+0x84>
 8003cd2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cd6:	e00e      	b.n	8003cf6 <HAL_DMA_Abort_IT+0xa2>
 8003cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cdc:	e00b      	b.n	8003cf6 <HAL_DMA_Abort_IT+0xa2>
 8003cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ce2:	e008      	b.n	8003cf6 <HAL_DMA_Abort_IT+0xa2>
 8003ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce8:	e005      	b.n	8003cf6 <HAL_DMA_Abort_IT+0xa2>
 8003cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cee:	e002      	b.n	8003cf6 <HAL_DMA_Abort_IT+0xa2>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	e000      	b.n	8003cf6 <HAL_DMA_Abort_IT+0xa2>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <HAL_DMA_Abort_IT+0xe8>)
 8003cf8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
    } 
  }
  return status;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40020008 	.word	0x40020008
 8003d28:	4002001c 	.word	0x4002001c
 8003d2c:	40020030 	.word	0x40020030
 8003d30:	40020044 	.word	0x40020044
 8003d34:	40020058 	.word	0x40020058
 8003d38:	4002006c 	.word	0x4002006c
 8003d3c:	40020000 	.word	0x40020000

08003d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b08b      	sub	sp, #44	; 0x2c
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d52:	e169      	b.n	8004028 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d54:	2201      	movs	r2, #1
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	f040 8158 	bne.w	8004022 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a9a      	ldr	r2, [pc, #616]	; (8003fe0 <HAL_GPIO_Init+0x2a0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d05e      	beq.n	8003e3a <HAL_GPIO_Init+0xfa>
 8003d7c:	4a98      	ldr	r2, [pc, #608]	; (8003fe0 <HAL_GPIO_Init+0x2a0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d875      	bhi.n	8003e6e <HAL_GPIO_Init+0x12e>
 8003d82:	4a98      	ldr	r2, [pc, #608]	; (8003fe4 <HAL_GPIO_Init+0x2a4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d058      	beq.n	8003e3a <HAL_GPIO_Init+0xfa>
 8003d88:	4a96      	ldr	r2, [pc, #600]	; (8003fe4 <HAL_GPIO_Init+0x2a4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d86f      	bhi.n	8003e6e <HAL_GPIO_Init+0x12e>
 8003d8e:	4a96      	ldr	r2, [pc, #600]	; (8003fe8 <HAL_GPIO_Init+0x2a8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d052      	beq.n	8003e3a <HAL_GPIO_Init+0xfa>
 8003d94:	4a94      	ldr	r2, [pc, #592]	; (8003fe8 <HAL_GPIO_Init+0x2a8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d869      	bhi.n	8003e6e <HAL_GPIO_Init+0x12e>
 8003d9a:	4a94      	ldr	r2, [pc, #592]	; (8003fec <HAL_GPIO_Init+0x2ac>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d04c      	beq.n	8003e3a <HAL_GPIO_Init+0xfa>
 8003da0:	4a92      	ldr	r2, [pc, #584]	; (8003fec <HAL_GPIO_Init+0x2ac>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d863      	bhi.n	8003e6e <HAL_GPIO_Init+0x12e>
 8003da6:	4a92      	ldr	r2, [pc, #584]	; (8003ff0 <HAL_GPIO_Init+0x2b0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d046      	beq.n	8003e3a <HAL_GPIO_Init+0xfa>
 8003dac:	4a90      	ldr	r2, [pc, #576]	; (8003ff0 <HAL_GPIO_Init+0x2b0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d85d      	bhi.n	8003e6e <HAL_GPIO_Init+0x12e>
 8003db2:	2b12      	cmp	r3, #18
 8003db4:	d82a      	bhi.n	8003e0c <HAL_GPIO_Init+0xcc>
 8003db6:	2b12      	cmp	r3, #18
 8003db8:	d859      	bhi.n	8003e6e <HAL_GPIO_Init+0x12e>
 8003dba:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <HAL_GPIO_Init+0x80>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003e3b 	.word	0x08003e3b
 8003dc4:	08003e15 	.word	0x08003e15
 8003dc8:	08003e27 	.word	0x08003e27
 8003dcc:	08003e69 	.word	0x08003e69
 8003dd0:	08003e6f 	.word	0x08003e6f
 8003dd4:	08003e6f 	.word	0x08003e6f
 8003dd8:	08003e6f 	.word	0x08003e6f
 8003ddc:	08003e6f 	.word	0x08003e6f
 8003de0:	08003e6f 	.word	0x08003e6f
 8003de4:	08003e6f 	.word	0x08003e6f
 8003de8:	08003e6f 	.word	0x08003e6f
 8003dec:	08003e6f 	.word	0x08003e6f
 8003df0:	08003e6f 	.word	0x08003e6f
 8003df4:	08003e6f 	.word	0x08003e6f
 8003df8:	08003e6f 	.word	0x08003e6f
 8003dfc:	08003e6f 	.word	0x08003e6f
 8003e00:	08003e6f 	.word	0x08003e6f
 8003e04:	08003e1d 	.word	0x08003e1d
 8003e08:	08003e31 	.word	0x08003e31
 8003e0c:	4a79      	ldr	r2, [pc, #484]	; (8003ff4 <HAL_GPIO_Init+0x2b4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e12:	e02c      	b.n	8003e6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	623b      	str	r3, [r7, #32]
          break;
 8003e1a:	e029      	b.n	8003e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	3304      	adds	r3, #4
 8003e22:	623b      	str	r3, [r7, #32]
          break;
 8003e24:	e024      	b.n	8003e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	623b      	str	r3, [r7, #32]
          break;
 8003e2e:	e01f      	b.n	8003e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	330c      	adds	r3, #12
 8003e36:	623b      	str	r3, [r7, #32]
          break;
 8003e38:	e01a      	b.n	8003e70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e42:	2304      	movs	r3, #4
 8003e44:	623b      	str	r3, [r7, #32]
          break;
 8003e46:	e013      	b.n	8003e70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d105      	bne.n	8003e5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e50:	2308      	movs	r3, #8
 8003e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	611a      	str	r2, [r3, #16]
          break;
 8003e5a:	e009      	b.n	8003e70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	615a      	str	r2, [r3, #20]
          break;
 8003e66:	e003      	b.n	8003e70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	623b      	str	r3, [r7, #32]
          break;
 8003e6c:	e000      	b.n	8003e70 <HAL_GPIO_Init+0x130>
          break;
 8003e6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2bff      	cmp	r3, #255	; 0xff
 8003e74:	d801      	bhi.n	8003e7a <HAL_GPIO_Init+0x13a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	e001      	b.n	8003e7e <HAL_GPIO_Init+0x13e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2bff      	cmp	r3, #255	; 0xff
 8003e84:	d802      	bhi.n	8003e8c <HAL_GPIO_Init+0x14c>
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	e002      	b.n	8003e92 <HAL_GPIO_Init+0x152>
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	3b08      	subs	r3, #8
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	210f      	movs	r1, #15
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	6a39      	ldr	r1, [r7, #32]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eac:	431a      	orrs	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80b1 	beq.w	8004022 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ec0:	4b4d      	ldr	r3, [pc, #308]	; (8003ff8 <HAL_GPIO_Init+0x2b8>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <HAL_GPIO_Init+0x2b8>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6193      	str	r3, [r2, #24]
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <HAL_GPIO_Init+0x2b8>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ed8:	4a48      	ldr	r2, [pc, #288]	; (8003ffc <HAL_GPIO_Init+0x2bc>)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	220f      	movs	r2, #15
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a40      	ldr	r2, [pc, #256]	; (8004000 <HAL_GPIO_Init+0x2c0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_GPIO_Init+0x1ec>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3f      	ldr	r2, [pc, #252]	; (8004004 <HAL_GPIO_Init+0x2c4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00d      	beq.n	8003f28 <HAL_GPIO_Init+0x1e8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3e      	ldr	r2, [pc, #248]	; (8004008 <HAL_GPIO_Init+0x2c8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <HAL_GPIO_Init+0x1e4>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3d      	ldr	r2, [pc, #244]	; (800400c <HAL_GPIO_Init+0x2cc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_GPIO_Init+0x1e0>
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e006      	b.n	8003f2e <HAL_GPIO_Init+0x1ee>
 8003f20:	2304      	movs	r3, #4
 8003f22:	e004      	b.n	8003f2e <HAL_GPIO_Init+0x1ee>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e002      	b.n	8003f2e <HAL_GPIO_Init+0x1ee>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_GPIO_Init+0x1ee>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	f002 0203 	and.w	r2, r2, #3
 8003f34:	0092      	lsls	r2, r2, #2
 8003f36:	4093      	lsls	r3, r2
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f3e:	492f      	ldr	r1, [pc, #188]	; (8003ffc <HAL_GPIO_Init+0x2bc>)
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f58:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	492c      	ldr	r1, [pc, #176]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	e006      	b.n	8003f74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f66:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	4928      	ldr	r1, [pc, #160]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d006      	beq.n	8003f8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f80:	4b23      	ldr	r3, [pc, #140]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	4922      	ldr	r1, [pc, #136]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e006      	b.n	8003f9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	491e      	ldr	r1, [pc, #120]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	4918      	ldr	r1, [pc, #96]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	4914      	ldr	r1, [pc, #80]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d021      	beq.n	8004014 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	490e      	ldr	r1, [pc, #56]	; (8004010 <HAL_GPIO_Init+0x2d0>)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60cb      	str	r3, [r1, #12]
 8003fdc:	e021      	b.n	8004022 <HAL_GPIO_Init+0x2e2>
 8003fde:	bf00      	nop
 8003fe0:	10320000 	.word	0x10320000
 8003fe4:	10310000 	.word	0x10310000
 8003fe8:	10220000 	.word	0x10220000
 8003fec:	10210000 	.word	0x10210000
 8003ff0:	10120000 	.word	0x10120000
 8003ff4:	10110000 	.word	0x10110000
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40010800 	.word	0x40010800
 8004004:	40010c00 	.word	0x40010c00
 8004008:	40011000 	.word	0x40011000
 800400c:	40011400 	.word	0x40011400
 8004010:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_GPIO_Init+0x304>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	43db      	mvns	r3, r3
 800401c:	4909      	ldr	r1, [pc, #36]	; (8004044 <HAL_GPIO_Init+0x304>)
 800401e:	4013      	ands	r3, r2
 8004020:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	f47f ae8e 	bne.w	8003d54 <HAL_GPIO_Init+0x14>
  }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	372c      	adds	r7, #44	; 0x2c
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	40010400 	.word	0x40010400

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004064:	e003      	b.n	800406e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	041a      	lsls	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	611a      	str	r2, [r3, #16]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4013      	ands	r3, r2
 8004090:	041a      	lsls	r2, r3, #16
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	43d9      	mvns	r1, r3
 8004096:	887b      	ldrh	r3, [r7, #2]
 8004098:	400b      	ands	r3, r1
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	611a      	str	r2, [r3, #16]
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	4013      	ands	r3, r2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d006      	beq.n	80040d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040c2:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fd2c 	bl	8002b28 <HAL_GPIO_EXTI_Callback>
  }
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40010400 	.word	0x40010400

080040dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e26c      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 8087 	beq.w	800420a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040fc:	4b92      	ldr	r3, [pc, #584]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b04      	cmp	r3, #4
 8004106:	d00c      	beq.n	8004122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004108:	4b8f      	ldr	r3, [pc, #572]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f003 030c 	and.w	r3, r3, #12
 8004110:	2b08      	cmp	r3, #8
 8004112:	d112      	bne.n	800413a <HAL_RCC_OscConfig+0x5e>
 8004114:	4b8c      	ldr	r3, [pc, #560]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004120:	d10b      	bne.n	800413a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004122:	4b89      	ldr	r3, [pc, #548]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d06c      	beq.n	8004208 <HAL_RCC_OscConfig+0x12c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d168      	bne.n	8004208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e246      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x76>
 8004144:	4b80      	ldr	r3, [pc, #512]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a7f      	ldr	r2, [pc, #508]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e02e      	b.n	80041b0 <HAL_RCC_OscConfig+0xd4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x98>
 800415a:	4b7b      	ldr	r3, [pc, #492]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a7a      	ldr	r2, [pc, #488]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b78      	ldr	r3, [pc, #480]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a77      	ldr	r2, [pc, #476]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800416c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <HAL_RCC_OscConfig+0xd4>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0xbc>
 800417e:	4b72      	ldr	r3, [pc, #456]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a71      	ldr	r2, [pc, #452]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6e      	ldr	r2, [pc, #440]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0xd4>
 8004198:	4b6b      	ldr	r3, [pc, #428]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6a      	ldr	r2, [pc, #424]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b68      	ldr	r3, [pc, #416]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a67      	ldr	r2, [pc, #412]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7ff fc28 	bl	8003a0c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7ff fc24 	bl	8003a0c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1fa      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b5d      	ldr	r3, [pc, #372]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xe4>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7ff fc14 	bl	8003a0c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e8:	f7ff fc10 	bl	8003a0c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e1e6      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	4b53      	ldr	r3, [pc, #332]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x10c>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d063      	beq.n	80042de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004216:	4b4c      	ldr	r3, [pc, #304]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004222:	4b49      	ldr	r3, [pc, #292]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b08      	cmp	r3, #8
 800422c:	d11c      	bne.n	8004268 <HAL_RCC_OscConfig+0x18c>
 800422e:	4b46      	ldr	r3, [pc, #280]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d116      	bne.n	8004268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423a:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x176>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e1ba      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4939      	ldr	r1, [pc, #228]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	e03a      	b.n	80042de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004270:	4b36      	ldr	r3, [pc, #216]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004276:	f7ff fbc9 	bl	8003a0c <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427e:	f7ff fbc5 	bl	8003a0c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e19b      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4927      	ldr	r1, [pc, #156]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]
 80042b0:	e015      	b.n	80042de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7ff fba8 	bl	8003a0c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c0:	f7ff fba4 	bl	8003a0c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e17a      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d03a      	beq.n	8004360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d019      	beq.n	8004326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <HAL_RCC_OscConfig+0x274>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f8:	f7ff fb88 	bl	8003a0c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004300:	f7ff fb84 	bl	8003a0c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e15a      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <HAL_RCC_OscConfig+0x26c>)
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800431e:	2001      	movs	r0, #1
 8004320:	f000 fb08 	bl	8004934 <RCC_Delay>
 8004324:	e01c      	b.n	8004360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_RCC_OscConfig+0x274>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432c:	f7ff fb6e 	bl	8003a0c <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004332:	e00f      	b.n	8004354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004334:	f7ff fb6a 	bl	8003a0c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d908      	bls.n	8004354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e140      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	42420000 	.word	0x42420000
 8004350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b9e      	ldr	r3, [pc, #632]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e9      	bne.n	8004334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a6 	beq.w	80044ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b97      	ldr	r3, [pc, #604]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10d      	bne.n	800439a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	4b94      	ldr	r3, [pc, #592]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4a93      	ldr	r2, [pc, #588]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004388:	61d3      	str	r3, [r2, #28]
 800438a:	4b91      	ldr	r3, [pc, #580]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004396:	2301      	movs	r3, #1
 8004398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439a:	4b8e      	ldr	r3, [pc, #568]	; (80045d4 <HAL_RCC_OscConfig+0x4f8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d118      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043a6:	4b8b      	ldr	r3, [pc, #556]	; (80045d4 <HAL_RCC_OscConfig+0x4f8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a8a      	ldr	r2, [pc, #552]	; (80045d4 <HAL_RCC_OscConfig+0x4f8>)
 80043ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b2:	f7ff fb2b 	bl	8003a0c <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ba:	f7ff fb27 	bl	8003a0c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b64      	cmp	r3, #100	; 0x64
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0fd      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	4b81      	ldr	r3, [pc, #516]	; (80045d4 <HAL_RCC_OscConfig+0x4f8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d106      	bne.n	80043ee <HAL_RCC_OscConfig+0x312>
 80043e0:	4b7b      	ldr	r3, [pc, #492]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4a7a      	ldr	r2, [pc, #488]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6213      	str	r3, [r2, #32]
 80043ec:	e02d      	b.n	800444a <HAL_RCC_OscConfig+0x36e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x334>
 80043f6:	4b76      	ldr	r3, [pc, #472]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4a75      	ldr	r2, [pc, #468]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	6213      	str	r3, [r2, #32]
 8004402:	4b73      	ldr	r3, [pc, #460]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4a72      	ldr	r2, [pc, #456]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	6213      	str	r3, [r2, #32]
 800440e:	e01c      	b.n	800444a <HAL_RCC_OscConfig+0x36e>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b05      	cmp	r3, #5
 8004416:	d10c      	bne.n	8004432 <HAL_RCC_OscConfig+0x356>
 8004418:	4b6d      	ldr	r3, [pc, #436]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	4a6c      	ldr	r2, [pc, #432]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	6213      	str	r3, [r2, #32]
 8004424:	4b6a      	ldr	r3, [pc, #424]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6213      	str	r3, [r2, #32]
 8004430:	e00b      	b.n	800444a <HAL_RCC_OscConfig+0x36e>
 8004432:	4b67      	ldr	r3, [pc, #412]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	4a66      	ldr	r2, [pc, #408]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	6213      	str	r3, [r2, #32]
 800443e:	4b64      	ldr	r3, [pc, #400]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	4a63      	ldr	r2, [pc, #396]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004444:	f023 0304 	bic.w	r3, r3, #4
 8004448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d015      	beq.n	800447e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004452:	f7ff fadb 	bl	8003a0c <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004458:	e00a      	b.n	8004470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f7ff fad7 	bl	8003a0c <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	f241 3288 	movw	r2, #5000	; 0x1388
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0ab      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004470:	4b57      	ldr	r3, [pc, #348]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ee      	beq.n	800445a <HAL_RCC_OscConfig+0x37e>
 800447c:	e014      	b.n	80044a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7ff fac5 	bl	8003a0c <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004484:	e00a      	b.n	800449c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004486:	f7ff fac1 	bl	8003a0c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	f241 3288 	movw	r2, #5000	; 0x1388
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e095      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449c:	4b4c      	ldr	r3, [pc, #304]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ee      	bne.n	8004486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d105      	bne.n	80044ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4a47      	ldr	r2, [pc, #284]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8081 	beq.w	80045c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c4:	4b42      	ldr	r3, [pc, #264]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d061      	beq.n	8004594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d146      	bne.n	8004566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCC_OscConfig+0x4fc>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7ff fa95 	bl	8003a0c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e6:	f7ff fa91 	bl	8003a0c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e067      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f8:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d108      	bne.n	8004520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800450e:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	492d      	ldr	r1, [pc, #180]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004520:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a19      	ldr	r1, [r3, #32]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	430b      	orrs	r3, r1
 8004532:	4927      	ldr	r1, [pc, #156]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004534:	4313      	orrs	r3, r2
 8004536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004538:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <HAL_RCC_OscConfig+0x4fc>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453e:	f7ff fa65 	bl	8003a0c <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004546:	f7ff fa61 	bl	8003a0c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e037      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x46a>
 8004564:	e02f      	b.n	80045c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <HAL_RCC_OscConfig+0x4fc>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7ff fa4e 	bl	8003a0c <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004574:	f7ff fa4a 	bl	8003a0c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e020      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x498>
 8004592:	e018      	b.n	80045c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e013      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_OscConfig+0x4f4>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d106      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40007000 	.word	0x40007000
 80045d8:	42420060 	.word	0x42420060

080045dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0d0      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045f0:	4b6a      	ldr	r3, [pc, #424]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d910      	bls.n	8004620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b67      	ldr	r3, [pc, #412]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 0207 	bic.w	r2, r3, #7
 8004606:	4965      	ldr	r1, [pc, #404]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b63      	ldr	r3, [pc, #396]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0b8      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d020      	beq.n	800466e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a58      	ldr	r2, [pc, #352]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004642:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004650:	4b53      	ldr	r3, [pc, #332]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004656:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800465a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465c:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	494d      	ldr	r1, [pc, #308]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d040      	beq.n	80046fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d115      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e073      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046aa:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e06b      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f023 0203 	bic.w	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4936      	ldr	r1, [pc, #216]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046cc:	f7ff f99e 	bl	8003a0c <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d4:	f7ff f99a 	bl	8003a0c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e053      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 020c 	and.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1eb      	bne.n	80046d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d210      	bcs.n	800472c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470a:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f023 0207 	bic.w	r2, r3, #7
 8004712:	4922      	ldr	r1, [pc, #136]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_RCC_ClockConfig+0x1c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e032      	b.n	8004792 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4916      	ldr	r1, [pc, #88]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	490e      	ldr	r1, [pc, #56]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800476a:	f000 f821 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 800476e:	4602      	mov	r2, r0
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	490a      	ldr	r1, [pc, #40]	; (80047a4 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	5ccb      	ldrb	r3, [r1, r3]
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_ClockConfig+0x1d0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff f80c 	bl	80037a8 <HAL_InitTick>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40022000 	.word	0x40022000
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800a40c 	.word	0x0800a40c
 80047a8:	20000050 	.word	0x20000050
 80047ac:	20000054 	.word	0x20000054

080047b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	b490      	push	{r4, r7}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <HAL_RCC_GetSysClockFreq+0xb0>)
 80047b8:	1d3c      	adds	r4, r7, #4
 80047ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047c0:	f240 2301 	movw	r3, #513	; 0x201
 80047c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 030c 	and.w	r3, r3, #12
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d002      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x40>
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d003      	beq.n	80047f6 <HAL_RCC_GetSysClockFreq+0x46>
 80047ee:	e02d      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f2:	623b      	str	r3, [r7, #32]
      break;
 80047f4:	e02d      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	0c9b      	lsrs	r3, r3, #18
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004802:	4413      	add	r3, r2
 8004804:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004808:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d013      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004814:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	0c5b      	lsrs	r3, r3, #17
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004822:	4413      	add	r3, r2
 8004824:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004828:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800482e:	fb02 f203 	mul.w	r2, r2, r3
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e004      	b.n	8004846 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	4a0b      	ldr	r2, [pc, #44]	; (800486c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004840:	fb02 f303 	mul.w	r3, r2, r3
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	623b      	str	r3, [r7, #32]
      break;
 800484a:	e002      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800484e:	623b      	str	r3, [r7, #32]
      break;
 8004850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004852:	6a3b      	ldr	r3, [r7, #32]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3728      	adds	r7, #40	; 0x28
 8004858:	46bd      	mov	sp, r7
 800485a:	bc90      	pop	{r4, r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	0800a2c4 	.word	0x0800a2c4
 8004864:	40021000 	.word	0x40021000
 8004868:	007a1200 	.word	0x007a1200
 800486c:	003d0900 	.word	0x003d0900

08004870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004874:	4b02      	ldr	r3, [pc, #8]	; (8004880 <HAL_RCC_GetHCLKFreq+0x10>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	20000050 	.word	0x20000050

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004888:	f7ff fff2 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4903      	ldr	r1, [pc, #12]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	0800a41c 	.word	0x0800a41c

080048ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048b0:	f7ff ffde 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	0adb      	lsrs	r3, r3, #11
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	4903      	ldr	r1, [pc, #12]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c2:	5ccb      	ldrb	r3, [r1, r3]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0800a41c 	.word	0x0800a41c

080048d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	220f      	movs	r2, #15
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048e4:	4b11      	ldr	r3, [pc, #68]	; (800492c <HAL_RCC_GetClockConfig+0x58>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0203 	and.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <HAL_RCC_GetClockConfig+0x58>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_GetClockConfig+0x58>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_RCC_GetClockConfig+0x58>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	08db      	lsrs	r3, r3, #3
 800490e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_GetClockConfig+0x5c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0207 	and.w	r2, r3, #7
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	40021000 	.word	0x40021000
 8004930:	40022000 	.word	0x40022000

08004934 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <RCC_Delay+0x34>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0a      	ldr	r2, [pc, #40]	; (800496c <RCC_Delay+0x38>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0a5b      	lsrs	r3, r3, #9
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004950:	bf00      	nop
  }
  while (Delay --);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1e5a      	subs	r2, r3, #1
 8004956:	60fa      	str	r2, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f9      	bne.n	8004950 <RCC_Delay+0x1c>
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	20000050 	.word	0x20000050
 800496c:	10624dd3 	.word	0x10624dd3

08004970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e041      	b.n	8004a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fe fe46 	bl	8003628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 fc28 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d001      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e03a      	b.n	8004a9e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <HAL_TIM_Base_Start_IT+0x98>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x58>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d009      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x58>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a14      	ldr	r2, [pc, #80]	; (8004aac <HAL_TIM_Base_Start_IT+0x9c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x58>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d010      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	e007      	b.n	8004a9c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800

08004ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e041      	b.n	8004b4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f839 	bl	8004b52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f000 fb86 	bl	8005204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_TIM_PWM_Start+0x24>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	bf14      	ite	ne
 8004b80:	2301      	movne	r3, #1
 8004b82:	2300      	moveq	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e022      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d109      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x3e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	bf14      	ite	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	2300      	moveq	r3, #0
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	e015      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x58>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e008      	b.n	8004bce <HAL_TIM_PWM_Start+0x6a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e05e      	b.n	8004c94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_PWM_Start+0x82>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	e013      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0x92>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf4:	e00b      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xa2>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c04:	e003      	b.n	8004c0e <HAL_TIM_PWM_Start+0xaa>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2201      	movs	r2, #1
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fd74 	bl	8005704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <HAL_TIM_PWM_Start+0x138>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d107      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <HAL_TIM_PWM_Start+0x138>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <HAL_TIM_PWM_Start+0xfa>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c48:	d009      	beq.n	8004c5e <HAL_TIM_PWM_Start+0xfa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <HAL_TIM_PWM_Start+0x13c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_TIM_PWM_Start+0xfa>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <HAL_TIM_PWM_Start+0x140>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d111      	bne.n	8004c82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b06      	cmp	r3, #6
 8004c6e:	d010      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	e007      	b.n	8004c92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800

08004ca8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0202 	mvn.w	r2, #2
 8004cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa6f 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa62 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fa71 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0204 	mvn.w	r2, #4
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fa45 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa38 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fa47 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d122      	bne.n	8004dac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d11b      	bne.n	8004dac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0208 	mvn.w	r2, #8
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2204      	movs	r2, #4
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fa1b 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa0e 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa1d 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d122      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d11b      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0210 	mvn.w	r2, #16
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9f1 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9e4 	bl	80051bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f9f3 	bl	80051e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d10e      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d107      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0201 	mvn.w	r2, #1
 8004e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fe fb9c 	bl	8003564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d10e      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d107      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fd32 	bl	80058bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d10e      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d107      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9b7 	bl	80051f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d10e      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d107      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0220 	mvn.w	r2, #32
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fcfd 	bl	80058aa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0ac      	b.n	800502c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	f200 809f 	bhi.w	8005020 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004ee2:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08005021 	.word	0x08005021
 8004ef0:	08005021 	.word	0x08005021
 8004ef4:	08005021 	.word	0x08005021
 8004ef8:	08004f5d 	.word	0x08004f5d
 8004efc:	08005021 	.word	0x08005021
 8004f00:	08005021 	.word	0x08005021
 8004f04:	08005021 	.word	0x08005021
 8004f08:	08004f9f 	.word	0x08004f9f
 8004f0c:	08005021 	.word	0x08005021
 8004f10:	08005021 	.word	0x08005021
 8004f14:	08005021 	.word	0x08005021
 8004f18:	08004fdf 	.word	0x08004fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f9d0 	bl	80052c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0208 	orr.w	r2, r2, #8
 8004f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0204 	bic.w	r2, r2, #4
 8004f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6999      	ldr	r1, [r3, #24]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	619a      	str	r2, [r3, #24]
      break;
 8004f5a:	e062      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa16 	bl	8005394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	619a      	str	r2, [r3, #24]
      break;
 8004f9c:	e041      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fa5f 	bl	8005468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0208 	orr.w	r2, r2, #8
 8004fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0204 	bic.w	r2, r2, #4
 8004fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69d9      	ldr	r1, [r3, #28]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	61da      	str	r2, [r3, #28]
      break;
 8004fdc:	e021      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 faa9 	bl	800553c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69d9      	ldr	r1, [r3, #28]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	021a      	lsls	r2, r3, #8
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	61da      	str	r2, [r3, #28]
      break;
 800501e:	e000      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_TIM_ConfigClockSource+0x18>
 8005048:	2302      	movs	r3, #2
 800504a:	e0b3      	b.n	80051b4 <HAL_TIM_ConfigClockSource+0x180>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800506a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005072:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005084:	d03e      	beq.n	8005104 <HAL_TIM_ConfigClockSource+0xd0>
 8005086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508a:	f200 8087 	bhi.w	800519c <HAL_TIM_ConfigClockSource+0x168>
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005092:	f000 8085 	beq.w	80051a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	d87f      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x168>
 800509c:	2b70      	cmp	r3, #112	; 0x70
 800509e:	d01a      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0xa2>
 80050a0:	2b70      	cmp	r3, #112	; 0x70
 80050a2:	d87b      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x168>
 80050a4:	2b60      	cmp	r3, #96	; 0x60
 80050a6:	d050      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x116>
 80050a8:	2b60      	cmp	r3, #96	; 0x60
 80050aa:	d877      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x168>
 80050ac:	2b50      	cmp	r3, #80	; 0x50
 80050ae:	d03c      	beq.n	800512a <HAL_TIM_ConfigClockSource+0xf6>
 80050b0:	2b50      	cmp	r3, #80	; 0x50
 80050b2:	d873      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x168>
 80050b4:	2b40      	cmp	r3, #64	; 0x40
 80050b6:	d058      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x136>
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d86f      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x168>
 80050bc:	2b30      	cmp	r3, #48	; 0x30
 80050be:	d064      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x156>
 80050c0:	2b30      	cmp	r3, #48	; 0x30
 80050c2:	d86b      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x168>
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d060      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x156>
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d867      	bhi.n	800519c <HAL_TIM_ConfigClockSource+0x168>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d05c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x156>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d05a      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050d4:	e062      	b.n	800519c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6899      	ldr	r1, [r3, #8]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f000 faee 	bl	80056c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	609a      	str	r2, [r3, #8]
      break;
 8005102:	e04e      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f000 fad7 	bl	80056c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005126:	609a      	str	r2, [r3, #8]
      break;
 8005128:	e03b      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fa4e 	bl	80055d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2150      	movs	r1, #80	; 0x50
 8005142:	4618      	mov	r0, r3
 8005144:	f000 faa5 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8005148:	e02b      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fa6c 	bl	8005634 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2160      	movs	r1, #96	; 0x60
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fa95 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8005168:	e01b      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fa2e 	bl	80055d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2140      	movs	r1, #64	; 0x40
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa85 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 8005188:	e00b      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f000 fa7c 	bl	8005692 <TIM_ITRx_SetConfig>
        break;
 800519a:	e002      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a29      	ldr	r2, [pc, #164]	; (80052bc <TIM_Base_SetConfig+0xb8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d007      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <TIM_Base_SetConfig+0xbc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_Base_SetConfig+0x30>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a25      	ldr	r2, [pc, #148]	; (80052c4 <TIM_Base_SetConfig+0xc0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <TIM_Base_SetConfig+0xb8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <TIM_Base_SetConfig+0xbc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0x62>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <TIM_Base_SetConfig+0xc0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d108      	bne.n	8005278 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a07      	ldr	r2, [pc, #28]	; (80052bc <TIM_Base_SetConfig+0xb8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d103      	bne.n	80052ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	615a      	str	r2, [r3, #20]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800

080052c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f023 0201 	bic.w	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f023 0302 	bic.w	r3, r3, #2
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1c      	ldr	r2, [pc, #112]	; (8005390 <TIM_OC1_SetConfig+0xc8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10c      	bne.n	800533e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0308 	bic.w	r3, r3, #8
 800532a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a13      	ldr	r2, [pc, #76]	; (8005390 <TIM_OC1_SetConfig+0xc8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d111      	bne.n	800536a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40012c00 	.word	0x40012c00

08005394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	f023 0210 	bic.w	r2, r3, #16
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0320 	bic.w	r3, r3, #32
 80053de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <TIM_OC2_SetConfig+0xd0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10d      	bne.n	8005410 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a14      	ldr	r2, [pc, #80]	; (8005464 <TIM_OC2_SetConfig+0xd0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d113      	bne.n	8005440 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800541e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005426:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	621a      	str	r2, [r3, #32]
}
 800545a:	bf00      	nop
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00

08005468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <TIM_OC3_SetConfig+0xd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10d      	bne.n	80054e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a14      	ldr	r2, [pc, #80]	; (8005538 <TIM_OC3_SetConfig+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d113      	bne.n	8005512 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	621a      	str	r2, [r3, #32]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00

0800553c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	031b      	lsls	r3, r3, #12
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a0f      	ldr	r2, [pc, #60]	; (80055d4 <TIM_OC4_SetConfig+0x98>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d109      	bne.n	80055b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	019b      	lsls	r3, r3, #6
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00

080055d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 030a 	bic.w	r3, r3, #10
 8005614:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f023 0210 	bic.w	r2, r3, #16
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800565e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	031b      	lsls	r3, r3, #12
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005670:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	621a      	str	r2, [r3, #32]
}
 8005688:	bf00      	nop
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f043 0307 	orr.w	r3, r3, #7
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr

080056c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b087      	sub	sp, #28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	021a      	lsls	r2, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	609a      	str	r2, [r3, #8]
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2201      	movs	r2, #1
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	43db      	mvns	r3, r3
 8005726:	401a      	ands	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	fa01 f303 	lsl.w	r3, r1, r3
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005760:	2302      	movs	r3, #2
 8005762:	e046      	b.n	80057f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a16      	ldr	r2, [pc, #88]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00e      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d009      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a12      	ldr	r2, [pc, #72]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a10      	ldr	r2, [pc, #64]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d10c      	bne.n	80057e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800

08005808 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e03d      	b.n	80058a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr

080058aa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr

080058bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr

080058ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e03f      	b.n	8005960 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fd ff03 	bl	8003700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2224      	movs	r2, #36	; 0x24
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005910:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fcf2 	bl	80062fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005926:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005936:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005946:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b20      	cmp	r3, #32
 8005980:	d130      	bne.n	80059e4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <HAL_UART_Transmit_IT+0x26>
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e029      	b.n	80059e6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Transmit_IT+0x38>
 800599c:	2302      	movs	r3, #2
 800599e:	e022      	b.n	80059e6 <HAL_UART_Transmit_IT+0x7e>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	88fa      	ldrh	r2, [r7, #6]
 80059b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2221      	movs	r2, #33	; 0x21
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80059e0:	2300      	movs	r3, #0
 80059e2:	e000      	b.n	80059e6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80059e4:	2302      	movs	r3, #2
  }
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	d11d      	bne.n	8005a46 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_UART_Receive_IT+0x26>
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e016      	b.n	8005a48 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_UART_Receive_IT+0x38>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e00f      	b.n	8005a48 <HAL_UART_Receive_IT+0x58>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fabb 	bl	8005fb8 <UART_Start_Receive_IT>
 8005a42:	4603      	mov	r3, r0
 8005a44:	e000      	b.n	8005a48 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d107      	bne.n	8005a90 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0210 	bic.w	r2, r2, #16
 8005a8e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02d      	beq.n	8005afa <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aac:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <HAL_UART_AbortReceive_IT+0xd0>)
 8005abc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe f8c6 	bl	8003c54 <HAL_DMA_Abort_IT>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d022      	beq.n	8005b14 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
 8005adc:	e01a      	b.n	8005b14 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9c9 	bl	8005e8a <HAL_UART_AbortReceiveCpltCallback>
 8005af8:	e00c      	b.n	8005b14 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f9bb 	bl	8005e8a <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	080060ab 	.word	0x080060ab

08005b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10d      	bne.n	8005b76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_UART_IRQHandler+0x52>
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fb1a 	bl	80061a8 <UART_Receive_IT>
      return;
 8005b74:	e17b      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80b1 	beq.w	8005ce0 <HAL_UART_IRQHandler+0x1bc>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <HAL_UART_IRQHandler+0x70>
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80a6 	beq.w	8005ce0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x90>
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f043 0201 	orr.w	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xb0>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f043 0202 	orr.w	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xd0>
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f043 0204 	orr.w	r2, r3, #4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00f      	beq.n	8005c1e <HAL_UART_IRQHandler+0xfa>
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_UART_IRQHandler+0xee>
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f043 0208 	orr.w	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 811e 	beq.w	8005e64 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_UART_IRQHandler+0x11e>
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fab3 	bl	80061a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <HAL_UART_IRQHandler+0x146>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d031      	beq.n	8005cce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9dd 	bl	800602a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d023      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d013      	beq.n	8005cbe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	4a76      	ldr	r2, [pc, #472]	; (8005e74 <HAL_UART_IRQHandler+0x350>)
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fd ffd6 	bl	8003c54 <HAL_DMA_Abort_IT>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d016      	beq.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	e00e      	b.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8da 	bl	8005e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	e00a      	b.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8d6 	bl	8005e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ccc:	e006      	b.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8d2 	bl	8005e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cda:	e0c3      	b.n	8005e64 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cdc:	bf00      	nop
    return;
 8005cde:	e0c1      	b.n	8005e64 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 80a1 	bne.w	8005e2c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 809b 	beq.w	8005e2c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8095 	beq.w	8005e2c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d04e      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d30:	8a3b      	ldrh	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8098 	beq.w	8005e68 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d3c:	8a3a      	ldrh	r2, [r7, #16]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	f080 8092 	bcs.w	8005e68 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8a3a      	ldrh	r2, [r7, #16]
 8005d48:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d02b      	beq.n	8005dac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d62:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d82:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0210 	bic.w	r2, r2, #16
 8005da0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fd ff19 	bl	8003bde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f86d 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dc2:	e051      	b.n	8005e68 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d047      	beq.n	8005e6c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005ddc:	8a7b      	ldrh	r3, [r7, #18]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d044      	beq.n	8005e6c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005df0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0201 	bic.w	r2, r2, #1
 8005e00:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0210 	bic.w	r2, r2, #16
 8005e1e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e20:	8a7b      	ldrh	r3, [r7, #18]
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f839 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e2a:	e01f      	b.n	8005e6c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_UART_IRQHandler+0x324>
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f94a 	bl	80060da <UART_Transmit_IT>
    return;
 8005e46:	e012      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <HAL_UART_IRQHandler+0x34a>
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f98b 	bl	8006178 <UART_EndTransmit_IT>
    return;
 8005e62:	e004      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
    return;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
      return;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
      return;
 8005e6c:	bf00      	nop
  }
}
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	08006083 	.word	0x08006083

08005e78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e020      	b.n	8005f0e <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 030c 	bic.w	r3, r3, #12
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f043 0308 	orr.w	r3, r3, #8
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e020      	b.n	8005f74 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2224      	movs	r2, #36	; 0x24
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f023 030c 	bic.w	r3, r3, #12
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f043 0304 	orr.w	r3, r3, #4
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b2db      	uxtb	r3, r3
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr

08005fb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	88fa      	ldrh	r2, [r7, #6]
 8005fd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2222      	movs	r2, #34	; 0x22
 8005fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ffc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0201 	orr.w	r2, r2, #1
 800600c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0220 	orr.w	r2, r2, #32
 800601c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006040:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f022 0210 	bic.w	r2, r2, #16
 8006068:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bc80      	pop	{r7}
 8006080:	4770      	bx	lr

08006082 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff feeb 	bl	8005e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff fedc 	bl	8005e8a <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b21      	cmp	r3, #33	; 0x21
 80060ec:	d13e      	bne.n	800616c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d114      	bne.n	8006122 <UART_Transmit_IT+0x48>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d110      	bne.n	8006122 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006114:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	1c9a      	adds	r2, r3, #2
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]
 8006120:	e008      	b.n	8006134 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6211      	str	r1, [r2, #32]
 800612c:	781a      	ldrb	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29b      	uxth	r3, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4619      	mov	r1, r3
 8006142:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10f      	bne.n	8006168 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006156:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006166:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	e000      	b.n	800616e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800616c:	2302      	movs	r3, #2
  }
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr

08006178 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fc fa87 	bl	80026ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b22      	cmp	r3, #34	; 0x22
 80061ba:	f040 8099 	bne.w	80062f0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c6:	d117      	bne.n	80061f8 <UART_Receive_IT+0x50>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d113      	bne.n	80061f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
 80061f6:	e026      	b.n	8006246 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620a:	d007      	beq.n	800621c <UART_Receive_IT+0x74>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <UART_Receive_IT+0x82>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	e008      	b.n	800623c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	b2da      	uxtb	r2, r3
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4619      	mov	r1, r3
 8006254:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006256:	2b00      	cmp	r3, #0
 8006258:	d148      	bne.n	80062ec <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0220 	bic.w	r2, r2, #32
 8006268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	2b01      	cmp	r3, #1
 8006298:	d123      	bne.n	80062e2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0210 	bic.w	r2, r2, #16
 80062ae:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d10a      	bne.n	80062d4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff fdde 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
 80062e0:	e002      	b.n	80062e8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fc fa20 	bl	8002728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e002      	b.n	80062f2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e000      	b.n	80062f2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
  }
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006336:	f023 030c 	bic.w	r3, r3, #12
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	430b      	orrs	r3, r1
 8006342:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2c      	ldr	r2, [pc, #176]	; (8006410 <UART_SetConfig+0x114>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006364:	f7fe faa2 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	e002      	b.n	8006372 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fe fa8a 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006370:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009a      	lsls	r2, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	4a22      	ldr	r2, [pc, #136]	; (8006414 <UART_SetConfig+0x118>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	0119      	lsls	r1, r3, #4
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009a      	lsls	r2, r3, #2
 800639c:	441a      	add	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063a8:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <UART_SetConfig+0x118>)
 80063aa:	fba3 0302 	umull	r0, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2064      	movs	r0, #100	; 0x64
 80063b2:	fb00 f303 	mul.w	r3, r0, r3
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	3332      	adds	r3, #50	; 0x32
 80063bc:	4a15      	ldr	r2, [pc, #84]	; (8006414 <UART_SetConfig+0x118>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c8:	4419      	add	r1, r3
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009a      	lsls	r2, r3, #2
 80063d4:	441a      	add	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <UART_SetConfig+0x118>)
 80063e2:	fba3 0302 	umull	r0, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2064      	movs	r0, #100	; 0x64
 80063ea:	fb00 f303 	mul.w	r3, r0, r3
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	3332      	adds	r3, #50	; 0x32
 80063f4:	4a07      	ldr	r2, [pc, #28]	; (8006414 <UART_SetConfig+0x118>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	440a      	add	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40013800 	.word	0x40013800
 8006414:	51eb851f 	.word	0x51eb851f

08006418 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800641e:	f3ef 8305 	mrs	r3, IPSR
 8006422:	60bb      	str	r3, [r7, #8]
  return(result);
 8006424:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10f      	bne.n	800644a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642a:	f3ef 8310 	mrs	r3, PRIMASK
 800642e:	607b      	str	r3, [r7, #4]
  return(result);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d109      	bne.n	800644a <osKernelInitialize+0x32>
 8006436:	4b10      	ldr	r3, [pc, #64]	; (8006478 <osKernelInitialize+0x60>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d109      	bne.n	8006452 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800643e:	f3ef 8311 	mrs	r3, BASEPRI
 8006442:	603b      	str	r3, [r7, #0]
  return(result);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800644a:	f06f 0305 	mvn.w	r3, #5
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e00c      	b.n	800646c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <osKernelInitialize+0x60>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d105      	bne.n	8006466 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <osKernelInitialize+0x60>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e002      	b.n	800646c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	20000108 	.word	0x20000108

0800647c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006482:	f3ef 8305 	mrs	r3, IPSR
 8006486:	60bb      	str	r3, [r7, #8]
  return(result);
 8006488:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10f      	bne.n	80064ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800648e:	f3ef 8310 	mrs	r3, PRIMASK
 8006492:	607b      	str	r3, [r7, #4]
  return(result);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <osKernelStart+0x32>
 800649a:	4b11      	ldr	r3, [pc, #68]	; (80064e0 <osKernelStart+0x64>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d109      	bne.n	80064b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064a2:	f3ef 8311 	mrs	r3, BASEPRI
 80064a6:	603b      	str	r3, [r7, #0]
  return(result);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80064ae:	f06f 0305 	mvn.w	r3, #5
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e00e      	b.n	80064d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <osKernelStart+0x64>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d107      	bne.n	80064ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80064be:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <osKernelStart+0x64>)
 80064c0:	2202      	movs	r2, #2
 80064c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80064c4:	f001 fca4 	bl	8007e10 <vTaskStartScheduler>
      stat = osOK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e002      	b.n	80064d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
 80064d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000108 	.word	0x20000108

080064e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b092      	sub	sp, #72	; 0x48
 80064e8:	af04      	add	r7, sp, #16
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f4:	f3ef 8305 	mrs	r3, IPSR
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f040 8094 	bne.w	800662a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006502:	f3ef 8310 	mrs	r3, PRIMASK
 8006506:	623b      	str	r3, [r7, #32]
  return(result);
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 808d 	bne.w	800662a <osThreadNew+0x146>
 8006510:	4b48      	ldr	r3, [pc, #288]	; (8006634 <osThreadNew+0x150>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d106      	bne.n	8006526 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006518:	f3ef 8311 	mrs	r3, BASEPRI
 800651c:	61fb      	str	r3, [r7, #28]
  return(result);
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 8082 	bne.w	800662a <osThreadNew+0x146>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d07e      	beq.n	800662a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006530:	2318      	movs	r3, #24
 8006532:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006534:	2300      	movs	r3, #0
 8006536:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006538:	f107 031b 	add.w	r3, r7, #27
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800653e:	f04f 33ff 	mov.w	r3, #4294967295
 8006542:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d045      	beq.n	80065d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <osThreadNew+0x74>
        name = attr->name;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d008      	beq.n	800657e <osThreadNew+0x9a>
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	2b38      	cmp	r3, #56	; 0x38
 8006570:	d805      	bhi.n	800657e <osThreadNew+0x9a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <osThreadNew+0x9e>
        return (NULL);
 800657e:	2300      	movs	r3, #0
 8006580:	e054      	b.n	800662c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <osThreadNew+0xd4>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b5b      	cmp	r3, #91	; 0x5b
 80065a0:	d90a      	bls.n	80065b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d006      	beq.n	80065b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <osThreadNew+0xd4>
        mem = 1;
 80065b2:	2301      	movs	r3, #1
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b6:	e010      	b.n	80065da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10c      	bne.n	80065da <osThreadNew+0xf6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d108      	bne.n	80065da <osThreadNew+0xf6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <osThreadNew+0xf6>
          mem = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d4:	e001      	b.n	80065da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d110      	bne.n	8006602 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065e8:	9202      	str	r2, [sp, #8]
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f001 fa3e 	bl	8007a78 <xTaskCreateStatic>
 80065fc:	4603      	mov	r3, r0
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	e013      	b.n	800662a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	2b00      	cmp	r3, #0
 8006606:	d110      	bne.n	800662a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	b29a      	uxth	r2, r3
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f001 fa88 	bl	8007b30 <xTaskCreate>
 8006620:	4603      	mov	r3, r0
 8006622:	2b01      	cmp	r3, #1
 8006624:	d001      	beq.n	800662a <osThreadNew+0x146>
          hTask = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800662a:	697b      	ldr	r3, [r7, #20]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3738      	adds	r7, #56	; 0x38
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20000108 	.word	0x20000108

08006638 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006640:	f3ef 8305 	mrs	r3, IPSR
 8006644:	613b      	str	r3, [r7, #16]
  return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10f      	bne.n	800666c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664c:	f3ef 8310 	mrs	r3, PRIMASK
 8006650:	60fb      	str	r3, [r7, #12]
  return(result);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <osDelay+0x34>
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <osDelay+0x58>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d109      	bne.n	8006674 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006660:	f3ef 8311 	mrs	r3, BASEPRI
 8006664:	60bb      	str	r3, [r7, #8]
  return(result);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <osDelay+0x3c>
    stat = osErrorISR;
 800666c:	f06f 0305 	mvn.w	r3, #5
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e007      	b.n	8006684 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <osDelay+0x4c>
      vTaskDelay(ticks);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fb92 	bl	8007da8 <vTaskDelay>
    }
  }

  return (stat);
 8006684:	697b      	ldr	r3, [r7, #20]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000108 	.word	0x20000108

08006694 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b08c      	sub	sp, #48	; 0x30
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a4:	f3ef 8305 	mrs	r3, IPSR
 80066a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80066aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f040 8086 	bne.w	80067be <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b2:	f3ef 8310 	mrs	r3, PRIMASK
 80066b6:	617b      	str	r3, [r7, #20]
  return(result);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d17f      	bne.n	80067be <osSemaphoreNew+0x12a>
 80066be:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <osSemaphoreNew+0x134>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d105      	bne.n	80066d2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066c6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ca:	613b      	str	r3, [r7, #16]
  return(result);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d175      	bne.n	80067be <osSemaphoreNew+0x12a>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d072      	beq.n	80067be <osSemaphoreNew+0x12a>
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d86e      	bhi.n	80067be <osSemaphoreNew+0x12a>
    mem = -1;
 80066e0:	f04f 33ff 	mov.w	r3, #4294967295
 80066e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d015      	beq.n	8006718 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <osSemaphoreNew+0x6e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b4f      	cmp	r3, #79	; 0x4f
 80066fa:	d902      	bls.n	8006702 <osSemaphoreNew+0x6e>
        mem = 1;
 80066fc:	2301      	movs	r3, #1
 80066fe:	623b      	str	r3, [r7, #32]
 8006700:	e00c      	b.n	800671c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d108      	bne.n	800671c <osSemaphoreNew+0x88>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <osSemaphoreNew+0x88>
          mem = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	e001      	b.n	800671c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	d04c      	beq.n	80067be <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d128      	bne.n	800677c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10a      	bne.n	8006746 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2203      	movs	r2, #3
 8006736:	9200      	str	r2, [sp, #0]
 8006738:	2200      	movs	r2, #0
 800673a:	2100      	movs	r1, #0
 800673c:	2001      	movs	r0, #1
 800673e:	f000 fa87 	bl	8006c50 <xQueueGenericCreateStatic>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24
 8006744:	e005      	b.n	8006752 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006746:	2203      	movs	r2, #3
 8006748:	2100      	movs	r1, #0
 800674a:	2001      	movs	r0, #1
 800674c:	f000 faf7 	bl	8006d3e <xQueueGenericCreate>
 8006750:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	2b00      	cmp	r3, #0
 8006756:	d022      	beq.n	800679e <osSemaphoreNew+0x10a>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01f      	beq.n	800679e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800675e:	2300      	movs	r3, #0
 8006760:	2200      	movs	r2, #0
 8006762:	2100      	movs	r1, #0
 8006764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006766:	f000 fbb5 	bl	8006ed4 <xQueueGenericSend>
 800676a:	4603      	mov	r3, r0
 800676c:	2b01      	cmp	r3, #1
 800676e:	d016      	beq.n	800679e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006772:	f000 ffb1 	bl	80076d8 <vQueueDelete>
            hSemaphore = NULL;
 8006776:	2300      	movs	r3, #0
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
 800677a:	e010      	b.n	800679e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d108      	bne.n	8006794 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	461a      	mov	r2, r3
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fb38 	bl	8006e00 <xQueueCreateCountingSemaphoreStatic>
 8006790:	6278      	str	r0, [r7, #36]	; 0x24
 8006792:	e004      	b.n	800679e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fb69 	bl	8006e6e <xQueueCreateCountingSemaphore>
 800679c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00c      	beq.n	80067be <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e001      	b.n	80067b6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80067b6:	69f9      	ldr	r1, [r7, #28]
 80067b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ba:	f001 f8d7 	bl	800796c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3728      	adds	r7, #40	; 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20000108 	.word	0x20000108

080067cc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08c      	sub	sp, #48	; 0x30
 80067d0:	af02      	add	r7, sp, #8
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067dc:	f3ef 8305 	mrs	r3, IPSR
 80067e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80067e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d16f      	bne.n	80068c8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e8:	f3ef 8310 	mrs	r3, PRIMASK
 80067ec:	617b      	str	r3, [r7, #20]
  return(result);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d169      	bne.n	80068c8 <osMessageQueueNew+0xfc>
 80067f4:	4b37      	ldr	r3, [pc, #220]	; (80068d4 <osMessageQueueNew+0x108>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d105      	bne.n	8006808 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006800:	613b      	str	r3, [r7, #16]
  return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d15f      	bne.n	80068c8 <osMessageQueueNew+0xfc>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d05c      	beq.n	80068c8 <osMessageQueueNew+0xfc>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d059      	beq.n	80068c8 <osMessageQueueNew+0xfc>
    mem = -1;
 8006814:	f04f 33ff 	mov.w	r3, #4294967295
 8006818:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d029      	beq.n	8006874 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d012      	beq.n	800684e <osMessageQueueNew+0x82>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2b4f      	cmp	r3, #79	; 0x4f
 800682e:	d90e      	bls.n	800684e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	695a      	ldr	r2, [r3, #20]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	429a      	cmp	r2, r3
 8006846:	d302      	bcc.n	800684e <osMessageQueueNew+0x82>
        mem = 1;
 8006848:	2301      	movs	r3, #1
 800684a:	623b      	str	r3, [r7, #32]
 800684c:	e014      	b.n	8006878 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d110      	bne.n	8006878 <osMessageQueueNew+0xac>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10c      	bne.n	8006878 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006862:	2b00      	cmp	r3, #0
 8006864:	d108      	bne.n	8006878 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d104      	bne.n	8006878 <osMessageQueueNew+0xac>
          mem = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	e001      	b.n	8006878 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d10b      	bne.n	8006896 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2100      	movs	r1, #0
 8006888:	9100      	str	r1, [sp, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f9df 	bl	8006c50 <xQueueGenericCreateStatic>
 8006892:	6278      	str	r0, [r7, #36]	; 0x24
 8006894:	e008      	b.n	80068a8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d105      	bne.n	80068a8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800689c:	2200      	movs	r2, #0
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 fa4c 	bl	8006d3e <xQueueGenericCreate>
 80068a6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <osMessageQueueNew+0xf0>
        name = attr->name;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	e001      	b.n	80068c0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80068c0:	69f9      	ldr	r1, [r7, #28]
 80068c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c4:	f001 f852 	bl	800796c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3728      	adds	r7, #40	; 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000108 	.word	0x20000108

080068d8 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ee:	f3ef 8305 	mrs	r3, IPSR
 80068f2:	61fb      	str	r3, [r7, #28]
  return(result);
 80068f4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10f      	bne.n	800691a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068fa:	f3ef 8310 	mrs	r3, PRIMASK
 80068fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <osMessageQueueGet+0x42>
 8006906:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <osMessageQueueGet+0xdc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d12e      	bne.n	800696c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800690e:	f3ef 8311 	mrs	r3, BASEPRI
 8006912:	617b      	str	r3, [r7, #20]
  return(result);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d028      	beq.n	800696c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <osMessageQueueGet+0x54>
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <osMessageQueueGet+0x54>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800692c:	f06f 0303 	mvn.w	r3, #3
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006932:	e038      	b.n	80069a6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006938:	f107 0310 	add.w	r3, r7, #16
 800693c:	461a      	mov	r2, r3
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	6a38      	ldr	r0, [r7, #32]
 8006942:	f000 fe49 	bl	80075d8 <xQueueReceiveFromISR>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d003      	beq.n	8006954 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800694c:	f06f 0302 	mvn.w	r3, #2
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006952:	e028      	b.n	80069a6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d025      	beq.n	80069a6 <osMessageQueueGet+0xce>
 800695a:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <osMessageQueueGet+0xe0>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800696a:	e01c      	b.n	80069a6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <osMessageQueueGet+0xa0>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006978:	f06f 0303 	mvn.w	r3, #3
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
 800697e:	e013      	b.n	80069a8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	6a38      	ldr	r0, [r7, #32]
 8006986:	f000 fc3b 	bl	8007200 <xQueueReceive>
 800698a:	4603      	mov	r3, r0
 800698c:	2b01      	cmp	r3, #1
 800698e:	d00b      	beq.n	80069a8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006996:	f06f 0301 	mvn.w	r3, #1
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	e004      	b.n	80069a8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800699e:	f06f 0302 	mvn.w	r3, #2
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
 80069a4:	e000      	b.n	80069a8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069a6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	; 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000108 	.word	0x20000108
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4a06      	ldr	r2, [pc, #24]	; (80069e4 <vApplicationGetIdleTaskMemory+0x28>)
 80069cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80069d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2280      	movs	r2, #128	; 0x80
 80069d8:	601a      	str	r2, [r3, #0]
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr
 80069e4:	2000010c 	.word	0x2000010c
 80069e8:	20000168 	.word	0x20000168

080069ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4a07      	ldr	r2, [pc, #28]	; (8006a18 <vApplicationGetTimerTaskMemory+0x2c>)
 80069fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4a06      	ldr	r2, [pc, #24]	; (8006a1c <vApplicationGetTimerTaskMemory+0x30>)
 8006a02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a0a:	601a      	str	r2, [r3, #0]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	20000368 	.word	0x20000368
 8006a1c:	200003c4 	.word	0x200003c4

08006a20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 0208 	add.w	r2, r3, #8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f04f 32ff 	mov.w	r2, #4294967295
 8006a38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f103 0208 	add.w	r2, r3, #8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f103 0208 	add.w	r2, r3, #8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bc80      	pop	{r7}
 8006a5c:	4770      	bx	lr

08006a5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
}
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bc80      	pop	{r7}
 8006aba:	4770      	bx	lr

08006abc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d103      	bne.n	8006adc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	e00c      	b.n	8006af6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e002      	b.n	8006aea <vListInsert+0x2e>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d2f6      	bcs.n	8006ae4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
}
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6892      	ldr	r2, [r2, #8]
 8006b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6852      	ldr	r2, [r2, #4]
 8006b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d103      	bne.n	8006b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	1e5a      	subs	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
	...

08006b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006baa:	f002 fd87 	bl	80096bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bba:	fb01 f303 	mul.w	r3, r1, r3
 8006bbe:	441a      	add	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	441a      	add	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	22ff      	movs	r2, #255	; 0xff
 8006bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	22ff      	movs	r2, #255	; 0xff
 8006bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d114      	bne.n	8006c2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01a      	beq.n	8006c3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3310      	adds	r3, #16
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fb9b 	bl	8008348 <xTaskRemoveFromEventList>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d012      	beq.n	8006c3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c18:	4b0c      	ldr	r3, [pc, #48]	; (8006c4c <xQueueGenericReset+0xcc>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	e009      	b.n	8006c3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3310      	adds	r3, #16
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fef6 	bl	8006a20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	3324      	adds	r3, #36	; 0x24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fef1 	bl	8006a20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c3e:	f002 fd6d 	bl	800971c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c42:	2301      	movs	r3, #1
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	e000ed04 	.word	0xe000ed04

08006c50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08e      	sub	sp, #56	; 0x38
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <xQueueGenericCreateStatic+0x52>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <xQueueGenericCreateStatic+0x56>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueGenericCreateStatic+0x58>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	623b      	str	r3, [r7, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <xQueueGenericCreateStatic+0x7e>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <xQueueGenericCreateStatic+0x82>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueGenericCreateStatic+0x84>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	61fb      	str	r3, [r7, #28]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cee:	2350      	movs	r3, #80	; 0x50
 8006cf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b50      	cmp	r3, #80	; 0x50
 8006cf6:	d00a      	beq.n	8006d0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	61bb      	str	r3, [r7, #24]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f843 	bl	8006dba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3730      	adds	r7, #48	; 0x30
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b08a      	sub	sp, #40	; 0x28
 8006d42:	af02      	add	r7, sp, #8
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	613b      	str	r3, [r7, #16]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d102      	bne.n	8006d74 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
 8006d72:	e004      	b.n	8006d7e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	fb02 f303 	mul.w	r3, r2, r3
 8006d7c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	3350      	adds	r3, #80	; 0x50
 8006d82:	4618      	mov	r0, r3
 8006d84:	f002 fd9a 	bl	80098bc <pvPortMalloc>
 8006d88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00f      	beq.n	8006db0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	3350      	adds	r3, #80	; 0x50
 8006d94:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d9e:	79fa      	ldrb	r2, [r7, #7]
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f805 	bl	8006dba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006db0:	69bb      	ldr	r3, [r7, #24]
	}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3720      	adds	r7, #32
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
 8006dc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e002      	b.n	8006ddc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006de8:	2101      	movs	r1, #1
 8006dea:	69b8      	ldr	r0, [r7, #24]
 8006dec:	f7ff fec8 	bl	8006b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006df8:	bf00      	nop
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	; 0x28
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10a      	bne.n	8006e28 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	61bb      	str	r3, [r7, #24]
}
 8006e24:	bf00      	nop
 8006e26:	e7fe      	b.n	8006e26 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d90a      	bls.n	8006e46 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	617b      	str	r3, [r7, #20]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e46:	2302      	movs	r3, #2
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2100      	movs	r1, #0
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff fefd 	bl	8006c50 <xQueueGenericCreateStatic>
 8006e56:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e64:	69fb      	ldr	r3, [r7, #28]
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	613b      	str	r3, [r7, #16]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d90a      	bls.n	8006eb2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff ff41 	bl	8006d3e <xQueueGenericCreate>
 8006ebc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006eca:	697b      	ldr	r3, [r7, #20]
	}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08e      	sub	sp, #56	; 0x38
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <xQueueGenericSend+0x32>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <xQueueGenericSend+0x40>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <xQueueGenericSend+0x44>
 8006f14:	2301      	movs	r3, #1
 8006f16:	e000      	b.n	8006f1a <xQueueGenericSend+0x46>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <xQueueGenericSend+0x60>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d103      	bne.n	8006f42 <xQueueGenericSend+0x6e>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <xQueueGenericSend+0x72>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <xQueueGenericSend+0x74>
 8006f46:	2300      	movs	r3, #0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <xQueueGenericSend+0x8e>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	623b      	str	r3, [r7, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f62:	f001 fbb3 	bl	80086cc <xTaskGetSchedulerState>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <xQueueGenericSend+0x9e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <xQueueGenericSend+0xa2>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <xQueueGenericSend+0xa4>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	61fb      	str	r3, [r7, #28]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f92:	f002 fb93 	bl	80096bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d302      	bcc.n	8006fa8 <xQueueGenericSend+0xd4>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d129      	bne.n	8006ffc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fae:	f000 fbcd 	bl	800774c <prvCopyDataToQueue>
 8006fb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d010      	beq.n	8006fde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	3324      	adds	r3, #36	; 0x24
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 f9c1 	bl	8008348 <xTaskRemoveFromEventList>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d013      	beq.n	8006ff4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fcc:	4b3f      	ldr	r3, [pc, #252]	; (80070cc <xQueueGenericSend+0x1f8>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	e00a      	b.n	8006ff4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fe4:	4b39      	ldr	r3, [pc, #228]	; (80070cc <xQueueGenericSend+0x1f8>)
 8006fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ff4:	f002 fb92 	bl	800971c <vPortExitCritical>
				return pdPASS;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e063      	b.n	80070c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d103      	bne.n	800700a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007002:	f002 fb8b 	bl	800971c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007006:	2300      	movs	r3, #0
 8007008:	e05c      	b.n	80070c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007010:	f107 0314 	add.w	r3, r7, #20
 8007014:	4618      	mov	r0, r3
 8007016:	f001 f9fb 	bl	8008410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800701a:	2301      	movs	r3, #1
 800701c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800701e:	f002 fb7d 	bl	800971c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007022:	f000 ff5b 	bl	8007edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007026:	f002 fb49 	bl	80096bc <vPortEnterCritical>
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007030:	b25b      	sxtb	r3, r3
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d103      	bne.n	8007040 <xQueueGenericSend+0x16c>
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007046:	b25b      	sxtb	r3, r3
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d103      	bne.n	8007056 <xQueueGenericSend+0x182>
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007056:	f002 fb61 	bl	800971c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800705a:	1d3a      	adds	r2, r7, #4
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f9ea 	bl	800843c <xTaskCheckForTimeOut>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d124      	bne.n	80070b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800706e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007070:	f000 fc64 	bl	800793c <prvIsQueueFull>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d018      	beq.n	80070ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	3310      	adds	r3, #16
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	4611      	mov	r1, r2
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f910 	bl	80082a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800708a:	f000 fbef 	bl	800786c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800708e:	f000 ff33 	bl	8007ef8 <xTaskResumeAll>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	f47f af7c 	bne.w	8006f92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <xQueueGenericSend+0x1f8>)
 800709c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	e772      	b.n	8006f92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ae:	f000 fbdd 	bl	800786c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070b2:	f000 ff21 	bl	8007ef8 <xTaskResumeAll>
 80070b6:	e76c      	b.n	8006f92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070ba:	f000 fbd7 	bl	800786c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070be:	f000 ff1b 	bl	8007ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070c2:	2300      	movs	r3, #0
		}
	}
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3738      	adds	r7, #56	; 0x38
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08e      	sub	sp, #56	; 0x38
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <xQueueGenericSendFromISR+0x3c>
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <xQueueGenericSendFromISR+0x40>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <xQueueGenericSendFromISR+0x42>
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	623b      	str	r3, [r7, #32]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d103      	bne.n	800713a <xQueueGenericSendFromISR+0x6a>
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <xQueueGenericSendFromISR+0x6e>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <xQueueGenericSendFromISR+0x70>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	61fb      	str	r3, [r7, #28]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800715a:	f002 fb71 	bl	8009840 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800715e:	f3ef 8211 	mrs	r2, BASEPRI
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	61ba      	str	r2, [r7, #24]
 8007174:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007176:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007178:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007182:	429a      	cmp	r2, r3
 8007184:	d302      	bcc.n	800718c <xQueueGenericSendFromISR+0xbc>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d12c      	bne.n	80071e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719c:	f000 fad6 	bl	800774c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d112      	bne.n	80071d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d016      	beq.n	80071e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	3324      	adds	r3, #36	; 0x24
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 f8c6 	bl	8008348 <xTaskRemoveFromEventList>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00e      	beq.n	80071e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e007      	b.n	80071e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071d4:	3301      	adds	r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	b25a      	sxtb	r2, r3
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80071e0:	2301      	movs	r3, #1
 80071e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80071e4:	e001      	b.n	80071ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3738      	adds	r7, #56	; 0x38
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08c      	sub	sp, #48	; 0x30
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800720c:	2300      	movs	r3, #0
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <xQueueReceive+0x30>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	623b      	str	r3, [r7, #32]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueReceive+0x3e>
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <xQueueReceive+0x42>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <xQueueReceive+0x44>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <xQueueReceive+0x5e>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	61fb      	str	r3, [r7, #28]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800725e:	f001 fa35 	bl	80086cc <xTaskGetSchedulerState>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <xQueueReceive+0x6e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <xQueueReceive+0x72>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <xQueueReceive+0x74>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10a      	bne.n	800728e <xQueueReceive+0x8e>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	61bb      	str	r3, [r7, #24]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800728e:	f002 fa15 	bl	80096bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d01f      	beq.n	80072de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072a2:	f000 fabd 	bl	8007820 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	1e5a      	subs	r2, r3, #1
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	3310      	adds	r3, #16
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 f844 	bl	8008348 <xTaskRemoveFromEventList>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072c6:	4b3d      	ldr	r3, [pc, #244]	; (80073bc <xQueueReceive+0x1bc>)
 80072c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072d6:	f002 fa21 	bl	800971c <vPortExitCritical>
				return pdPASS;
 80072da:	2301      	movs	r3, #1
 80072dc:	e069      	b.n	80073b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d103      	bne.n	80072ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072e4:	f002 fa1a 	bl	800971c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072e8:	2300      	movs	r3, #0
 80072ea:	e062      	b.n	80073b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072f2:	f107 0310 	add.w	r3, r7, #16
 80072f6:	4618      	mov	r0, r3
 80072f8:	f001 f88a 	bl	8008410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072fc:	2301      	movs	r3, #1
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007300:	f002 fa0c 	bl	800971c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007304:	f000 fdea 	bl	8007edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007308:	f002 f9d8 	bl	80096bc <vPortEnterCritical>
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007312:	b25b      	sxtb	r3, r3
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d103      	bne.n	8007322 <xQueueReceive+0x122>
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007328:	b25b      	sxtb	r3, r3
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d103      	bne.n	8007338 <xQueueReceive+0x138>
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007338:	f002 f9f0 	bl	800971c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800733c:	1d3a      	adds	r2, r7, #4
 800733e:	f107 0310 	add.w	r3, r7, #16
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f001 f879 	bl	800843c <xTaskCheckForTimeOut>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d123      	bne.n	8007398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007352:	f000 fadd 	bl	8007910 <prvIsQueueEmpty>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d017      	beq.n	800738c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	3324      	adds	r3, #36	; 0x24
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f000 ff9f 	bl	80082a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800736a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736c:	f000 fa7e 	bl	800786c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007370:	f000 fdc2 	bl	8007ef8 <xTaskResumeAll>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d189      	bne.n	800728e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800737a:	4b10      	ldr	r3, [pc, #64]	; (80073bc <xQueueReceive+0x1bc>)
 800737c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	e780      	b.n	800728e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f000 fa6d 	bl	800786c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007392:	f000 fdb1 	bl	8007ef8 <xTaskResumeAll>
 8007396:	e77a      	b.n	800728e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800739a:	f000 fa67 	bl	800786c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800739e:	f000 fdab 	bl	8007ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a4:	f000 fab4 	bl	8007910 <prvIsQueueEmpty>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f43f af6f 	beq.w	800728e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3730      	adds	r7, #48	; 0x30
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	; 0x38
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	623b      	str	r3, [r7, #32]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	61fb      	str	r3, [r7, #28]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007410:	f001 f95c 	bl	80086cc <xTaskGetSchedulerState>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d102      	bne.n	8007420 <xQueueSemaphoreTake+0x60>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <xQueueSemaphoreTake+0x64>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <xQueueSemaphoreTake+0x66>
 8007424:	2300      	movs	r3, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	61bb      	str	r3, [r7, #24]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007440:	f002 f93c 	bl	80096bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d024      	beq.n	800749a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	1e5a      	subs	r2, r3, #1
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007460:	f001 fab4 	bl	80089cc <pvTaskIncrementMutexHeldCount>
 8007464:	4602      	mov	r2, r0
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00f      	beq.n	8007492 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	3310      	adds	r3, #16
 8007476:	4618      	mov	r0, r3
 8007478:	f000 ff66 	bl	8008348 <xTaskRemoveFromEventList>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007482:	4b54      	ldr	r3, [pc, #336]	; (80075d4 <xQueueSemaphoreTake+0x214>)
 8007484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007492:	f002 f943 	bl	800971c <vPortExitCritical>
				return pdPASS;
 8007496:	2301      	movs	r3, #1
 8007498:	e097      	b.n	80075ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d111      	bne.n	80074c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	617b      	str	r3, [r7, #20]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80074bc:	f002 f92e 	bl	800971c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074c0:	2300      	movs	r3, #0
 80074c2:	e082      	b.n	80075ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 ff9e 	bl	8008410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074d4:	2301      	movs	r3, #1
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074d8:	f002 f920 	bl	800971c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074dc:	f000 fcfe 	bl	8007edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074e0:	f002 f8ec 	bl	80096bc <vPortEnterCritical>
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ea:	b25b      	sxtb	r3, r3
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d103      	bne.n	80074fa <xQueueSemaphoreTake+0x13a>
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007500:	b25b      	sxtb	r3, r3
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d103      	bne.n	8007510 <xQueueSemaphoreTake+0x150>
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007510:	f002 f904 	bl	800971c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007514:	463a      	mov	r2, r7
 8007516:	f107 030c 	add.w	r3, r7, #12
 800751a:	4611      	mov	r1, r2
 800751c:	4618      	mov	r0, r3
 800751e:	f000 ff8d 	bl	800843c <xTaskCheckForTimeOut>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d132      	bne.n	800758e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800752a:	f000 f9f1 	bl	8007910 <prvIsQueueEmpty>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d026      	beq.n	8007582 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d109      	bne.n	8007550 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800753c:	f002 f8be 	bl	80096bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4618      	mov	r0, r3
 8007546:	f001 f8df 	bl	8008708 <xTaskPriorityInherit>
 800754a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800754c:	f002 f8e6 	bl	800971c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	3324      	adds	r3, #36	; 0x24
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fea5 	bl	80082a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800755e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007560:	f000 f984 	bl	800786c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007564:	f000 fcc8 	bl	8007ef8 <xTaskResumeAll>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f47f af68 	bne.w	8007440 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007570:	4b18      	ldr	r3, [pc, #96]	; (80075d4 <xQueueSemaphoreTake+0x214>)
 8007572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	e75e      	b.n	8007440 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007584:	f000 f972 	bl	800786c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007588:	f000 fcb6 	bl	8007ef8 <xTaskResumeAll>
 800758c:	e758      	b.n	8007440 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800758e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007590:	f000 f96c 	bl	800786c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007594:	f000 fcb0 	bl	8007ef8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800759a:	f000 f9b9 	bl	8007910 <prvIsQueueEmpty>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f43f af4d 	beq.w	8007440 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80075ac:	f002 f886 	bl	80096bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80075b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075b2:	f000 f8b4 	bl	800771e <prvGetDisinheritPriorityAfterTimeout>
 80075b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 f97e 	bl	80088c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80075c4:	f002 f8aa 	bl	800971c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3738      	adds	r7, #56	; 0x38
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08e      	sub	sp, #56	; 0x38
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	623b      	str	r3, [r7, #32]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <xQueueReceiveFromISR+0x3a>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <xQueueReceiveFromISR+0x3e>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <xQueueReceiveFromISR+0x40>
 8007616:	2300      	movs	r3, #0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	61fb      	str	r3, [r7, #28]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007632:	f002 f905 	bl	8009840 <vPortValidateInterruptPriority>
	__asm volatile
 8007636:	f3ef 8211 	mrs	r2, BASEPRI
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	61ba      	str	r2, [r7, #24]
 800764c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800764e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d02f      	beq.n	80076be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800766c:	f000 f8d8 	bl	8007820 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	1e5a      	subs	r2, r3, #1
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007680:	d112      	bne.n	80076a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d016      	beq.n	80076b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	3310      	adds	r3, #16
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fe5a 	bl	8008348 <xTaskRemoveFromEventList>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e007      	b.n	80076b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ac:	3301      	adds	r3, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	b25a      	sxtb	r2, r3
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80076b8:	2301      	movs	r3, #1
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34
 80076bc:	e001      	b.n	80076c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80076be:	2300      	movs	r3, #0
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f383 8811 	msr	BASEPRI, r3
}
 80076cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3738      	adds	r7, #56	; 0x38
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <vQueueDelete+0x28>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	60bb      	str	r3, [r7, #8]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f95b 	bl	80079bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f002 f8e5 	bl	80098e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d006      	beq.n	800773c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e001      	b.n	8007740 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007740:	68fb      	ldr	r3, [r7, #12]
	}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr

0800774c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10d      	bne.n	8007786 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d14d      	bne.n	800780e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	4618      	mov	r0, r3
 8007778:	f001 f834 	bl	80087e4 <xTaskPriorityDisinherit>
 800777c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	605a      	str	r2, [r3, #4]
 8007784:	e043      	b.n	800780e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d119      	bne.n	80077c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6898      	ldr	r0, [r3, #8]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	461a      	mov	r2, r3
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	f002 f8ee 	bl	8009978 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	441a      	add	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d32b      	bcc.n	800780e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	609a      	str	r2, [r3, #8]
 80077be:	e026      	b.n	800780e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	68d8      	ldr	r0, [r3, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	461a      	mov	r2, r3
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	f002 f8d4 	bl	8009978 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	425b      	negs	r3, r3
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d207      	bcs.n	80077fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	425b      	negs	r3, r3
 80077f6:	441a      	add	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d105      	bne.n	800780e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	3b01      	subs	r3, #1
 800780c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007816:	697b      	ldr	r3, [r7, #20]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	441a      	add	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	429a      	cmp	r2, r3
 800784a:	d303      	bcc.n	8007854 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68d9      	ldr	r1, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	461a      	mov	r2, r3
 800785e:	6838      	ldr	r0, [r7, #0]
 8007860:	f002 f88a 	bl	8009978 <memcpy>
	}
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007874:	f001 ff22 	bl	80096bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800787e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007880:	e011      	b.n	80078a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	2b00      	cmp	r3, #0
 8007888:	d012      	beq.n	80078b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3324      	adds	r3, #36	; 0x24
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fd5a 	bl	8008348 <xTaskRemoveFromEventList>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800789a:	f000 fe31 	bl	8008500 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	dce9      	bgt.n	8007882 <prvUnlockQueue+0x16>
 80078ae:	e000      	b.n	80078b2 <prvUnlockQueue+0x46>
					break;
 80078b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80078ba:	f001 ff2f 	bl	800971c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078be:	f001 fefd 	bl	80096bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078ca:	e011      	b.n	80078f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d012      	beq.n	80078fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3310      	adds	r3, #16
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fd35 	bl	8008348 <xTaskRemoveFromEventList>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078e4:	f000 fe0c 	bl	8008500 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dce9      	bgt.n	80078cc <prvUnlockQueue+0x60>
 80078f8:	e000      	b.n	80078fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	22ff      	movs	r2, #255	; 0xff
 8007900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007904:	f001 ff0a 	bl	800971c <vPortExitCritical>
}
 8007908:	bf00      	nop
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007918:	f001 fed0 	bl	80096bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007924:	2301      	movs	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	e001      	b.n	800792e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800792a:	2300      	movs	r3, #0
 800792c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800792e:	f001 fef5 	bl	800971c <vPortExitCritical>

	return xReturn;
 8007932:	68fb      	ldr	r3, [r7, #12]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007944:	f001 feba 	bl	80096bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007950:	429a      	cmp	r2, r3
 8007952:	d102      	bne.n	800795a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	e001      	b.n	800795e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800795e:	f001 fedd 	bl	800971c <vPortExitCritical>

	return xReturn;
 8007962:	68fb      	ldr	r3, [r7, #12]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e014      	b.n	80079a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800797c:	4a0e      	ldr	r2, [pc, #56]	; (80079b8 <vQueueAddToRegistry+0x4c>)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007988:	490b      	ldr	r1, [pc, #44]	; (80079b8 <vQueueAddToRegistry+0x4c>)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007992:	4a09      	ldr	r2, [pc, #36]	; (80079b8 <vQueueAddToRegistry+0x4c>)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	4413      	add	r3, r2
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800799e:	e006      	b.n	80079ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b07      	cmp	r3, #7
 80079aa:	d9e7      	bls.n	800797c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr
 80079b8:	20001104 	.word	0x20001104

080079bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	e016      	b.n	80079f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80079ca:	4a10      	ldr	r2, [pc, #64]	; (8007a0c <vQueueUnregisterQueue+0x50>)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	4413      	add	r3, r2
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d10b      	bne.n	80079f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80079da:	4a0c      	ldr	r2, [pc, #48]	; (8007a0c <vQueueUnregisterQueue+0x50>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2100      	movs	r1, #0
 80079e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80079e4:	4a09      	ldr	r2, [pc, #36]	; (8007a0c <vQueueUnregisterQueue+0x50>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4413      	add	r3, r2
 80079ec:	2200      	movs	r2, #0
 80079ee:	605a      	str	r2, [r3, #4]
				break;
 80079f0:	e006      	b.n	8007a00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b07      	cmp	r3, #7
 80079fc:	d9e5      	bls.n	80079ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20001104 	.word	0x20001104

08007a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a20:	f001 fe4c 	bl	80096bc <vPortEnterCritical>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a30:	d103      	bne.n	8007a3a <vQueueWaitForMessageRestricted+0x2a>
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d103      	bne.n	8007a50 <vQueueWaitForMessageRestricted+0x40>
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a50:	f001 fe64 	bl	800971c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3324      	adds	r3, #36	; 0x24
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fc43 	bl	80082f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a6a:	6978      	ldr	r0, [r7, #20]
 8007a6c:	f7ff fefe 	bl	800786c <prvUnlockQueue>
	}
 8007a70:	bf00      	nop
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af04      	add	r7, sp, #16
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	623b      	str	r3, [r7, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <xTaskCreateStatic+0x46>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	61fb      	str	r3, [r7, #28]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007abe:	235c      	movs	r3, #92	; 0x5c
 8007ac0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8007ac6:	d00a      	beq.n	8007ade <xTaskCreateStatic+0x66>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	61bb      	str	r3, [r7, #24]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01e      	beq.n	8007b22 <xTaskCreateStatic+0xaa>
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01b      	beq.n	8007b22 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007afc:	2300      	movs	r3, #0
 8007afe:	9303      	str	r3, [sp, #12]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	9302      	str	r3, [sp, #8]
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f850 	bl	8007bba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b1c:	f000 f8d4 	bl	8007cc8 <prvAddNewTaskToReadyList>
 8007b20:	e001      	b.n	8007b26 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b26:	697b      	ldr	r3, [r7, #20]
	}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3728      	adds	r7, #40	; 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08c      	sub	sp, #48	; 0x30
 8007b34:	af04      	add	r7, sp, #16
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 feb9 	bl	80098bc <pvPortMalloc>
 8007b4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007b52:	205c      	movs	r0, #92	; 0x5c
 8007b54:	f001 feb2 	bl	80098bc <pvPortMalloc>
 8007b58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
 8007b66:	e005      	b.n	8007b74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b68:	6978      	ldr	r0, [r7, #20]
 8007b6a:	f001 feb9 	bl	80098e0 <vPortFree>
 8007b6e:	e001      	b.n	8007b74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d017      	beq.n	8007baa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b82:	88fa      	ldrh	r2, [r7, #6]
 8007b84:	2300      	movs	r3, #0
 8007b86:	9303      	str	r3, [sp, #12]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	9302      	str	r3, [sp, #8]
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f80e 	bl	8007bba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b9e:	69f8      	ldr	r0, [r7, #28]
 8007ba0:	f000 f892 	bl	8007cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	61bb      	str	r3, [r7, #24]
 8007ba8:	e002      	b.n	8007bb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
	}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b088      	sub	sp, #32
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
 8007bc6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	21a5      	movs	r1, #165	; 0xa5
 8007bd4:	f001 fede 	bl	8009994 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007be2:	3b01      	subs	r3, #1
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f023 0307 	bic.w	r3, r3, #7
 8007bf0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	617b      	str	r3, [r7, #20]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c12:	2300      	movs	r3, #0
 8007c14:	61fb      	str	r3, [r7, #28]
 8007c16:	e012      	b.n	8007c3e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	7819      	ldrb	r1, [r3, #0]
 8007c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	3334      	adds	r3, #52	; 0x34
 8007c28:	460a      	mov	r2, r1
 8007c2a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d006      	beq.n	8007c46 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	2b0f      	cmp	r3, #15
 8007c42:	d9e9      	bls.n	8007c18 <prvInitialiseNewTask+0x5e>
 8007c44:	e000      	b.n	8007c48 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007c46:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b37      	cmp	r3, #55	; 0x37
 8007c54:	d901      	bls.n	8007c5a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c56:	2337      	movs	r3, #55	; 0x37
 8007c58:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c5e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c64:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	2200      	movs	r2, #0
 8007c6a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe fef4 	bl	8006a5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	3318      	adds	r3, #24
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe feef 	bl	8006a5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c94:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	2200      	movs	r2, #0
 8007c9a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	68f9      	ldr	r1, [r7, #12]
 8007ca8:	69b8      	ldr	r0, [r7, #24]
 8007caa:	f001 fc13 	bl	80094d4 <pxPortInitialiseStack>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cd0:	f001 fcf4 	bl	80096bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <prvAddNewTaskToReadyList+0xc4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	4a2c      	ldr	r2, [pc, #176]	; (8007d8c <prvAddNewTaskToReadyList+0xc4>)
 8007cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cde:	4b2c      	ldr	r3, [pc, #176]	; (8007d90 <prvAddNewTaskToReadyList+0xc8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ce6:	4a2a      	ldr	r2, [pc, #168]	; (8007d90 <prvAddNewTaskToReadyList+0xc8>)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cec:	4b27      	ldr	r3, [pc, #156]	; (8007d8c <prvAddNewTaskToReadyList+0xc4>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d110      	bne.n	8007d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cf4:	f000 fc28 	bl	8008548 <prvInitialiseTaskLists>
 8007cf8:	e00d      	b.n	8007d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cfa:	4b26      	ldr	r3, [pc, #152]	; (8007d94 <prvAddNewTaskToReadyList+0xcc>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d02:	4b23      	ldr	r3, [pc, #140]	; (8007d90 <prvAddNewTaskToReadyList+0xc8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d802      	bhi.n	8007d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d10:	4a1f      	ldr	r2, [pc, #124]	; (8007d90 <prvAddNewTaskToReadyList+0xc8>)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d16:	4b20      	ldr	r3, [pc, #128]	; (8007d98 <prvAddNewTaskToReadyList+0xd0>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	4a1e      	ldr	r2, [pc, #120]	; (8007d98 <prvAddNewTaskToReadyList+0xd0>)
 8007d1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d20:	4b1d      	ldr	r3, [pc, #116]	; (8007d98 <prvAddNewTaskToReadyList+0xd0>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2c:	4b1b      	ldr	r3, [pc, #108]	; (8007d9c <prvAddNewTaskToReadyList+0xd4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d903      	bls.n	8007d3c <prvAddNewTaskToReadyList+0x74>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <prvAddNewTaskToReadyList+0xd4>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d40:	4613      	mov	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <prvAddNewTaskToReadyList+0xd8>)
 8007d4a:	441a      	add	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7fe fe8f 	bl	8006a76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d58:	f001 fce0 	bl	800971c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <prvAddNewTaskToReadyList+0xcc>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00e      	beq.n	8007d82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <prvAddNewTaskToReadyList+0xc8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d207      	bcs.n	8007d82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d72:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <prvAddNewTaskToReadyList+0xdc>)
 8007d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000c98 	.word	0x20000c98
 8007d90:	200007c4 	.word	0x200007c4
 8007d94:	20000ca4 	.word	0x20000ca4
 8007d98:	20000cb4 	.word	0x20000cb4
 8007d9c:	20000ca0 	.word	0x20000ca0
 8007da0:	200007c8 	.word	0x200007c8
 8007da4:	e000ed04 	.word	0xe000ed04

08007da8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d017      	beq.n	8007dea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007dba:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <vTaskDelay+0x60>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <vTaskDelay+0x30>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	60bb      	str	r3, [r7, #8]
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007dd8:	f000 f880 	bl	8007edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ddc:	2100      	movs	r1, #0
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 ffbe 	bl	8008d60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007de4:	f000 f888 	bl	8007ef8 <xTaskResumeAll>
 8007de8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d107      	bne.n	8007e00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007df0:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <vTaskDelay+0x64>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e00:	bf00      	nop
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20000cc0 	.word	0x20000cc0
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	; 0x28
 8007e14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e1e:	463a      	mov	r2, r7
 8007e20:	1d39      	adds	r1, r7, #4
 8007e22:	f107 0308 	add.w	r3, r7, #8
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fdc8 	bl	80069bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	9202      	str	r2, [sp, #8]
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	2300      	movs	r3, #0
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	4921      	ldr	r1, [pc, #132]	; (8007ec4 <vTaskStartScheduler+0xb4>)
 8007e40:	4821      	ldr	r0, [pc, #132]	; (8007ec8 <vTaskStartScheduler+0xb8>)
 8007e42:	f7ff fe19 	bl	8007a78 <xTaskCreateStatic>
 8007e46:	4603      	mov	r3, r0
 8007e48:	4a20      	ldr	r2, [pc, #128]	; (8007ecc <vTaskStartScheduler+0xbc>)
 8007e4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e4c:	4b1f      	ldr	r3, [pc, #124]	; (8007ecc <vTaskStartScheduler+0xbc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e54:	2301      	movs	r3, #1
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e001      	b.n	8007e5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d102      	bne.n	8007e6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e64:	f000 ffd0 	bl	8008e08 <xTimerCreateTimerTask>
 8007e68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d116      	bne.n	8007e9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	613b      	str	r3, [r7, #16]
}
 8007e82:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e84:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <vTaskStartScheduler+0xc0>)
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e8c:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <vTaskStartScheduler+0xc4>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <vTaskStartScheduler+0xc8>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e98:	f001 fb9e 	bl	80095d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e9c:	e00e      	b.n	8007ebc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d10a      	bne.n	8007ebc <vTaskStartScheduler+0xac>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	60fb      	str	r3, [r7, #12]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <vTaskStartScheduler+0xaa>
}
 8007ebc:	bf00      	nop
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	0800a2d4 	.word	0x0800a2d4
 8007ec8:	08008519 	.word	0x08008519
 8007ecc:	20000cbc 	.word	0x20000cbc
 8007ed0:	20000cb8 	.word	0x20000cb8
 8007ed4:	20000ca4 	.word	0x20000ca4
 8007ed8:	20000c9c 	.word	0x20000c9c

08007edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <vTaskSuspendAll+0x18>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a03      	ldr	r2, [pc, #12]	; (8007ef4 <vTaskSuspendAll+0x18>)
 8007ee8:	6013      	str	r3, [r2, #0]
}
 8007eea:	bf00      	nop
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20000cc0 	.word	0x20000cc0

08007ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f06:	4b42      	ldr	r3, [pc, #264]	; (8008010 <xTaskResumeAll+0x118>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	603b      	str	r3, [r7, #0]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f24:	f001 fbca 	bl	80096bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f28:	4b39      	ldr	r3, [pc, #228]	; (8008010 <xTaskResumeAll+0x118>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	4a38      	ldr	r2, [pc, #224]	; (8008010 <xTaskResumeAll+0x118>)
 8007f30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f32:	4b37      	ldr	r3, [pc, #220]	; (8008010 <xTaskResumeAll+0x118>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d162      	bne.n	8008000 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f3a:	4b36      	ldr	r3, [pc, #216]	; (8008014 <xTaskResumeAll+0x11c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d05e      	beq.n	8008000 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f42:	e02f      	b.n	8007fa4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f44:	4b34      	ldr	r3, [pc, #208]	; (8008018 <xTaskResumeAll+0x120>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3318      	adds	r3, #24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7fe fdeb 	bl	8006b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe fde6 	bl	8006b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	4b2d      	ldr	r3, [pc, #180]	; (800801c <xTaskResumeAll+0x124>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d903      	bls.n	8007f74 <xTaskResumeAll+0x7c>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	4a2a      	ldr	r2, [pc, #168]	; (800801c <xTaskResumeAll+0x124>)
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4a27      	ldr	r2, [pc, #156]	; (8008020 <xTaskResumeAll+0x128>)
 8007f82:	441a      	add	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3304      	adds	r3, #4
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f7fe fd73 	bl	8006a76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4b23      	ldr	r3, [pc, #140]	; (8008024 <xTaskResumeAll+0x12c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d302      	bcc.n	8007fa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f9e:	4b22      	ldr	r3, [pc, #136]	; (8008028 <xTaskResumeAll+0x130>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fa4:	4b1c      	ldr	r3, [pc, #112]	; (8008018 <xTaskResumeAll+0x120>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1cb      	bne.n	8007f44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fb2:	f000 fb67 	bl	8008684 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007fb6:	4b1d      	ldr	r3, [pc, #116]	; (800802c <xTaskResumeAll+0x134>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d010      	beq.n	8007fe4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fc2:	f000 f857 	bl	8008074 <xTaskIncrementTick>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fcc:	4b16      	ldr	r3, [pc, #88]	; (8008028 <xTaskResumeAll+0x130>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1f1      	bne.n	8007fc2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007fde:	4b13      	ldr	r3, [pc, #76]	; (800802c <xTaskResumeAll+0x134>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fe4:	4b10      	ldr	r3, [pc, #64]	; (8008028 <xTaskResumeAll+0x130>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d009      	beq.n	8008000 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ff0:	4b0f      	ldr	r3, [pc, #60]	; (8008030 <xTaskResumeAll+0x138>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008000:	f001 fb8c 	bl	800971c <vPortExitCritical>

	return xAlreadyYielded;
 8008004:	68bb      	ldr	r3, [r7, #8]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20000cc0 	.word	0x20000cc0
 8008014:	20000c98 	.word	0x20000c98
 8008018:	20000c58 	.word	0x20000c58
 800801c:	20000ca0 	.word	0x20000ca0
 8008020:	200007c8 	.word	0x200007c8
 8008024:	200007c4 	.word	0x200007c4
 8008028:	20000cac 	.word	0x20000cac
 800802c:	20000ca8 	.word	0x20000ca8
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800803a:	4b04      	ldr	r3, [pc, #16]	; (800804c <xTaskGetTickCount+0x18>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008040:	687b      	ldr	r3, [r7, #4]
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr
 800804c:	20000c9c 	.word	0x20000c9c

08008050 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008056:	f001 fbf3 	bl	8009840 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800805a:	2300      	movs	r3, #0
 800805c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800805e:	4b04      	ldr	r3, [pc, #16]	; (8008070 <xTaskGetTickCountFromISR+0x20>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008064:	683b      	ldr	r3, [r7, #0]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000c9c 	.word	0x20000c9c

08008074 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800807e:	4b51      	ldr	r3, [pc, #324]	; (80081c4 <xTaskIncrementTick+0x150>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f040 808e 	bne.w	80081a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008088:	4b4f      	ldr	r3, [pc, #316]	; (80081c8 <xTaskIncrementTick+0x154>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008090:	4a4d      	ldr	r2, [pc, #308]	; (80081c8 <xTaskIncrementTick+0x154>)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d120      	bne.n	80080de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800809c:	4b4b      	ldr	r3, [pc, #300]	; (80081cc <xTaskIncrementTick+0x158>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <xTaskIncrementTick+0x48>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	603b      	str	r3, [r7, #0]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <xTaskIncrementTick+0x46>
 80080bc:	4b43      	ldr	r3, [pc, #268]	; (80081cc <xTaskIncrementTick+0x158>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	4b43      	ldr	r3, [pc, #268]	; (80081d0 <xTaskIncrementTick+0x15c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a41      	ldr	r2, [pc, #260]	; (80081cc <xTaskIncrementTick+0x158>)
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	4a41      	ldr	r2, [pc, #260]	; (80081d0 <xTaskIncrementTick+0x15c>)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	4b40      	ldr	r3, [pc, #256]	; (80081d4 <xTaskIncrementTick+0x160>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	4a3f      	ldr	r2, [pc, #252]	; (80081d4 <xTaskIncrementTick+0x160>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	f000 fad3 	bl	8008684 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080de:	4b3e      	ldr	r3, [pc, #248]	; (80081d8 <xTaskIncrementTick+0x164>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d34e      	bcc.n	8008186 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080e8:	4b38      	ldr	r3, [pc, #224]	; (80081cc <xTaskIncrementTick+0x158>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <xTaskIncrementTick+0x82>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <xTaskIncrementTick+0x84>
 80080f6:	2300      	movs	r3, #0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fc:	4b36      	ldr	r3, [pc, #216]	; (80081d8 <xTaskIncrementTick+0x164>)
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008102:	601a      	str	r2, [r3, #0]
					break;
 8008104:	e03f      	b.n	8008186 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008106:	4b31      	ldr	r3, [pc, #196]	; (80081cc <xTaskIncrementTick+0x158>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	429a      	cmp	r2, r3
 800811c:	d203      	bcs.n	8008126 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800811e:	4a2e      	ldr	r2, [pc, #184]	; (80081d8 <xTaskIncrementTick+0x164>)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6013      	str	r3, [r2, #0]
						break;
 8008124:	e02f      	b.n	8008186 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	3304      	adds	r3, #4
 800812a:	4618      	mov	r0, r3
 800812c:	f7fe fcfe 	bl	8006b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	2b00      	cmp	r3, #0
 8008136:	d004      	beq.n	8008142 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	3318      	adds	r3, #24
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fcf5 	bl	8006b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008146:	4b25      	ldr	r3, [pc, #148]	; (80081dc <xTaskIncrementTick+0x168>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d903      	bls.n	8008156 <xTaskIncrementTick+0xe2>
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	4a22      	ldr	r2, [pc, #136]	; (80081dc <xTaskIncrementTick+0x168>)
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <xTaskIncrementTick+0x16c>)
 8008164:	441a      	add	r2, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	3304      	adds	r3, #4
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f7fe fc82 	bl	8006a76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008176:	4b1b      	ldr	r3, [pc, #108]	; (80081e4 <xTaskIncrementTick+0x170>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	429a      	cmp	r2, r3
 800817e:	d3b3      	bcc.n	80080e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008180:	2301      	movs	r3, #1
 8008182:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008184:	e7b0      	b.n	80080e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008186:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <xTaskIncrementTick+0x170>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818c:	4914      	ldr	r1, [pc, #80]	; (80081e0 <xTaskIncrementTick+0x16c>)
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d907      	bls.n	80081ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800819e:	2301      	movs	r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e004      	b.n	80081ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80081a4:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <xTaskIncrementTick+0x174>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	4a0f      	ldr	r2, [pc, #60]	; (80081e8 <xTaskIncrementTick+0x174>)
 80081ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <xTaskIncrementTick+0x178>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80081ba:	697b      	ldr	r3, [r7, #20]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20000cc0 	.word	0x20000cc0
 80081c8:	20000c9c 	.word	0x20000c9c
 80081cc:	20000c50 	.word	0x20000c50
 80081d0:	20000c54 	.word	0x20000c54
 80081d4:	20000cb0 	.word	0x20000cb0
 80081d8:	20000cb8 	.word	0x20000cb8
 80081dc:	20000ca0 	.word	0x20000ca0
 80081e0:	200007c8 	.word	0x200007c8
 80081e4:	200007c4 	.word	0x200007c4
 80081e8:	20000ca8 	.word	0x20000ca8
 80081ec:	20000cac 	.word	0x20000cac

080081f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081f6:	4b27      	ldr	r3, [pc, #156]	; (8008294 <vTaskSwitchContext+0xa4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081fe:	4b26      	ldr	r3, [pc, #152]	; (8008298 <vTaskSwitchContext+0xa8>)
 8008200:	2201      	movs	r2, #1
 8008202:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008204:	e041      	b.n	800828a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008206:	4b24      	ldr	r3, [pc, #144]	; (8008298 <vTaskSwitchContext+0xa8>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <vTaskSwitchContext+0xac>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	e010      	b.n	8008236 <vTaskSwitchContext+0x46>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <vTaskSwitchContext+0x40>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	607b      	str	r3, [r7, #4]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <vTaskSwitchContext+0x3e>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3b01      	subs	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	491a      	ldr	r1, [pc, #104]	; (80082a0 <vTaskSwitchContext+0xb0>)
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0e4      	beq.n	8008214 <vTaskSwitchContext+0x24>
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	4613      	mov	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4413      	add	r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4a12      	ldr	r2, [pc, #72]	; (80082a0 <vTaskSwitchContext+0xb0>)
 8008256:	4413      	add	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3308      	adds	r3, #8
 800826c:	429a      	cmp	r2, r3
 800826e:	d104      	bne.n	800827a <vTaskSwitchContext+0x8a>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	605a      	str	r2, [r3, #4]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4a08      	ldr	r2, [pc, #32]	; (80082a4 <vTaskSwitchContext+0xb4>)
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	4a05      	ldr	r2, [pc, #20]	; (800829c <vTaskSwitchContext+0xac>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6013      	str	r3, [r2, #0]
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr
 8008294:	20000cc0 	.word	0x20000cc0
 8008298:	20000cac 	.word	0x20000cac
 800829c:	20000ca0 	.word	0x20000ca0
 80082a0:	200007c8 	.word	0x200007c8
 80082a4:	200007c4 	.word	0x200007c4

080082a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	60fb      	str	r3, [r7, #12]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082ce:	4b07      	ldr	r3, [pc, #28]	; (80082ec <vTaskPlaceOnEventList+0x44>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3318      	adds	r3, #24
 80082d4:	4619      	mov	r1, r3
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fe fbf0 	bl	8006abc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082dc:	2101      	movs	r1, #1
 80082de:	6838      	ldr	r0, [r7, #0]
 80082e0:	f000 fd3e 	bl	8008d60 <prvAddCurrentTaskToDelayedList>
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200007c4 	.word	0x200007c4

080082f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	617b      	str	r3, [r7, #20]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008318:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <vTaskPlaceOnEventListRestricted+0x54>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3318      	adds	r3, #24
 800831e:	4619      	mov	r1, r3
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7fe fba8 	bl	8006a76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	68b8      	ldr	r0, [r7, #8]
 8008336:	f000 fd13 	bl	8008d60 <prvAddCurrentTaskToDelayedList>
	}
 800833a:	bf00      	nop
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200007c4 	.word	0x200007c4

08008348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	60fb      	str	r3, [r7, #12]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	3318      	adds	r3, #24
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe fbd7 	bl	8006b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800837e:	4b1e      	ldr	r3, [pc, #120]	; (80083f8 <xTaskRemoveFromEventList+0xb0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d11d      	bne.n	80083c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	3304      	adds	r3, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fbce 	bl	8006b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008394:	4b19      	ldr	r3, [pc, #100]	; (80083fc <xTaskRemoveFromEventList+0xb4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d903      	bls.n	80083a4 <xTaskRemoveFromEventList+0x5c>
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	4a16      	ldr	r2, [pc, #88]	; (80083fc <xTaskRemoveFromEventList+0xb4>)
 80083a2:	6013      	str	r3, [r2, #0]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4a13      	ldr	r2, [pc, #76]	; (8008400 <xTaskRemoveFromEventList+0xb8>)
 80083b2:	441a      	add	r2, r3
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4619      	mov	r1, r3
 80083ba:	4610      	mov	r0, r2
 80083bc:	f7fe fb5b 	bl	8006a76 <vListInsertEnd>
 80083c0:	e005      	b.n	80083ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	3318      	adds	r3, #24
 80083c6:	4619      	mov	r1, r3
 80083c8:	480e      	ldr	r0, [pc, #56]	; (8008404 <xTaskRemoveFromEventList+0xbc>)
 80083ca:	f7fe fb54 	bl	8006a76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	4b0d      	ldr	r3, [pc, #52]	; (8008408 <xTaskRemoveFromEventList+0xc0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	429a      	cmp	r2, r3
 80083da:	d905      	bls.n	80083e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083e0:	4b0a      	ldr	r3, [pc, #40]	; (800840c <xTaskRemoveFromEventList+0xc4>)
 80083e2:	2201      	movs	r2, #1
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	e001      	b.n	80083ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80083e8:	2300      	movs	r3, #0
 80083ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80083ec:	697b      	ldr	r3, [r7, #20]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000cc0 	.word	0x20000cc0
 80083fc:	20000ca0 	.word	0x20000ca0
 8008400:	200007c8 	.word	0x200007c8
 8008404:	20000c58 	.word	0x20000c58
 8008408:	200007c4 	.word	0x200007c4
 800840c:	20000cac 	.word	0x20000cac

08008410 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008418:	4b06      	ldr	r3, [pc, #24]	; (8008434 <vTaskInternalSetTimeOutState+0x24>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <vTaskInternalSetTimeOutState+0x28>)
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20000cb0 	.word	0x20000cb0
 8008438:	20000c9c 	.word	0x20000c9c

0800843c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	613b      	str	r3, [r7, #16]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	60fb      	str	r3, [r7, #12]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800847e:	f001 f91d 	bl	80096bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008482:	4b1d      	ldr	r3, [pc, #116]	; (80084f8 <xTaskCheckForTimeOut+0xbc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849a:	d102      	bne.n	80084a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	61fb      	str	r3, [r7, #28]
 80084a0:	e023      	b.n	80084ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b15      	ldr	r3, [pc, #84]	; (80084fc <xTaskCheckForTimeOut+0xc0>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d007      	beq.n	80084be <xTaskCheckForTimeOut+0x82>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d302      	bcc.n	80084be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	61fb      	str	r3, [r7, #28]
 80084bc:	e015      	b.n	80084ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d20b      	bcs.n	80084e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	1ad2      	subs	r2, r2, r3
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff ff9b 	bl	8008410 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	e004      	b.n	80084ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80084ea:	f001 f917 	bl	800971c <vPortExitCritical>

	return xReturn;
 80084ee:	69fb      	ldr	r3, [r7, #28]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3720      	adds	r7, #32
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000c9c 	.word	0x20000c9c
 80084fc:	20000cb0 	.word	0x20000cb0

08008500 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008504:	4b03      	ldr	r3, [pc, #12]	; (8008514 <vTaskMissedYield+0x14>)
 8008506:	2201      	movs	r2, #1
 8008508:	601a      	str	r2, [r3, #0]
}
 800850a:	bf00      	nop
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000cac 	.word	0x20000cac

08008518 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008520:	f000 f852 	bl	80085c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008524:	4b06      	ldr	r3, [pc, #24]	; (8008540 <prvIdleTask+0x28>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d9f9      	bls.n	8008520 <prvIdleTask+0x8>
			{
				taskYIELD();
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <prvIdleTask+0x2c>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800853c:	e7f0      	b.n	8008520 <prvIdleTask+0x8>
 800853e:	bf00      	nop
 8008540:	200007c8 	.word	0x200007c8
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800854e:	2300      	movs	r3, #0
 8008550:	607b      	str	r3, [r7, #4]
 8008552:	e00c      	b.n	800856e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4a12      	ldr	r2, [pc, #72]	; (80085a8 <prvInitialiseTaskLists+0x60>)
 8008560:	4413      	add	r3, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe fa5c 	bl	8006a20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3301      	adds	r3, #1
 800856c:	607b      	str	r3, [r7, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b37      	cmp	r3, #55	; 0x37
 8008572:	d9ef      	bls.n	8008554 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008574:	480d      	ldr	r0, [pc, #52]	; (80085ac <prvInitialiseTaskLists+0x64>)
 8008576:	f7fe fa53 	bl	8006a20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800857a:	480d      	ldr	r0, [pc, #52]	; (80085b0 <prvInitialiseTaskLists+0x68>)
 800857c:	f7fe fa50 	bl	8006a20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008580:	480c      	ldr	r0, [pc, #48]	; (80085b4 <prvInitialiseTaskLists+0x6c>)
 8008582:	f7fe fa4d 	bl	8006a20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008586:	480c      	ldr	r0, [pc, #48]	; (80085b8 <prvInitialiseTaskLists+0x70>)
 8008588:	f7fe fa4a 	bl	8006a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800858c:	480b      	ldr	r0, [pc, #44]	; (80085bc <prvInitialiseTaskLists+0x74>)
 800858e:	f7fe fa47 	bl	8006a20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008592:	4b0b      	ldr	r3, [pc, #44]	; (80085c0 <prvInitialiseTaskLists+0x78>)
 8008594:	4a05      	ldr	r2, [pc, #20]	; (80085ac <prvInitialiseTaskLists+0x64>)
 8008596:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <prvInitialiseTaskLists+0x7c>)
 800859a:	4a05      	ldr	r2, [pc, #20]	; (80085b0 <prvInitialiseTaskLists+0x68>)
 800859c:	601a      	str	r2, [r3, #0]
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200007c8 	.word	0x200007c8
 80085ac:	20000c28 	.word	0x20000c28
 80085b0:	20000c3c 	.word	0x20000c3c
 80085b4:	20000c58 	.word	0x20000c58
 80085b8:	20000c6c 	.word	0x20000c6c
 80085bc:	20000c84 	.word	0x20000c84
 80085c0:	20000c50 	.word	0x20000c50
 80085c4:	20000c54 	.word	0x20000c54

080085c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085ce:	e019      	b.n	8008604 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085d0:	f001 f874 	bl	80096bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085d4:	4b10      	ldr	r3, [pc, #64]	; (8008618 <prvCheckTasksWaitingTermination+0x50>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe faa3 	bl	8006b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085e6:	4b0d      	ldr	r3, [pc, #52]	; (800861c <prvCheckTasksWaitingTermination+0x54>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	4a0b      	ldr	r2, [pc, #44]	; (800861c <prvCheckTasksWaitingTermination+0x54>)
 80085ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <prvCheckTasksWaitingTermination+0x58>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4a0a      	ldr	r2, [pc, #40]	; (8008620 <prvCheckTasksWaitingTermination+0x58>)
 80085f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80085fa:	f001 f88f 	bl	800971c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f810 	bl	8008624 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008604:	4b06      	ldr	r3, [pc, #24]	; (8008620 <prvCheckTasksWaitingTermination+0x58>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e1      	bne.n	80085d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000c6c 	.word	0x20000c6c
 800861c:	20000c98 	.word	0x20000c98
 8008620:	20000c80 	.word	0x20000c80

08008624 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008632:	2b00      	cmp	r3, #0
 8008634:	d108      	bne.n	8008648 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	4618      	mov	r0, r3
 800863c:	f001 f950 	bl	80098e0 <vPortFree>
				vPortFree( pxTCB );
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 f94d 	bl	80098e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008646:	e018      	b.n	800867a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800864e:	2b01      	cmp	r3, #1
 8008650:	d103      	bne.n	800865a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f001 f944 	bl	80098e0 <vPortFree>
	}
 8008658:	e00f      	b.n	800867a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008660:	2b02      	cmp	r3, #2
 8008662:	d00a      	beq.n	800867a <prvDeleteTCB+0x56>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	60fb      	str	r3, [r7, #12]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <prvDeleteTCB+0x54>
	}
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <prvResetNextTaskUnblockTime+0x40>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <prvResetNextTaskUnblockTime+0x14>
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <prvResetNextTaskUnblockTime+0x16>
 8008698:	2300      	movs	r3, #0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d004      	beq.n	80086a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800869e:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <prvResetNextTaskUnblockTime+0x44>)
 80086a0:	f04f 32ff 	mov.w	r2, #4294967295
 80086a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086a6:	e008      	b.n	80086ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086a8:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <prvResetNextTaskUnblockTime+0x40>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	4a04      	ldr	r2, [pc, #16]	; (80086c8 <prvResetNextTaskUnblockTime+0x44>)
 80086b8:	6013      	str	r3, [r2, #0]
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr
 80086c4:	20000c50 	.word	0x20000c50
 80086c8:	20000cb8 	.word	0x20000cb8

080086cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086d2:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <xTaskGetSchedulerState+0x34>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086da:	2301      	movs	r3, #1
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	e008      	b.n	80086f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e0:	4b08      	ldr	r3, [pc, #32]	; (8008704 <xTaskGetSchedulerState+0x38>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086e8:	2302      	movs	r3, #2
 80086ea:	607b      	str	r3, [r7, #4]
 80086ec:	e001      	b.n	80086f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086ee:	2300      	movs	r3, #0
 80086f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086f2:	687b      	ldr	r3, [r7, #4]
	}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000ca4 	.word	0x20000ca4
 8008704:	20000cc0 	.word	0x20000cc0

08008708 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008714:	2300      	movs	r3, #0
 8008716:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d056      	beq.n	80087cc <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	4b2d      	ldr	r3, [pc, #180]	; (80087d8 <xTaskPriorityInherit+0xd0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	429a      	cmp	r2, r3
 800872a:	d246      	bcs.n	80087ba <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	db06      	blt.n	8008742 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008734:	4b28      	ldr	r3, [pc, #160]	; (80087d8 <xTaskPriorityInherit+0xd0>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6959      	ldr	r1, [r3, #20]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4a22      	ldr	r2, [pc, #136]	; (80087dc <xTaskPriorityInherit+0xd4>)
 8008754:	4413      	add	r3, r2
 8008756:	4299      	cmp	r1, r3
 8008758:	d101      	bne.n	800875e <xTaskPriorityInherit+0x56>
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <xTaskPriorityInherit+0x58>
 800875e:	2300      	movs	r3, #0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d022      	beq.n	80087aa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	3304      	adds	r3, #4
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe f9df 	bl	8006b2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800876e:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <xTaskPriorityInherit+0xd0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4b18      	ldr	r3, [pc, #96]	; (80087e0 <xTaskPriorityInherit+0xd8>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d903      	bls.n	800878c <xTaskPriorityInherit+0x84>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008788:	4a15      	ldr	r2, [pc, #84]	; (80087e0 <xTaskPriorityInherit+0xd8>)
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4a10      	ldr	r2, [pc, #64]	; (80087dc <xTaskPriorityInherit+0xd4>)
 800879a:	441a      	add	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f7fe f967 	bl	8006a76 <vListInsertEnd>
 80087a8:	e004      	b.n	80087b4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <xTaskPriorityInherit+0xd0>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80087b4:	2301      	movs	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	e008      	b.n	80087cc <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087be:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <xTaskPriorityInherit+0xd0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d201      	bcs.n	80087cc <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087cc:	68fb      	ldr	r3, [r7, #12]
	}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200007c4 	.word	0x200007c4
 80087dc:	200007c8 	.word	0x200007c8
 80087e0:	20000ca0 	.word	0x20000ca0

080087e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d056      	beq.n	80088a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087fa:	4b2e      	ldr	r3, [pc, #184]	; (80088b4 <xTaskPriorityDisinherit+0xd0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	429a      	cmp	r2, r3
 8008802:	d00a      	beq.n	800881a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	60fb      	str	r3, [r7, #12]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60bb      	str	r3, [r7, #8]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883c:	1e5a      	subs	r2, r3, #1
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884a:	429a      	cmp	r2, r3
 800884c:	d02c      	beq.n	80088a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008852:	2b00      	cmp	r3, #0
 8008854:	d128      	bne.n	80088a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	3304      	adds	r3, #4
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe f966 	bl	8006b2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <xTaskPriorityDisinherit+0xd4>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d903      	bls.n	8008888 <xTaskPriorityDisinherit+0xa4>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a0c      	ldr	r2, [pc, #48]	; (80088b8 <xTaskPriorityDisinherit+0xd4>)
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4a09      	ldr	r2, [pc, #36]	; (80088bc <xTaskPriorityDisinherit+0xd8>)
 8008896:	441a      	add	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7fe f8e9 	bl	8006a76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088a8:	697b      	ldr	r3, [r7, #20]
	}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	200007c4 	.word	0x200007c4
 80088b8:	20000ca0 	.word	0x20000ca0
 80088bc:	200007c8 	.word	0x200007c8

080088c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80088ce:	2301      	movs	r3, #1
 80088d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d06f      	beq.n	80089b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	e7fe      	b.n	80088f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d902      	bls.n	8008906 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	61fb      	str	r3, [r7, #28]
 8008904:	e002      	b.n	800890c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	429a      	cmp	r2, r3
 8008914:	d050      	beq.n	80089b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	429a      	cmp	r2, r3
 800891e:	d14b      	bne.n	80089b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	429a      	cmp	r2, r3
 8008928:	d10a      	bne.n	8008940 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	60bb      	str	r3, [r7, #8]
}
 800893c:	bf00      	nop
 800893e:	e7fe      	b.n	800893e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	69fa      	ldr	r2, [r7, #28]
 800894a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	db04      	blt.n	800895e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	6959      	ldr	r1, [r3, #20]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4613      	mov	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4a15      	ldr	r2, [pc, #84]	; (80089c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800896e:	4413      	add	r3, r2
 8008970:	4299      	cmp	r1, r3
 8008972:	d101      	bne.n	8008978 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008978:	2300      	movs	r3, #0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d01c      	beq.n	80089b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	3304      	adds	r3, #4
 8008982:	4618      	mov	r0, r3
 8008984:	f7fe f8d2 	bl	8006b2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d903      	bls.n	800899c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	4a0b      	ldr	r2, [pc, #44]	; (80089c8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800899a:	6013      	str	r3, [r2, #0]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	4613      	mov	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	4a06      	ldr	r2, [pc, #24]	; (80089c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80089aa:	441a      	add	r2, r3
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	3304      	adds	r3, #4
 80089b0:	4619      	mov	r1, r3
 80089b2:	4610      	mov	r0, r2
 80089b4:	f7fe f85f 	bl	8006a76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089b8:	bf00      	nop
 80089ba:	3720      	adds	r7, #32
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	200007c4 	.word	0x200007c4
 80089c4:	200007c8 	.word	0x200007c8
 80089c8:	20000ca0 	.word	0x20000ca0

080089cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089de:	3201      	adds	r2, #1
 80089e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80089e2:	4b03      	ldr	r3, [pc, #12]	; (80089f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80089e4:	681b      	ldr	r3, [r3, #0]
	}
 80089e6:	4618      	mov	r0, r3
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	200007c4 	.word	0x200007c4

080089f4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80089fe:	f000 fe5d 	bl	80096bc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008a02:	4b1e      	ldr	r3, [pc, #120]	; (8008a7c <ulTaskNotifyTake+0x88>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d113      	bne.n	8008a34 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008a0c:	4b1b      	ldr	r3, [pc, #108]	; (8008a7c <ulTaskNotifyTake+0x88>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00b      	beq.n	8008a34 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	6838      	ldr	r0, [r7, #0]
 8008a20:	f000 f99e 	bl	8008d60 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <ulTaskNotifyTake+0x8c>)
 8008a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a34:	f000 fe72 	bl	800971c <vPortExitCritical>

		taskENTER_CRITICAL();
 8008a38:	f000 fe40 	bl	80096bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <ulTaskNotifyTake+0x88>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a42:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00c      	beq.n	8008a64 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008a50:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <ulTaskNotifyTake+0x88>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2200      	movs	r2, #0
 8008a56:	655a      	str	r2, [r3, #84]	; 0x54
 8008a58:	e004      	b.n	8008a64 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <ulTaskNotifyTake+0x88>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	3a01      	subs	r2, #1
 8008a62:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a64:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <ulTaskNotifyTake+0x88>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008a6e:	f000 fe55 	bl	800971c <vPortExitCritical>

		return ulReturn;
 8008a72:	68fb      	ldr	r3, [r7, #12]
	}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	200007c4 	.word	0x200007c4
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08a      	sub	sp, #40	; 0x28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	4613      	mov	r3, r2
 8008a92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008a94:	2301      	movs	r3, #1
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <xTaskGenericNotify+0x30>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	61bb      	str	r3, [r7, #24]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008ab8:	f000 fe00 	bl	80096bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008ad0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d828      	bhi.n	8008b32 <xTaskGenericNotify+0xae>
 8008ae0:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <xTaskGenericNotify+0x64>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008b33 	.word	0x08008b33
 8008aec:	08008afd 	.word	0x08008afd
 8008af0:	08008b0b 	.word	0x08008b0b
 8008af4:	08008b17 	.word	0x08008b17
 8008af8:	08008b1f 	.word	0x08008b1f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008b08:	e013      	b.n	8008b32 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008b14:	e00d      	b.n	8008b32 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008b1c:	e009      	b.n	8008b32 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b1e:	7ffb      	ldrb	r3, [r7, #31]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d003      	beq.n	8008b2c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008b2a:	e001      	b.n	8008b30 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008b30:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008b32:	7ffb      	ldrb	r3, [r7, #31]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d13a      	bne.n	8008bae <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd fff5 	bl	8006b2c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b46:	4b1d      	ldr	r3, [pc, #116]	; (8008bbc <xTaskGenericNotify+0x138>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d903      	bls.n	8008b56 <xTaskGenericNotify+0xd2>
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b52:	4a1a      	ldr	r2, [pc, #104]	; (8008bbc <xTaskGenericNotify+0x138>)
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4a17      	ldr	r2, [pc, #92]	; (8008bc0 <xTaskGenericNotify+0x13c>)
 8008b64:	441a      	add	r2, r3
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	4610      	mov	r0, r2
 8008b6e:	f7fd ff82 	bl	8006a76 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <xTaskGenericNotify+0x10c>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	617b      	str	r3, [r7, #20]
}
 8008b8c:	bf00      	nop
 8008b8e:	e7fe      	b.n	8008b8e <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b94:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <xTaskGenericNotify+0x140>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d907      	bls.n	8008bae <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <xTaskGenericNotify+0x144>)
 8008ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008bae:	f000 fdb5 	bl	800971c <vPortExitCritical>

		return xReturn;
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3728      	adds	r7, #40	; 0x28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000ca0 	.word	0x20000ca0
 8008bc0:	200007c8 	.word	0x200007c8
 8008bc4:	200007c4 	.word	0x200007c4
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08e      	sub	sp, #56	; 0x38
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bf8:	bf00      	nop
 8008bfa:	e7fe      	b.n	8008bfa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bfc:	f000 fe20 	bl	8009840 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008c04:	f3ef 8211 	mrs	r2, BASEPRI
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	623a      	str	r2, [r7, #32]
 8008c1a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008c1c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d828      	bhi.n	8008c98 <xTaskGenericNotifyFromISR+0xcc>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <xTaskGenericNotifyFromISR+0x80>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c99 	.word	0x08008c99
 8008c50:	08008c61 	.word	0x08008c61
 8008c54:	08008c6f 	.word	0x08008c6f
 8008c58:	08008c7b 	.word	0x08008c7b
 8008c5c:	08008c83 	.word	0x08008c83
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008c6c:	e014      	b.n	8008c98 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008c78:	e00e      	b.n	8008c98 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008c80:	e00a      	b.n	8008c98 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d003      	beq.n	8008c92 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008c90:	e001      	b.n	8008c96 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008c96:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d147      	bne.n	8008d30 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	61bb      	str	r3, [r7, #24]
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cbe:	4b22      	ldr	r3, [pc, #136]	; (8008d48 <xTaskGenericNotifyFromISR+0x17c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d11d      	bne.n	8008d02 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fd ff2e 	bl	8006b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4b1d      	ldr	r3, [pc, #116]	; (8008d4c <xTaskGenericNotifyFromISR+0x180>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d903      	bls.n	8008ce4 <xTaskGenericNotifyFromISR+0x118>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	4a1a      	ldr	r2, [pc, #104]	; (8008d4c <xTaskGenericNotifyFromISR+0x180>)
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <xTaskGenericNotifyFromISR+0x184>)
 8008cf2:	441a      	add	r2, r3
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7fd febb 	bl	8006a76 <vListInsertEnd>
 8008d00:	e005      	b.n	8008d0e <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	3318      	adds	r3, #24
 8008d06:	4619      	mov	r1, r3
 8008d08:	4812      	ldr	r0, [pc, #72]	; (8008d54 <xTaskGenericNotifyFromISR+0x188>)
 8008d0a:	f7fd feb4 	bl	8006a76 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d12:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <xTaskGenericNotifyFromISR+0x18c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d909      	bls.n	8008d30 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d24:	2201      	movs	r2, #1
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	e002      	b.n	8008d30 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008d2a:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <xTaskGenericNotifyFromISR+0x190>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f383 8811 	msr	BASEPRI, r3
}
 8008d3a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3738      	adds	r7, #56	; 0x38
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000cc0 	.word	0x20000cc0
 8008d4c:	20000ca0 	.word	0x20000ca0
 8008d50:	200007c8 	.word	0x200007c8
 8008d54:	20000c58 	.word	0x20000c58
 8008d58:	200007c4 	.word	0x200007c4
 8008d5c:	20000cac 	.word	0x20000cac

08008d60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d6a:	4b21      	ldr	r3, [pc, #132]	; (8008df0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d70:	4b20      	ldr	r3, [pc, #128]	; (8008df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fd fed8 	bl	8006b2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d10a      	bne.n	8008d9a <prvAddCurrentTaskToDelayedList+0x3a>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8a:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3304      	adds	r3, #4
 8008d90:	4619      	mov	r1, r3
 8008d92:	4819      	ldr	r0, [pc, #100]	; (8008df8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d94:	f7fd fe6f 	bl	8006a76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d98:	e026      	b.n	8008de8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4413      	add	r3, r2
 8008da0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008da2:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d209      	bcs.n	8008dc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db2:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f7fd fe7c 	bl	8006abc <vListInsert>
}
 8008dc4:	e010      	b.n	8008de8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc6:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	f7fd fe72 	bl	8006abc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d202      	bcs.n	8008de8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008de2:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6013      	str	r3, [r2, #0]
}
 8008de8:	bf00      	nop
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20000c9c 	.word	0x20000c9c
 8008df4:	200007c4 	.word	0x200007c4
 8008df8:	20000c84 	.word	0x20000c84
 8008dfc:	20000c54 	.word	0x20000c54
 8008e00:	20000c50 	.word	0x20000c50
 8008e04:	20000cb8 	.word	0x20000cb8

08008e08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e12:	f000 fb1f 	bl	8009454 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e16:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <xTimerCreateTimerTask+0x80>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d021      	beq.n	8008e62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e26:	1d3a      	adds	r2, r7, #4
 8008e28:	f107 0108 	add.w	r1, r7, #8
 8008e2c:	f107 030c 	add.w	r3, r7, #12
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fd fddb 	bl	80069ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	9202      	str	r2, [sp, #8]
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	2302      	movs	r3, #2
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	460a      	mov	r2, r1
 8008e48:	4910      	ldr	r1, [pc, #64]	; (8008e8c <xTimerCreateTimerTask+0x84>)
 8008e4a:	4811      	ldr	r0, [pc, #68]	; (8008e90 <xTimerCreateTimerTask+0x88>)
 8008e4c:	f7fe fe14 	bl	8007a78 <xTaskCreateStatic>
 8008e50:	4603      	mov	r3, r0
 8008e52:	4a10      	ldr	r2, [pc, #64]	; (8008e94 <xTimerCreateTimerTask+0x8c>)
 8008e54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e56:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <xTimerCreateTimerTask+0x8c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10a      	bne.n	8008e7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	613b      	str	r3, [r7, #16]
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e7e:	697b      	ldr	r3, [r7, #20]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20000cf4 	.word	0x20000cf4
 8008e8c:	0800a2dc 	.word	0x0800a2dc
 8008e90:	0800905d 	.word	0x0800905d
 8008e94:	20000cf8 	.word	0x20000cf8

08008e98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008ea6:	2030      	movs	r0, #48	; 0x30
 8008ea8:	f000 fd08 	bl	80098bc <pvPortMalloc>
 8008eac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00d      	beq.n	8008ed0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 f809 	bl	8008eda <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008ed0:	697b      	ldr	r3, [r7, #20]
	}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	607a      	str	r2, [r7, #4]
 8008ee6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	617b      	str	r3, [r7, #20]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d015      	beq.n	8008f36 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008f0a:	f000 faa3 	bl	8009454 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	6a3a      	ldr	r2, [r7, #32]
 8008f2a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	3304      	adds	r3, #4
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fd fd94 	bl	8006a5e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008f36:	bf00      	nop
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	623b      	str	r3, [r7, #32]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f6e:	4b1a      	ldr	r3, [pc, #104]	; (8008fd8 <xTimerGenericCommand+0x98>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d02a      	beq.n	8008fcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b05      	cmp	r3, #5
 8008f86:	dc18      	bgt.n	8008fba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f88:	f7ff fba0 	bl	80086cc <xTaskGetSchedulerState>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d109      	bne.n	8008fa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f92:	4b11      	ldr	r3, [pc, #68]	; (8008fd8 <xTimerGenericCommand+0x98>)
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f107 0110 	add.w	r1, r7, #16
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f9e:	f7fd ff99 	bl	8006ed4 <xQueueGenericSend>
 8008fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8008fa4:	e012      	b.n	8008fcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fa6:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <xTimerGenericCommand+0x98>)
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f107 0110 	add.w	r1, r7, #16
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f7fd ff8f 	bl	8006ed4 <xQueueGenericSend>
 8008fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8008fb8:	e008      	b.n	8008fcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fba:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <xTimerGenericCommand+0x98>)
 8008fbc:	6818      	ldr	r0, [r3, #0]
 8008fbe:	f107 0110 	add.w	r1, r7, #16
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	f7fe f883 	bl	80070d0 <xQueueGenericSendFromISR>
 8008fca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3728      	adds	r7, #40	; 0x28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000cf4 	.word	0x20000cf4

08008fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fe6:	4b1c      	ldr	r3, [pc, #112]	; (8009058 <prvProcessExpiredTimer+0x7c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fd fd99 	bl	8006b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d122      	bne.n	8009048 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	699a      	ldr	r2, [r3, #24]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	18d1      	adds	r1, r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	6978      	ldr	r0, [r7, #20]
 8009010:	f000 f8c8 	bl	80091a4 <prvInsertTimerInActiveList>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d016      	beq.n	8009048 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800901a:	2300      	movs	r3, #0
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	2100      	movs	r1, #0
 8009024:	6978      	ldr	r0, [r7, #20]
 8009026:	f7ff ff8b 	bl	8008f40 <xTimerGenericCommand>
 800902a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	60fb      	str	r3, [r7, #12]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	6978      	ldr	r0, [r7, #20]
 800904e:	4798      	blx	r3
}
 8009050:	bf00      	nop
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20000cec 	.word	0x20000cec

0800905c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f857 	bl	800911c <prvGetNextExpireTime>
 800906e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4619      	mov	r1, r3
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f803 	bl	8009080 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800907a:	f000 f8d5 	bl	8009228 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800907e:	e7f1      	b.n	8009064 <prvTimerTask+0x8>

08009080 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800908a:	f7fe ff27 	bl	8007edc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f866 	bl	8009164 <prvSampleTimeNow>
 8009098:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d130      	bne.n	8009102 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d806      	bhi.n	80090bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090ae:	f7fe ff23 	bl	8007ef8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff ff91 	bl	8008fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090ba:	e024      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d008      	beq.n	80090d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090c2:	4b13      	ldr	r3, [pc, #76]	; (8009110 <prvProcessTimerOrBlockTask+0x90>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bf0c      	ite	eq
 80090cc:	2301      	moveq	r3, #1
 80090ce:	2300      	movne	r3, #0
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090d4:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <prvProcessTimerOrBlockTask+0x94>)
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	f7fe fc95 	bl	8007a10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090e6:	f7fe ff07 	bl	8007ef8 <xTaskResumeAll>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090f0:	4b09      	ldr	r3, [pc, #36]	; (8009118 <prvProcessTimerOrBlockTask+0x98>)
 80090f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	f3bf 8f6f 	isb	sy
}
 8009100:	e001      	b.n	8009106 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009102:	f7fe fef9 	bl	8007ef8 <xTaskResumeAll>
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000cf0 	.word	0x20000cf0
 8009114:	20000cf4 	.word	0x20000cf4
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <prvGetNextExpireTime+0x44>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	bf0c      	ite	eq
 800912e:	2301      	moveq	r3, #1
 8009130:	2300      	movne	r3, #0
 8009132:	b2db      	uxtb	r3, r3
 8009134:	461a      	mov	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d105      	bne.n	800914e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <prvGetNextExpireTime+0x44>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e001      	b.n	8009152 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009152:	68fb      	ldr	r3, [r7, #12]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	20000cec 	.word	0x20000cec

08009164 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800916c:	f7fe ff62 	bl	8008034 <xTaskGetTickCount>
 8009170:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <prvSampleTimeNow+0x3c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	429a      	cmp	r2, r3
 800917a:	d205      	bcs.n	8009188 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800917c:	f000 f908 	bl	8009390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e002      	b.n	800918e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800918e:	4a04      	ldr	r2, [pc, #16]	; (80091a0 <prvSampleTimeNow+0x3c>)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	20000cfc 	.word	0x20000cfc

080091a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d812      	bhi.n	80091f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d302      	bcc.n	80091de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	e01b      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091de:	4b10      	ldr	r3, [pc, #64]	; (8009220 <prvInsertTimerInActiveList+0x7c>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd fc67 	bl	8006abc <vListInsert>
 80091ee:	e012      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d206      	bcs.n	8009206 <prvInsertTimerInActiveList+0x62>
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d302      	bcc.n	8009206 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
 8009204:	e007      	b.n	8009216 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009206:	4b07      	ldr	r3, [pc, #28]	; (8009224 <prvInsertTimerInActiveList+0x80>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3304      	adds	r3, #4
 800920e:	4619      	mov	r1, r3
 8009210:	4610      	mov	r0, r2
 8009212:	f7fd fc53 	bl	8006abc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009216:	697b      	ldr	r3, [r7, #20]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	20000cf0 	.word	0x20000cf0
 8009224:	20000cec 	.word	0x20000cec

08009228 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b08e      	sub	sp, #56	; 0x38
 800922c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800922e:	e09d      	b.n	800936c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	da18      	bge.n	8009268 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009236:	1d3b      	adds	r3, r7, #4
 8009238:	3304      	adds	r3, #4
 800923a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	61fb      	str	r3, [r7, #28]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800925e:	6850      	ldr	r0, [r2, #4]
 8009260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009262:	6892      	ldr	r2, [r2, #8]
 8009264:	4611      	mov	r1, r2
 8009266:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	db7d      	blt.n	800936a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d004      	beq.n	8009284 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	3304      	adds	r3, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f7fd fc54 	bl	8006b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009284:	463b      	mov	r3, r7
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff ff6c 	bl	8009164 <prvSampleTimeNow>
 800928c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b09      	cmp	r3, #9
 8009292:	d86b      	bhi.n	800936c <prvProcessReceivedCommands+0x144>
 8009294:	a201      	add	r2, pc, #4	; (adr r2, 800929c <prvProcessReceivedCommands+0x74>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092c5 	.word	0x080092c5
 80092a0:	080092c5 	.word	0x080092c5
 80092a4:	080092c5 	.word	0x080092c5
 80092a8:	0800936d 	.word	0x0800936d
 80092ac:	08009321 	.word	0x08009321
 80092b0:	08009359 	.word	0x08009359
 80092b4:	080092c5 	.word	0x080092c5
 80092b8:	080092c5 	.word	0x080092c5
 80092bc:	0800936d 	.word	0x0800936d
 80092c0:	08009321 	.word	0x08009321
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	18d1      	adds	r1, r2, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d2:	f7ff ff67 	bl	80091a4 <prvInsertTimerInActiveList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d047      	beq.n	800936c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d13f      	bne.n	800936c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	441a      	add	r2, r3
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	2300      	movs	r3, #0
 80092fa:	2100      	movs	r1, #0
 80092fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092fe:	f7ff fe1f 	bl	8008f40 <xTimerGenericCommand>
 8009302:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d130      	bne.n	800936c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	61bb      	str	r3, [r7, #24]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009324:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	617b      	str	r3, [r7, #20]
}
 8009340:	bf00      	nop
 8009342:	e7fe      	b.n	8009342 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	699a      	ldr	r2, [r3, #24]
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	18d1      	adds	r1, r2, r3
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009352:	f7ff ff27 	bl	80091a4 <prvInsertTimerInActiveList>
					break;
 8009356:	e009      	b.n	800936c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d104      	bne.n	800936c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009364:	f000 fabc 	bl	80098e0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009368:	e000      	b.n	800936c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800936a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <prvProcessReceivedCommands+0x164>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	1d39      	adds	r1, r7, #4
 8009372:	2200      	movs	r2, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f7fd ff43 	bl	8007200 <xQueueReceive>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	f47f af57 	bne.w	8009230 <prvProcessReceivedCommands+0x8>
	}
}
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	3730      	adds	r7, #48	; 0x30
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000cf4 	.word	0x20000cf4

08009390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009396:	e045      	b.n	8009424 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009398:	4b2c      	ldr	r3, [pc, #176]	; (800944c <prvSwitchTimerLists+0xbc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093a2:	4b2a      	ldr	r3, [pc, #168]	; (800944c <prvSwitchTimerLists+0xbc>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fd fbbb 	bl	8006b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d12e      	bne.n	8009424 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	4413      	add	r3, r2
 80093ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d90e      	bls.n	80093f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093e4:	4b19      	ldr	r3, [pc, #100]	; (800944c <prvSwitchTimerLists+0xbc>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	4610      	mov	r0, r2
 80093f0:	f7fd fb64 	bl	8006abc <vListInsert>
 80093f4:	e016      	b.n	8009424 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093f6:	2300      	movs	r3, #0
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	2300      	movs	r3, #0
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	2100      	movs	r1, #0
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7ff fd9d 	bl	8008f40 <xTimerGenericCommand>
 8009406:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <prvSwitchTimerLists+0x94>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	603b      	str	r3, [r7, #0]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009424:	4b09      	ldr	r3, [pc, #36]	; (800944c <prvSwitchTimerLists+0xbc>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1b4      	bne.n	8009398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800942e:	4b07      	ldr	r3, [pc, #28]	; (800944c <prvSwitchTimerLists+0xbc>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009434:	4b06      	ldr	r3, [pc, #24]	; (8009450 <prvSwitchTimerLists+0xc0>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a04      	ldr	r2, [pc, #16]	; (800944c <prvSwitchTimerLists+0xbc>)
 800943a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800943c:	4a04      	ldr	r2, [pc, #16]	; (8009450 <prvSwitchTimerLists+0xc0>)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	6013      	str	r3, [r2, #0]
}
 8009442:	bf00      	nop
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000cec 	.word	0x20000cec
 8009450:	20000cf0 	.word	0x20000cf0

08009454 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800945a:	f000 f92f 	bl	80096bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800945e:	4b15      	ldr	r3, [pc, #84]	; (80094b4 <prvCheckForValidListAndQueue+0x60>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d120      	bne.n	80094a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009466:	4814      	ldr	r0, [pc, #80]	; (80094b8 <prvCheckForValidListAndQueue+0x64>)
 8009468:	f7fd fada 	bl	8006a20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800946c:	4813      	ldr	r0, [pc, #76]	; (80094bc <prvCheckForValidListAndQueue+0x68>)
 800946e:	f7fd fad7 	bl	8006a20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009472:	4b13      	ldr	r3, [pc, #76]	; (80094c0 <prvCheckForValidListAndQueue+0x6c>)
 8009474:	4a10      	ldr	r2, [pc, #64]	; (80094b8 <prvCheckForValidListAndQueue+0x64>)
 8009476:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009478:	4b12      	ldr	r3, [pc, #72]	; (80094c4 <prvCheckForValidListAndQueue+0x70>)
 800947a:	4a10      	ldr	r2, [pc, #64]	; (80094bc <prvCheckForValidListAndQueue+0x68>)
 800947c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800947e:	2300      	movs	r3, #0
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <prvCheckForValidListAndQueue+0x74>)
 8009484:	4a11      	ldr	r2, [pc, #68]	; (80094cc <prvCheckForValidListAndQueue+0x78>)
 8009486:	2110      	movs	r1, #16
 8009488:	200a      	movs	r0, #10
 800948a:	f7fd fbe1 	bl	8006c50 <xQueueGenericCreateStatic>
 800948e:	4603      	mov	r3, r0
 8009490:	4a08      	ldr	r2, [pc, #32]	; (80094b4 <prvCheckForValidListAndQueue+0x60>)
 8009492:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <prvCheckForValidListAndQueue+0x60>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800949c:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <prvCheckForValidListAndQueue+0x60>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	490b      	ldr	r1, [pc, #44]	; (80094d0 <prvCheckForValidListAndQueue+0x7c>)
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fe fa62 	bl	800796c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094a8:	f000 f938 	bl	800971c <vPortExitCritical>
}
 80094ac:	bf00      	nop
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20000cf4 	.word	0x20000cf4
 80094b8:	20000cc4 	.word	0x20000cc4
 80094bc:	20000cd8 	.word	0x20000cd8
 80094c0:	20000cec 	.word	0x20000cec
 80094c4:	20000cf0 	.word	0x20000cf0
 80094c8:	20000da0 	.word	0x20000da0
 80094cc:	20000d00 	.word	0x20000d00
 80094d0:	0800a2e4 	.word	0x0800a2e4

080094d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3b04      	subs	r3, #4
 80094e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3b04      	subs	r3, #4
 80094f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f023 0201 	bic.w	r2, r3, #1
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3b04      	subs	r3, #4
 8009502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009504:	4a08      	ldr	r2, [pc, #32]	; (8009528 <pxPortInitialiseStack+0x54>)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3b14      	subs	r3, #20
 800950e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3b20      	subs	r3, #32
 800951a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800951c:	68fb      	ldr	r3, [r7, #12]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr
 8009528:	0800952d 	.word	0x0800952d

0800952c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009532:	2300      	movs	r3, #0
 8009534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009536:	4b12      	ldr	r3, [pc, #72]	; (8009580 <prvTaskExitError+0x54>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953e:	d00a      	beq.n	8009556 <prvTaskExitError+0x2a>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <prvTaskExitError+0x28>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	60bb      	str	r3, [r7, #8]
}
 8009568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800956a:	bf00      	nop
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0fc      	beq.n	800956c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	bc80      	pop	{r7}
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	2000005c 	.word	0x2000005c
	...

08009590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <pxCurrentTCBConst2>)
 8009592:	6819      	ldr	r1, [r3, #0]
 8009594:	6808      	ldr	r0, [r1, #0]
 8009596:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800959a:	f380 8809 	msr	PSP, r0
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f04f 0000 	mov.w	r0, #0
 80095a6:	f380 8811 	msr	BASEPRI, r0
 80095aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80095ae:	4770      	bx	lr

080095b0 <pxCurrentTCBConst2>:
 80095b0:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop

080095b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80095b8:	4806      	ldr	r0, [pc, #24]	; (80095d4 <prvPortStartFirstTask+0x1c>)
 80095ba:	6800      	ldr	r0, [r0, #0]
 80095bc:	6800      	ldr	r0, [r0, #0]
 80095be:	f380 8808 	msr	MSP, r0
 80095c2:	b662      	cpsie	i
 80095c4:	b661      	cpsie	f
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	df00      	svc	0
 80095d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095d2:	bf00      	nop
 80095d4:	e000ed08 	.word	0xe000ed08

080095d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095de:	4b32      	ldr	r3, [pc, #200]	; (80096a8 <xPortStartScheduler+0xd0>)
 80095e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	22ff      	movs	r2, #255	; 0xff
 80095ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009600:	b2da      	uxtb	r2, r3
 8009602:	4b2a      	ldr	r3, [pc, #168]	; (80096ac <xPortStartScheduler+0xd4>)
 8009604:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009606:	4b2a      	ldr	r3, [pc, #168]	; (80096b0 <xPortStartScheduler+0xd8>)
 8009608:	2207      	movs	r2, #7
 800960a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800960c:	e009      	b.n	8009622 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800960e:	4b28      	ldr	r3, [pc, #160]	; (80096b0 <xPortStartScheduler+0xd8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3b01      	subs	r3, #1
 8009614:	4a26      	ldr	r2, [pc, #152]	; (80096b0 <xPortStartScheduler+0xd8>)
 8009616:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009618:	78fb      	ldrb	r3, [r7, #3]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	b2db      	uxtb	r3, r3
 8009620:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800962a:	2b80      	cmp	r3, #128	; 0x80
 800962c:	d0ef      	beq.n	800960e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800962e:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <xPortStartScheduler+0xd8>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f1c3 0307 	rsb	r3, r3, #7
 8009636:	2b04      	cmp	r3, #4
 8009638:	d00a      	beq.n	8009650 <xPortStartScheduler+0x78>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	60bb      	str	r3, [r7, #8]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009650:	4b17      	ldr	r3, [pc, #92]	; (80096b0 <xPortStartScheduler+0xd8>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	021b      	lsls	r3, r3, #8
 8009656:	4a16      	ldr	r2, [pc, #88]	; (80096b0 <xPortStartScheduler+0xd8>)
 8009658:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800965a:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <xPortStartScheduler+0xd8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009662:	4a13      	ldr	r2, [pc, #76]	; (80096b0 <xPortStartScheduler+0xd8>)
 8009664:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	b2da      	uxtb	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800966e:	4b11      	ldr	r3, [pc, #68]	; (80096b4 <xPortStartScheduler+0xdc>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a10      	ldr	r2, [pc, #64]	; (80096b4 <xPortStartScheduler+0xdc>)
 8009674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009678:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800967a:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <xPortStartScheduler+0xdc>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a0d      	ldr	r2, [pc, #52]	; (80096b4 <xPortStartScheduler+0xdc>)
 8009680:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009684:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009686:	f000 f8b9 	bl	80097fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800968a:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <xPortStartScheduler+0xe0>)
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009690:	f7ff ff92 	bl	80095b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009694:	f7fe fdac 	bl	80081f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009698:	f7ff ff48 	bl	800952c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	e000e400 	.word	0xe000e400
 80096ac:	20000df0 	.word	0x20000df0
 80096b0:	20000df4 	.word	0x20000df4
 80096b4:	e000ed20 	.word	0xe000ed20
 80096b8:	2000005c 	.word	0x2000005c

080096bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	607b      	str	r3, [r7, #4]
}
 80096d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096d6:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <vPortEnterCritical+0x58>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	4a0d      	ldr	r2, [pc, #52]	; (8009714 <vPortEnterCritical+0x58>)
 80096de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <vPortEnterCritical+0x58>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d10f      	bne.n	8009708 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096e8:	4b0b      	ldr	r3, [pc, #44]	; (8009718 <vPortEnterCritical+0x5c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00a      	beq.n	8009708 <vPortEnterCritical+0x4c>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	603b      	str	r3, [r7, #0]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <vPortEnterCritical+0x4a>
	}
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	2000005c 	.word	0x2000005c
 8009718:	e000ed04 	.word	0xe000ed04

0800971c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009722:	4b11      	ldr	r3, [pc, #68]	; (8009768 <vPortExitCritical+0x4c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <vPortExitCritical+0x24>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	607b      	str	r3, [r7, #4]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009740:	4b09      	ldr	r3, [pc, #36]	; (8009768 <vPortExitCritical+0x4c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3b01      	subs	r3, #1
 8009746:	4a08      	ldr	r2, [pc, #32]	; (8009768 <vPortExitCritical+0x4c>)
 8009748:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800974a:	4b07      	ldr	r3, [pc, #28]	; (8009768 <vPortExitCritical+0x4c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <vPortExitCritical+0x42>
 8009752:	2300      	movs	r3, #0
 8009754:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	f383 8811 	msr	BASEPRI, r3
}
 800975c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800975e:	bf00      	nop
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	bc80      	pop	{r7}
 8009766:	4770      	bx	lr
 8009768:	2000005c 	.word	0x2000005c
 800976c:	00000000 	.word	0x00000000

08009770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009770:	f3ef 8009 	mrs	r0, PSP
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	4b0d      	ldr	r3, [pc, #52]	; (80097b0 <pxCurrentTCBConst>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009780:	6010      	str	r0, [r2, #0]
 8009782:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009786:	f04f 0050 	mov.w	r0, #80	; 0x50
 800978a:	f380 8811 	msr	BASEPRI, r0
 800978e:	f7fe fd2f 	bl	80081f0 <vTaskSwitchContext>
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8811 	msr	BASEPRI, r0
 800979a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800979e:	6819      	ldr	r1, [r3, #0]
 80097a0:	6808      	ldr	r0, [r1, #0]
 80097a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80097a6:	f380 8809 	msr	PSP, r0
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	4770      	bx	lr

080097b0 <pxCurrentTCBConst>:
 80097b0:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	607b      	str	r3, [r7, #4]
}
 80097d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097d2:	f7fe fc4f 	bl	8008074 <xTaskIncrementTick>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097dc:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <SysTick_Handler+0x40>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	2300      	movs	r3, #0
 80097e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f383 8811 	msr	BASEPRI, r3
}
 80097ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <vPortSetupTimerInterrupt+0x30>)
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009806:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <vPortSetupTimerInterrupt+0x34>)
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800980c:	4b09      	ldr	r3, [pc, #36]	; (8009834 <vPortSetupTimerInterrupt+0x38>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a09      	ldr	r2, [pc, #36]	; (8009838 <vPortSetupTimerInterrupt+0x3c>)
 8009812:	fba2 2303 	umull	r2, r3, r2, r3
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	4a08      	ldr	r2, [pc, #32]	; (800983c <vPortSetupTimerInterrupt+0x40>)
 800981a:	3b01      	subs	r3, #1
 800981c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800981e:	4b03      	ldr	r3, [pc, #12]	; (800982c <vPortSetupTimerInterrupt+0x30>)
 8009820:	2207      	movs	r2, #7
 8009822:	601a      	str	r2, [r3, #0]
}
 8009824:	bf00      	nop
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr
 800982c:	e000e010 	.word	0xe000e010
 8009830:	e000e018 	.word	0xe000e018
 8009834:	20000050 	.word	0x20000050
 8009838:	10624dd3 	.word	0x10624dd3
 800983c:	e000e014 	.word	0xe000e014

08009840 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009846:	f3ef 8305 	mrs	r3, IPSR
 800984a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b0f      	cmp	r3, #15
 8009850:	d914      	bls.n	800987c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009852:	4a16      	ldr	r2, [pc, #88]	; (80098ac <vPortValidateInterruptPriority+0x6c>)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800985c:	4b14      	ldr	r3, [pc, #80]	; (80098b0 <vPortValidateInterruptPriority+0x70>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	7afa      	ldrb	r2, [r7, #11]
 8009862:	429a      	cmp	r2, r3
 8009864:	d20a      	bcs.n	800987c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	607b      	str	r3, [r7, #4]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800987c:	4b0d      	ldr	r3, [pc, #52]	; (80098b4 <vPortValidateInterruptPriority+0x74>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009884:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <vPortValidateInterruptPriority+0x78>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	429a      	cmp	r2, r3
 800988a:	d90a      	bls.n	80098a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	603b      	str	r3, [r7, #0]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <vPortValidateInterruptPriority+0x60>
	}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bc80      	pop	{r7}
 80098aa:	4770      	bx	lr
 80098ac:	e000e3f0 	.word	0xe000e3f0
 80098b0:	20000df0 	.word	0x20000df0
 80098b4:	e000ed0c 	.word	0xe000ed0c
 80098b8:	20000df4 	.word	0x20000df4

080098bc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80098c4:	f7fe fb0a 	bl	8007edc <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f845 	bl	8009958 <malloc>
 80098ce:	4603      	mov	r3, r0
 80098d0:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098d2:	f7fe fb11 	bl	8007ef8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80098d6:	68fb      	ldr	r3, [r7, #12]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
	if( pv )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d006      	beq.n	80098fc <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 80098ee:	f7fe faf5 	bl	8007edc <vTaskSuspendAll>
		{
			free( pv );
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f838 	bl	8009968 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80098f8:	f7fe fafe 	bl	8007ef8 <xTaskResumeAll>
	}
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <__errno>:
 8009904:	4b01      	ldr	r3, [pc, #4]	; (800990c <__errno+0x8>)
 8009906:	6818      	ldr	r0, [r3, #0]
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20000060 	.word	0x20000060

08009910 <__libc_init_array>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	2600      	movs	r6, #0
 8009914:	4d0c      	ldr	r5, [pc, #48]	; (8009948 <__libc_init_array+0x38>)
 8009916:	4c0d      	ldr	r4, [pc, #52]	; (800994c <__libc_init_array+0x3c>)
 8009918:	1b64      	subs	r4, r4, r5
 800991a:	10a4      	asrs	r4, r4, #2
 800991c:	42a6      	cmp	r6, r4
 800991e:	d109      	bne.n	8009934 <__libc_init_array+0x24>
 8009920:	f000 fc6c 	bl	800a1fc <_init>
 8009924:	2600      	movs	r6, #0
 8009926:	4d0a      	ldr	r5, [pc, #40]	; (8009950 <__libc_init_array+0x40>)
 8009928:	4c0a      	ldr	r4, [pc, #40]	; (8009954 <__libc_init_array+0x44>)
 800992a:	1b64      	subs	r4, r4, r5
 800992c:	10a4      	asrs	r4, r4, #2
 800992e:	42a6      	cmp	r6, r4
 8009930:	d105      	bne.n	800993e <__libc_init_array+0x2e>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	f855 3b04 	ldr.w	r3, [r5], #4
 8009938:	4798      	blx	r3
 800993a:	3601      	adds	r6, #1
 800993c:	e7ee      	b.n	800991c <__libc_init_array+0xc>
 800993e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009942:	4798      	blx	r3
 8009944:	3601      	adds	r6, #1
 8009946:	e7f2      	b.n	800992e <__libc_init_array+0x1e>
 8009948:	0800a458 	.word	0x0800a458
 800994c:	0800a458 	.word	0x0800a458
 8009950:	0800a458 	.word	0x0800a458
 8009954:	0800a45c 	.word	0x0800a45c

08009958 <malloc>:
 8009958:	4b02      	ldr	r3, [pc, #8]	; (8009964 <malloc+0xc>)
 800995a:	4601      	mov	r1, r0
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f000 b86d 	b.w	8009a3c <_malloc_r>
 8009962:	bf00      	nop
 8009964:	20000060 	.word	0x20000060

08009968 <free>:
 8009968:	4b02      	ldr	r3, [pc, #8]	; (8009974 <free+0xc>)
 800996a:	4601      	mov	r1, r0
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	f000 b819 	b.w	80099a4 <_free_r>
 8009972:	bf00      	nop
 8009974:	20000060 	.word	0x20000060

08009978 <memcpy>:
 8009978:	440a      	add	r2, r1
 800997a:	4291      	cmp	r1, r2
 800997c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009980:	d100      	bne.n	8009984 <memcpy+0xc>
 8009982:	4770      	bx	lr
 8009984:	b510      	push	{r4, lr}
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	4291      	cmp	r1, r2
 800998c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009990:	d1f9      	bne.n	8009986 <memcpy+0xe>
 8009992:	bd10      	pop	{r4, pc}

08009994 <memset>:
 8009994:	4603      	mov	r3, r0
 8009996:	4402      	add	r2, r0
 8009998:	4293      	cmp	r3, r2
 800999a:	d100      	bne.n	800999e <memset+0xa>
 800999c:	4770      	bx	lr
 800999e:	f803 1b01 	strb.w	r1, [r3], #1
 80099a2:	e7f9      	b.n	8009998 <memset+0x4>

080099a4 <_free_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4605      	mov	r5, r0
 80099a8:	2900      	cmp	r1, #0
 80099aa:	d043      	beq.n	8009a34 <_free_r+0x90>
 80099ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b0:	1f0c      	subs	r4, r1, #4
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bfb8      	it	lt
 80099b6:	18e4      	addlt	r4, r4, r3
 80099b8:	f000 f8ca 	bl	8009b50 <__malloc_lock>
 80099bc:	4a1e      	ldr	r2, [pc, #120]	; (8009a38 <_free_r+0x94>)
 80099be:	6813      	ldr	r3, [r2, #0]
 80099c0:	4610      	mov	r0, r2
 80099c2:	b933      	cbnz	r3, 80099d2 <_free_r+0x2e>
 80099c4:	6063      	str	r3, [r4, #4]
 80099c6:	6014      	str	r4, [r2, #0]
 80099c8:	4628      	mov	r0, r5
 80099ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ce:	f000 b8c5 	b.w	8009b5c <__malloc_unlock>
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	d90a      	bls.n	80099ec <_free_r+0x48>
 80099d6:	6821      	ldr	r1, [r4, #0]
 80099d8:	1862      	adds	r2, r4, r1
 80099da:	4293      	cmp	r3, r2
 80099dc:	bf01      	itttt	eq
 80099de:	681a      	ldreq	r2, [r3, #0]
 80099e0:	685b      	ldreq	r3, [r3, #4]
 80099e2:	1852      	addeq	r2, r2, r1
 80099e4:	6022      	streq	r2, [r4, #0]
 80099e6:	6063      	str	r3, [r4, #4]
 80099e8:	6004      	str	r4, [r0, #0]
 80099ea:	e7ed      	b.n	80099c8 <_free_r+0x24>
 80099ec:	461a      	mov	r2, r3
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	b10b      	cbz	r3, 80099f6 <_free_r+0x52>
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	d9fa      	bls.n	80099ec <_free_r+0x48>
 80099f6:	6811      	ldr	r1, [r2, #0]
 80099f8:	1850      	adds	r0, r2, r1
 80099fa:	42a0      	cmp	r0, r4
 80099fc:	d10b      	bne.n	8009a16 <_free_r+0x72>
 80099fe:	6820      	ldr	r0, [r4, #0]
 8009a00:	4401      	add	r1, r0
 8009a02:	1850      	adds	r0, r2, r1
 8009a04:	4283      	cmp	r3, r0
 8009a06:	6011      	str	r1, [r2, #0]
 8009a08:	d1de      	bne.n	80099c8 <_free_r+0x24>
 8009a0a:	6818      	ldr	r0, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	4401      	add	r1, r0
 8009a10:	6011      	str	r1, [r2, #0]
 8009a12:	6053      	str	r3, [r2, #4]
 8009a14:	e7d8      	b.n	80099c8 <_free_r+0x24>
 8009a16:	d902      	bls.n	8009a1e <_free_r+0x7a>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	602b      	str	r3, [r5, #0]
 8009a1c:	e7d4      	b.n	80099c8 <_free_r+0x24>
 8009a1e:	6820      	ldr	r0, [r4, #0]
 8009a20:	1821      	adds	r1, r4, r0
 8009a22:	428b      	cmp	r3, r1
 8009a24:	bf01      	itttt	eq
 8009a26:	6819      	ldreq	r1, [r3, #0]
 8009a28:	685b      	ldreq	r3, [r3, #4]
 8009a2a:	1809      	addeq	r1, r1, r0
 8009a2c:	6021      	streq	r1, [r4, #0]
 8009a2e:	6063      	str	r3, [r4, #4]
 8009a30:	6054      	str	r4, [r2, #4]
 8009a32:	e7c9      	b.n	80099c8 <_free_r+0x24>
 8009a34:	bd38      	pop	{r3, r4, r5, pc}
 8009a36:	bf00      	nop
 8009a38:	20000df8 	.word	0x20000df8

08009a3c <_malloc_r>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	1ccd      	adds	r5, r1, #3
 8009a40:	f025 0503 	bic.w	r5, r5, #3
 8009a44:	3508      	adds	r5, #8
 8009a46:	2d0c      	cmp	r5, #12
 8009a48:	bf38      	it	cc
 8009a4a:	250c      	movcc	r5, #12
 8009a4c:	2d00      	cmp	r5, #0
 8009a4e:	4606      	mov	r6, r0
 8009a50:	db01      	blt.n	8009a56 <_malloc_r+0x1a>
 8009a52:	42a9      	cmp	r1, r5
 8009a54:	d903      	bls.n	8009a5e <_malloc_r+0x22>
 8009a56:	230c      	movs	r3, #12
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a5e:	f000 f877 	bl	8009b50 <__malloc_lock>
 8009a62:	4921      	ldr	r1, [pc, #132]	; (8009ae8 <_malloc_r+0xac>)
 8009a64:	680a      	ldr	r2, [r1, #0]
 8009a66:	4614      	mov	r4, r2
 8009a68:	b99c      	cbnz	r4, 8009a92 <_malloc_r+0x56>
 8009a6a:	4f20      	ldr	r7, [pc, #128]	; (8009aec <_malloc_r+0xb0>)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	b923      	cbnz	r3, 8009a7a <_malloc_r+0x3e>
 8009a70:	4621      	mov	r1, r4
 8009a72:	4630      	mov	r0, r6
 8009a74:	f000 f83c 	bl	8009af0 <_sbrk_r>
 8009a78:	6038      	str	r0, [r7, #0]
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f000 f837 	bl	8009af0 <_sbrk_r>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d123      	bne.n	8009ace <_malloc_r+0x92>
 8009a86:	230c      	movs	r3, #12
 8009a88:	4630      	mov	r0, r6
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	f000 f866 	bl	8009b5c <__malloc_unlock>
 8009a90:	e7e3      	b.n	8009a5a <_malloc_r+0x1e>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	1b5b      	subs	r3, r3, r5
 8009a96:	d417      	bmi.n	8009ac8 <_malloc_r+0x8c>
 8009a98:	2b0b      	cmp	r3, #11
 8009a9a:	d903      	bls.n	8009aa4 <_malloc_r+0x68>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	441c      	add	r4, r3
 8009aa0:	6025      	str	r5, [r4, #0]
 8009aa2:	e004      	b.n	8009aae <_malloc_r+0x72>
 8009aa4:	6863      	ldr	r3, [r4, #4]
 8009aa6:	42a2      	cmp	r2, r4
 8009aa8:	bf0c      	ite	eq
 8009aaa:	600b      	streq	r3, [r1, #0]
 8009aac:	6053      	strne	r3, [r2, #4]
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f000 f854 	bl	8009b5c <__malloc_unlock>
 8009ab4:	f104 000b 	add.w	r0, r4, #11
 8009ab8:	1d23      	adds	r3, r4, #4
 8009aba:	f020 0007 	bic.w	r0, r0, #7
 8009abe:	1ac2      	subs	r2, r0, r3
 8009ac0:	d0cc      	beq.n	8009a5c <_malloc_r+0x20>
 8009ac2:	1a1b      	subs	r3, r3, r0
 8009ac4:	50a3      	str	r3, [r4, r2]
 8009ac6:	e7c9      	b.n	8009a5c <_malloc_r+0x20>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	6864      	ldr	r4, [r4, #4]
 8009acc:	e7cc      	b.n	8009a68 <_malloc_r+0x2c>
 8009ace:	1cc4      	adds	r4, r0, #3
 8009ad0:	f024 0403 	bic.w	r4, r4, #3
 8009ad4:	42a0      	cmp	r0, r4
 8009ad6:	d0e3      	beq.n	8009aa0 <_malloc_r+0x64>
 8009ad8:	1a21      	subs	r1, r4, r0
 8009ada:	4630      	mov	r0, r6
 8009adc:	f000 f808 	bl	8009af0 <_sbrk_r>
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d1dd      	bne.n	8009aa0 <_malloc_r+0x64>
 8009ae4:	e7cf      	b.n	8009a86 <_malloc_r+0x4a>
 8009ae6:	bf00      	nop
 8009ae8:	20000df8 	.word	0x20000df8
 8009aec:	20000dfc 	.word	0x20000dfc

08009af0 <_sbrk_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	2300      	movs	r3, #0
 8009af4:	4d05      	ldr	r5, [pc, #20]	; (8009b0c <_sbrk_r+0x1c>)
 8009af6:	4604      	mov	r4, r0
 8009af8:	4608      	mov	r0, r1
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	f7f9 fefc 	bl	80038f8 <_sbrk>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d102      	bne.n	8009b0a <_sbrk_r+0x1a>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	b103      	cbz	r3, 8009b0a <_sbrk_r+0x1a>
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	20001144 	.word	0x20001144

08009b10 <siprintf>:
 8009b10:	b40e      	push	{r1, r2, r3}
 8009b12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b16:	b500      	push	{lr}
 8009b18:	b09c      	sub	sp, #112	; 0x70
 8009b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b1c:	9002      	str	r0, [sp, #8]
 8009b1e:	9006      	str	r0, [sp, #24]
 8009b20:	9107      	str	r1, [sp, #28]
 8009b22:	9104      	str	r1, [sp, #16]
 8009b24:	4808      	ldr	r0, [pc, #32]	; (8009b48 <siprintf+0x38>)
 8009b26:	4909      	ldr	r1, [pc, #36]	; (8009b4c <siprintf+0x3c>)
 8009b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2c:	9105      	str	r1, [sp, #20]
 8009b2e:	6800      	ldr	r0, [r0, #0]
 8009b30:	a902      	add	r1, sp, #8
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	f000 f874 	bl	8009c20 <_svfiprintf_r>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	9b02      	ldr	r3, [sp, #8]
 8009b3c:	701a      	strb	r2, [r3, #0]
 8009b3e:	b01c      	add	sp, #112	; 0x70
 8009b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b44:	b003      	add	sp, #12
 8009b46:	4770      	bx	lr
 8009b48:	20000060 	.word	0x20000060
 8009b4c:	ffff0208 	.word	0xffff0208

08009b50 <__malloc_lock>:
 8009b50:	4801      	ldr	r0, [pc, #4]	; (8009b58 <__malloc_lock+0x8>)
 8009b52:	f000 bafb 	b.w	800a14c <__retarget_lock_acquire_recursive>
 8009b56:	bf00      	nop
 8009b58:	2000114c 	.word	0x2000114c

08009b5c <__malloc_unlock>:
 8009b5c:	4801      	ldr	r0, [pc, #4]	; (8009b64 <__malloc_unlock+0x8>)
 8009b5e:	f000 baf6 	b.w	800a14e <__retarget_lock_release_recursive>
 8009b62:	bf00      	nop
 8009b64:	2000114c 	.word	0x2000114c

08009b68 <__ssputs_r>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	688e      	ldr	r6, [r1, #8]
 8009b6e:	4682      	mov	sl, r0
 8009b70:	429e      	cmp	r6, r3
 8009b72:	460c      	mov	r4, r1
 8009b74:	4690      	mov	r8, r2
 8009b76:	461f      	mov	r7, r3
 8009b78:	d838      	bhi.n	8009bec <__ssputs_r+0x84>
 8009b7a:	898a      	ldrh	r2, [r1, #12]
 8009b7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b80:	d032      	beq.n	8009be8 <__ssputs_r+0x80>
 8009b82:	6825      	ldr	r5, [r4, #0]
 8009b84:	6909      	ldr	r1, [r1, #16]
 8009b86:	3301      	adds	r3, #1
 8009b88:	eba5 0901 	sub.w	r9, r5, r1
 8009b8c:	6965      	ldr	r5, [r4, #20]
 8009b8e:	444b      	add	r3, r9
 8009b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b98:	106d      	asrs	r5, r5, #1
 8009b9a:	429d      	cmp	r5, r3
 8009b9c:	bf38      	it	cc
 8009b9e:	461d      	movcc	r5, r3
 8009ba0:	0553      	lsls	r3, r2, #21
 8009ba2:	d531      	bpl.n	8009c08 <__ssputs_r+0xa0>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	f7ff ff49 	bl	8009a3c <_malloc_r>
 8009baa:	4606      	mov	r6, r0
 8009bac:	b950      	cbnz	r0, 8009bc4 <__ssputs_r+0x5c>
 8009bae:	230c      	movs	r3, #12
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb4:	f8ca 3000 	str.w	r3, [sl]
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc4:	464a      	mov	r2, r9
 8009bc6:	6921      	ldr	r1, [r4, #16]
 8009bc8:	f7ff fed6 	bl	8009978 <memcpy>
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd6:	81a3      	strh	r3, [r4, #12]
 8009bd8:	6126      	str	r6, [r4, #16]
 8009bda:	444e      	add	r6, r9
 8009bdc:	6026      	str	r6, [r4, #0]
 8009bde:	463e      	mov	r6, r7
 8009be0:	6165      	str	r5, [r4, #20]
 8009be2:	eba5 0509 	sub.w	r5, r5, r9
 8009be6:	60a5      	str	r5, [r4, #8]
 8009be8:	42be      	cmp	r6, r7
 8009bea:	d900      	bls.n	8009bee <__ssputs_r+0x86>
 8009bec:	463e      	mov	r6, r7
 8009bee:	4632      	mov	r2, r6
 8009bf0:	4641      	mov	r1, r8
 8009bf2:	6820      	ldr	r0, [r4, #0]
 8009bf4:	f000 faba 	bl	800a16c <memmove>
 8009bf8:	68a3      	ldr	r3, [r4, #8]
 8009bfa:	6822      	ldr	r2, [r4, #0]
 8009bfc:	1b9b      	subs	r3, r3, r6
 8009bfe:	4432      	add	r2, r6
 8009c00:	2000      	movs	r0, #0
 8009c02:	60a3      	str	r3, [r4, #8]
 8009c04:	6022      	str	r2, [r4, #0]
 8009c06:	e7db      	b.n	8009bc0 <__ssputs_r+0x58>
 8009c08:	462a      	mov	r2, r5
 8009c0a:	f000 fac9 	bl	800a1a0 <_realloc_r>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1e1      	bne.n	8009bd8 <__ssputs_r+0x70>
 8009c14:	4650      	mov	r0, sl
 8009c16:	6921      	ldr	r1, [r4, #16]
 8009c18:	f7ff fec4 	bl	80099a4 <_free_r>
 8009c1c:	e7c7      	b.n	8009bae <__ssputs_r+0x46>
	...

08009c20 <_svfiprintf_r>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	4698      	mov	r8, r3
 8009c26:	898b      	ldrh	r3, [r1, #12]
 8009c28:	4607      	mov	r7, r0
 8009c2a:	061b      	lsls	r3, r3, #24
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	4614      	mov	r4, r2
 8009c30:	b09d      	sub	sp, #116	; 0x74
 8009c32:	d50e      	bpl.n	8009c52 <_svfiprintf_r+0x32>
 8009c34:	690b      	ldr	r3, [r1, #16]
 8009c36:	b963      	cbnz	r3, 8009c52 <_svfiprintf_r+0x32>
 8009c38:	2140      	movs	r1, #64	; 0x40
 8009c3a:	f7ff feff 	bl	8009a3c <_malloc_r>
 8009c3e:	6028      	str	r0, [r5, #0]
 8009c40:	6128      	str	r0, [r5, #16]
 8009c42:	b920      	cbnz	r0, 8009c4e <_svfiprintf_r+0x2e>
 8009c44:	230c      	movs	r3, #12
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	e0d1      	b.n	8009df2 <_svfiprintf_r+0x1d2>
 8009c4e:	2340      	movs	r3, #64	; 0x40
 8009c50:	616b      	str	r3, [r5, #20]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9309      	str	r3, [sp, #36]	; 0x24
 8009c56:	2320      	movs	r3, #32
 8009c58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c5c:	2330      	movs	r3, #48	; 0x30
 8009c5e:	f04f 0901 	mov.w	r9, #1
 8009c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e0c <_svfiprintf_r+0x1ec>
 8009c6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c6e:	4623      	mov	r3, r4
 8009c70:	469a      	mov	sl, r3
 8009c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c76:	b10a      	cbz	r2, 8009c7c <_svfiprintf_r+0x5c>
 8009c78:	2a25      	cmp	r2, #37	; 0x25
 8009c7a:	d1f9      	bne.n	8009c70 <_svfiprintf_r+0x50>
 8009c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c80:	d00b      	beq.n	8009c9a <_svfiprintf_r+0x7a>
 8009c82:	465b      	mov	r3, fp
 8009c84:	4622      	mov	r2, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	4638      	mov	r0, r7
 8009c8a:	f7ff ff6d 	bl	8009b68 <__ssputs_r>
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f000 80aa 	beq.w	8009de8 <_svfiprintf_r+0x1c8>
 8009c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c96:	445a      	add	r2, fp
 8009c98:	9209      	str	r2, [sp, #36]	; 0x24
 8009c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 80a2 	beq.w	8009de8 <_svfiprintf_r+0x1c8>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8009caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cae:	f10a 0a01 	add.w	sl, sl, #1
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	9307      	str	r3, [sp, #28]
 8009cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cba:	931a      	str	r3, [sp, #104]	; 0x68
 8009cbc:	4654      	mov	r4, sl
 8009cbe:	2205      	movs	r2, #5
 8009cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc4:	4851      	ldr	r0, [pc, #324]	; (8009e0c <_svfiprintf_r+0x1ec>)
 8009cc6:	f000 fa43 	bl	800a150 <memchr>
 8009cca:	9a04      	ldr	r2, [sp, #16]
 8009ccc:	b9d8      	cbnz	r0, 8009d06 <_svfiprintf_r+0xe6>
 8009cce:	06d0      	lsls	r0, r2, #27
 8009cd0:	bf44      	itt	mi
 8009cd2:	2320      	movmi	r3, #32
 8009cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd8:	0711      	lsls	r1, r2, #28
 8009cda:	bf44      	itt	mi
 8009cdc:	232b      	movmi	r3, #43	; 0x2b
 8009cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce8:	d015      	beq.n	8009d16 <_svfiprintf_r+0xf6>
 8009cea:	4654      	mov	r4, sl
 8009cec:	2000      	movs	r0, #0
 8009cee:	f04f 0c0a 	mov.w	ip, #10
 8009cf2:	9a07      	ldr	r2, [sp, #28]
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cfa:	3b30      	subs	r3, #48	; 0x30
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d94e      	bls.n	8009d9e <_svfiprintf_r+0x17e>
 8009d00:	b1b0      	cbz	r0, 8009d30 <_svfiprintf_r+0x110>
 8009d02:	9207      	str	r2, [sp, #28]
 8009d04:	e014      	b.n	8009d30 <_svfiprintf_r+0x110>
 8009d06:	eba0 0308 	sub.w	r3, r0, r8
 8009d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	46a2      	mov	sl, r4
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	e7d2      	b.n	8009cbc <_svfiprintf_r+0x9c>
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	1d19      	adds	r1, r3, #4
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	9103      	str	r1, [sp, #12]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bfbb      	ittet	lt
 8009d22:	425b      	neglt	r3, r3
 8009d24:	f042 0202 	orrlt.w	r2, r2, #2
 8009d28:	9307      	strge	r3, [sp, #28]
 8009d2a:	9307      	strlt	r3, [sp, #28]
 8009d2c:	bfb8      	it	lt
 8009d2e:	9204      	strlt	r2, [sp, #16]
 8009d30:	7823      	ldrb	r3, [r4, #0]
 8009d32:	2b2e      	cmp	r3, #46	; 0x2e
 8009d34:	d10c      	bne.n	8009d50 <_svfiprintf_r+0x130>
 8009d36:	7863      	ldrb	r3, [r4, #1]
 8009d38:	2b2a      	cmp	r3, #42	; 0x2a
 8009d3a:	d135      	bne.n	8009da8 <_svfiprintf_r+0x188>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	3402      	adds	r4, #2
 8009d40:	1d1a      	adds	r2, r3, #4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	9203      	str	r2, [sp, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfb8      	it	lt
 8009d4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d4e:	9305      	str	r3, [sp, #20]
 8009d50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e1c <_svfiprintf_r+0x1fc>
 8009d54:	2203      	movs	r2, #3
 8009d56:	4650      	mov	r0, sl
 8009d58:	7821      	ldrb	r1, [r4, #0]
 8009d5a:	f000 f9f9 	bl	800a150 <memchr>
 8009d5e:	b140      	cbz	r0, 8009d72 <_svfiprintf_r+0x152>
 8009d60:	2340      	movs	r3, #64	; 0x40
 8009d62:	eba0 000a 	sub.w	r0, r0, sl
 8009d66:	fa03 f000 	lsl.w	r0, r3, r0
 8009d6a:	9b04      	ldr	r3, [sp, #16]
 8009d6c:	3401      	adds	r4, #1
 8009d6e:	4303      	orrs	r3, r0
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d76:	2206      	movs	r2, #6
 8009d78:	4825      	ldr	r0, [pc, #148]	; (8009e10 <_svfiprintf_r+0x1f0>)
 8009d7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d7e:	f000 f9e7 	bl	800a150 <memchr>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d038      	beq.n	8009df8 <_svfiprintf_r+0x1d8>
 8009d86:	4b23      	ldr	r3, [pc, #140]	; (8009e14 <_svfiprintf_r+0x1f4>)
 8009d88:	bb1b      	cbnz	r3, 8009dd2 <_svfiprintf_r+0x1b2>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	3307      	adds	r3, #7
 8009d8e:	f023 0307 	bic.w	r3, r3, #7
 8009d92:	3308      	adds	r3, #8
 8009d94:	9303      	str	r3, [sp, #12]
 8009d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d98:	4433      	add	r3, r6
 8009d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d9c:	e767      	b.n	8009c6e <_svfiprintf_r+0x4e>
 8009d9e:	460c      	mov	r4, r1
 8009da0:	2001      	movs	r0, #1
 8009da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009da6:	e7a5      	b.n	8009cf4 <_svfiprintf_r+0xd4>
 8009da8:	2300      	movs	r3, #0
 8009daa:	f04f 0c0a 	mov.w	ip, #10
 8009dae:	4619      	mov	r1, r3
 8009db0:	3401      	adds	r4, #1
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	4620      	mov	r0, r4
 8009db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dba:	3a30      	subs	r2, #48	; 0x30
 8009dbc:	2a09      	cmp	r2, #9
 8009dbe:	d903      	bls.n	8009dc8 <_svfiprintf_r+0x1a8>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0c5      	beq.n	8009d50 <_svfiprintf_r+0x130>
 8009dc4:	9105      	str	r1, [sp, #20]
 8009dc6:	e7c3      	b.n	8009d50 <_svfiprintf_r+0x130>
 8009dc8:	4604      	mov	r4, r0
 8009dca:	2301      	movs	r3, #1
 8009dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dd0:	e7f0      	b.n	8009db4 <_svfiprintf_r+0x194>
 8009dd2:	ab03      	add	r3, sp, #12
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	462a      	mov	r2, r5
 8009dd8:	4638      	mov	r0, r7
 8009dda:	4b0f      	ldr	r3, [pc, #60]	; (8009e18 <_svfiprintf_r+0x1f8>)
 8009ddc:	a904      	add	r1, sp, #16
 8009dde:	f3af 8000 	nop.w
 8009de2:	1c42      	adds	r2, r0, #1
 8009de4:	4606      	mov	r6, r0
 8009de6:	d1d6      	bne.n	8009d96 <_svfiprintf_r+0x176>
 8009de8:	89ab      	ldrh	r3, [r5, #12]
 8009dea:	065b      	lsls	r3, r3, #25
 8009dec:	f53f af2c 	bmi.w	8009c48 <_svfiprintf_r+0x28>
 8009df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009df2:	b01d      	add	sp, #116	; 0x74
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	ab03      	add	r3, sp, #12
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	462a      	mov	r2, r5
 8009dfe:	4638      	mov	r0, r7
 8009e00:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <_svfiprintf_r+0x1f8>)
 8009e02:	a904      	add	r1, sp, #16
 8009e04:	f000 f87c 	bl	8009f00 <_printf_i>
 8009e08:	e7eb      	b.n	8009de2 <_svfiprintf_r+0x1c2>
 8009e0a:	bf00      	nop
 8009e0c:	0800a424 	.word	0x0800a424
 8009e10:	0800a42e 	.word	0x0800a42e
 8009e14:	00000000 	.word	0x00000000
 8009e18:	08009b69 	.word	0x08009b69
 8009e1c:	0800a42a 	.word	0x0800a42a

08009e20 <_printf_common>:
 8009e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e24:	4616      	mov	r6, r2
 8009e26:	4699      	mov	r9, r3
 8009e28:	688a      	ldr	r2, [r1, #8]
 8009e2a:	690b      	ldr	r3, [r1, #16]
 8009e2c:	4607      	mov	r7, r0
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	bfb8      	it	lt
 8009e32:	4613      	movlt	r3, r2
 8009e34:	6033      	str	r3, [r6, #0]
 8009e36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e40:	b10a      	cbz	r2, 8009e46 <_printf_common+0x26>
 8009e42:	3301      	adds	r3, #1
 8009e44:	6033      	str	r3, [r6, #0]
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	0699      	lsls	r1, r3, #26
 8009e4a:	bf42      	ittt	mi
 8009e4c:	6833      	ldrmi	r3, [r6, #0]
 8009e4e:	3302      	addmi	r3, #2
 8009e50:	6033      	strmi	r3, [r6, #0]
 8009e52:	6825      	ldr	r5, [r4, #0]
 8009e54:	f015 0506 	ands.w	r5, r5, #6
 8009e58:	d106      	bne.n	8009e68 <_printf_common+0x48>
 8009e5a:	f104 0a19 	add.w	sl, r4, #25
 8009e5e:	68e3      	ldr	r3, [r4, #12]
 8009e60:	6832      	ldr	r2, [r6, #0]
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	42ab      	cmp	r3, r5
 8009e66:	dc28      	bgt.n	8009eba <_printf_common+0x9a>
 8009e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e6c:	1e13      	subs	r3, r2, #0
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	bf18      	it	ne
 8009e72:	2301      	movne	r3, #1
 8009e74:	0692      	lsls	r2, r2, #26
 8009e76:	d42d      	bmi.n	8009ed4 <_printf_common+0xb4>
 8009e78:	4649      	mov	r1, r9
 8009e7a:	4638      	mov	r0, r7
 8009e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e80:	47c0      	blx	r8
 8009e82:	3001      	adds	r0, #1
 8009e84:	d020      	beq.n	8009ec8 <_printf_common+0xa8>
 8009e86:	6823      	ldr	r3, [r4, #0]
 8009e88:	68e5      	ldr	r5, [r4, #12]
 8009e8a:	f003 0306 	and.w	r3, r3, #6
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	bf18      	it	ne
 8009e92:	2500      	movne	r5, #0
 8009e94:	6832      	ldr	r2, [r6, #0]
 8009e96:	f04f 0600 	mov.w	r6, #0
 8009e9a:	68a3      	ldr	r3, [r4, #8]
 8009e9c:	bf08      	it	eq
 8009e9e:	1aad      	subeq	r5, r5, r2
 8009ea0:	6922      	ldr	r2, [r4, #16]
 8009ea2:	bf08      	it	eq
 8009ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bfc4      	itt	gt
 8009eac:	1a9b      	subgt	r3, r3, r2
 8009eae:	18ed      	addgt	r5, r5, r3
 8009eb0:	341a      	adds	r4, #26
 8009eb2:	42b5      	cmp	r5, r6
 8009eb4:	d11a      	bne.n	8009eec <_printf_common+0xcc>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	e008      	b.n	8009ecc <_printf_common+0xac>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	47c0      	blx	r8
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d103      	bne.n	8009ed0 <_printf_common+0xb0>
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed0:	3501      	adds	r5, #1
 8009ed2:	e7c4      	b.n	8009e5e <_printf_common+0x3e>
 8009ed4:	2030      	movs	r0, #48	; 0x30
 8009ed6:	18e1      	adds	r1, r4, r3
 8009ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ee2:	4422      	add	r2, r4
 8009ee4:	3302      	adds	r3, #2
 8009ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009eea:	e7c5      	b.n	8009e78 <_printf_common+0x58>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4622      	mov	r2, r4
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	47c0      	blx	r8
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d0e6      	beq.n	8009ec8 <_printf_common+0xa8>
 8009efa:	3601      	adds	r6, #1
 8009efc:	e7d9      	b.n	8009eb2 <_printf_common+0x92>
	...

08009f00 <_printf_i>:
 8009f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	460c      	mov	r4, r1
 8009f06:	7e27      	ldrb	r7, [r4, #24]
 8009f08:	4691      	mov	r9, r2
 8009f0a:	2f78      	cmp	r7, #120	; 0x78
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	469a      	mov	sl, r3
 8009f10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f16:	d807      	bhi.n	8009f28 <_printf_i+0x28>
 8009f18:	2f62      	cmp	r7, #98	; 0x62
 8009f1a:	d80a      	bhi.n	8009f32 <_printf_i+0x32>
 8009f1c:	2f00      	cmp	r7, #0
 8009f1e:	f000 80d9 	beq.w	800a0d4 <_printf_i+0x1d4>
 8009f22:	2f58      	cmp	r7, #88	; 0x58
 8009f24:	f000 80a4 	beq.w	800a070 <_printf_i+0x170>
 8009f28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f30:	e03a      	b.n	8009fa8 <_printf_i+0xa8>
 8009f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f36:	2b15      	cmp	r3, #21
 8009f38:	d8f6      	bhi.n	8009f28 <_printf_i+0x28>
 8009f3a:	a001      	add	r0, pc, #4	; (adr r0, 8009f40 <_printf_i+0x40>)
 8009f3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f40:	08009f99 	.word	0x08009f99
 8009f44:	08009fad 	.word	0x08009fad
 8009f48:	08009f29 	.word	0x08009f29
 8009f4c:	08009f29 	.word	0x08009f29
 8009f50:	08009f29 	.word	0x08009f29
 8009f54:	08009f29 	.word	0x08009f29
 8009f58:	08009fad 	.word	0x08009fad
 8009f5c:	08009f29 	.word	0x08009f29
 8009f60:	08009f29 	.word	0x08009f29
 8009f64:	08009f29 	.word	0x08009f29
 8009f68:	08009f29 	.word	0x08009f29
 8009f6c:	0800a0bb 	.word	0x0800a0bb
 8009f70:	08009fdd 	.word	0x08009fdd
 8009f74:	0800a09d 	.word	0x0800a09d
 8009f78:	08009f29 	.word	0x08009f29
 8009f7c:	08009f29 	.word	0x08009f29
 8009f80:	0800a0dd 	.word	0x0800a0dd
 8009f84:	08009f29 	.word	0x08009f29
 8009f88:	08009fdd 	.word	0x08009fdd
 8009f8c:	08009f29 	.word	0x08009f29
 8009f90:	08009f29 	.word	0x08009f29
 8009f94:	0800a0a5 	.word	0x0800a0a5
 8009f98:	680b      	ldr	r3, [r1, #0]
 8009f9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f9e:	1d1a      	adds	r2, r3, #4
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	600a      	str	r2, [r1, #0]
 8009fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e0a4      	b.n	800a0f6 <_printf_i+0x1f6>
 8009fac:	6825      	ldr	r5, [r4, #0]
 8009fae:	6808      	ldr	r0, [r1, #0]
 8009fb0:	062e      	lsls	r6, r5, #24
 8009fb2:	f100 0304 	add.w	r3, r0, #4
 8009fb6:	d50a      	bpl.n	8009fce <_printf_i+0xce>
 8009fb8:	6805      	ldr	r5, [r0, #0]
 8009fba:	600b      	str	r3, [r1, #0]
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	da03      	bge.n	8009fc8 <_printf_i+0xc8>
 8009fc0:	232d      	movs	r3, #45	; 0x2d
 8009fc2:	426d      	negs	r5, r5
 8009fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc8:	230a      	movs	r3, #10
 8009fca:	485e      	ldr	r0, [pc, #376]	; (800a144 <_printf_i+0x244>)
 8009fcc:	e019      	b.n	800a002 <_printf_i+0x102>
 8009fce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fd2:	6805      	ldr	r5, [r0, #0]
 8009fd4:	600b      	str	r3, [r1, #0]
 8009fd6:	bf18      	it	ne
 8009fd8:	b22d      	sxthne	r5, r5
 8009fda:	e7ef      	b.n	8009fbc <_printf_i+0xbc>
 8009fdc:	680b      	ldr	r3, [r1, #0]
 8009fde:	6825      	ldr	r5, [r4, #0]
 8009fe0:	1d18      	adds	r0, r3, #4
 8009fe2:	6008      	str	r0, [r1, #0]
 8009fe4:	0628      	lsls	r0, r5, #24
 8009fe6:	d501      	bpl.n	8009fec <_printf_i+0xec>
 8009fe8:	681d      	ldr	r5, [r3, #0]
 8009fea:	e002      	b.n	8009ff2 <_printf_i+0xf2>
 8009fec:	0669      	lsls	r1, r5, #25
 8009fee:	d5fb      	bpl.n	8009fe8 <_printf_i+0xe8>
 8009ff0:	881d      	ldrh	r5, [r3, #0]
 8009ff2:	2f6f      	cmp	r7, #111	; 0x6f
 8009ff4:	bf0c      	ite	eq
 8009ff6:	2308      	moveq	r3, #8
 8009ff8:	230a      	movne	r3, #10
 8009ffa:	4852      	ldr	r0, [pc, #328]	; (800a144 <_printf_i+0x244>)
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a002:	6866      	ldr	r6, [r4, #4]
 800a004:	2e00      	cmp	r6, #0
 800a006:	bfa8      	it	ge
 800a008:	6821      	ldrge	r1, [r4, #0]
 800a00a:	60a6      	str	r6, [r4, #8]
 800a00c:	bfa4      	itt	ge
 800a00e:	f021 0104 	bicge.w	r1, r1, #4
 800a012:	6021      	strge	r1, [r4, #0]
 800a014:	b90d      	cbnz	r5, 800a01a <_printf_i+0x11a>
 800a016:	2e00      	cmp	r6, #0
 800a018:	d04d      	beq.n	800a0b6 <_printf_i+0x1b6>
 800a01a:	4616      	mov	r6, r2
 800a01c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a020:	fb03 5711 	mls	r7, r3, r1, r5
 800a024:	5dc7      	ldrb	r7, [r0, r7]
 800a026:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a02a:	462f      	mov	r7, r5
 800a02c:	42bb      	cmp	r3, r7
 800a02e:	460d      	mov	r5, r1
 800a030:	d9f4      	bls.n	800a01c <_printf_i+0x11c>
 800a032:	2b08      	cmp	r3, #8
 800a034:	d10b      	bne.n	800a04e <_printf_i+0x14e>
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	07df      	lsls	r7, r3, #31
 800a03a:	d508      	bpl.n	800a04e <_printf_i+0x14e>
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	6861      	ldr	r1, [r4, #4]
 800a040:	4299      	cmp	r1, r3
 800a042:	bfde      	ittt	le
 800a044:	2330      	movle	r3, #48	; 0x30
 800a046:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a04a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a04e:	1b92      	subs	r2, r2, r6
 800a050:	6122      	str	r2, [r4, #16]
 800a052:	464b      	mov	r3, r9
 800a054:	4621      	mov	r1, r4
 800a056:	4640      	mov	r0, r8
 800a058:	f8cd a000 	str.w	sl, [sp]
 800a05c:	aa03      	add	r2, sp, #12
 800a05e:	f7ff fedf 	bl	8009e20 <_printf_common>
 800a062:	3001      	adds	r0, #1
 800a064:	d14c      	bne.n	800a100 <_printf_i+0x200>
 800a066:	f04f 30ff 	mov.w	r0, #4294967295
 800a06a:	b004      	add	sp, #16
 800a06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a070:	4834      	ldr	r0, [pc, #208]	; (800a144 <_printf_i+0x244>)
 800a072:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a076:	680e      	ldr	r6, [r1, #0]
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a07e:	061f      	lsls	r7, r3, #24
 800a080:	600e      	str	r6, [r1, #0]
 800a082:	d514      	bpl.n	800a0ae <_printf_i+0x1ae>
 800a084:	07d9      	lsls	r1, r3, #31
 800a086:	bf44      	itt	mi
 800a088:	f043 0320 	orrmi.w	r3, r3, #32
 800a08c:	6023      	strmi	r3, [r4, #0]
 800a08e:	b91d      	cbnz	r5, 800a098 <_printf_i+0x198>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	f023 0320 	bic.w	r3, r3, #32
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	2310      	movs	r3, #16
 800a09a:	e7af      	b.n	8009ffc <_printf_i+0xfc>
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	f043 0320 	orr.w	r3, r3, #32
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	2378      	movs	r3, #120	; 0x78
 800a0a6:	4828      	ldr	r0, [pc, #160]	; (800a148 <_printf_i+0x248>)
 800a0a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0ac:	e7e3      	b.n	800a076 <_printf_i+0x176>
 800a0ae:	065e      	lsls	r6, r3, #25
 800a0b0:	bf48      	it	mi
 800a0b2:	b2ad      	uxthmi	r5, r5
 800a0b4:	e7e6      	b.n	800a084 <_printf_i+0x184>
 800a0b6:	4616      	mov	r6, r2
 800a0b8:	e7bb      	b.n	800a032 <_printf_i+0x132>
 800a0ba:	680b      	ldr	r3, [r1, #0]
 800a0bc:	6826      	ldr	r6, [r4, #0]
 800a0be:	1d1d      	adds	r5, r3, #4
 800a0c0:	6960      	ldr	r0, [r4, #20]
 800a0c2:	600d      	str	r5, [r1, #0]
 800a0c4:	0635      	lsls	r5, r6, #24
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	d501      	bpl.n	800a0ce <_printf_i+0x1ce>
 800a0ca:	6018      	str	r0, [r3, #0]
 800a0cc:	e002      	b.n	800a0d4 <_printf_i+0x1d4>
 800a0ce:	0671      	lsls	r1, r6, #25
 800a0d0:	d5fb      	bpl.n	800a0ca <_printf_i+0x1ca>
 800a0d2:	8018      	strh	r0, [r3, #0]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4616      	mov	r6, r2
 800a0d8:	6123      	str	r3, [r4, #16]
 800a0da:	e7ba      	b.n	800a052 <_printf_i+0x152>
 800a0dc:	680b      	ldr	r3, [r1, #0]
 800a0de:	1d1a      	adds	r2, r3, #4
 800a0e0:	600a      	str	r2, [r1, #0]
 800a0e2:	681e      	ldr	r6, [r3, #0]
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	6862      	ldr	r2, [r4, #4]
 800a0ea:	f000 f831 	bl	800a150 <memchr>
 800a0ee:	b108      	cbz	r0, 800a0f4 <_printf_i+0x1f4>
 800a0f0:	1b80      	subs	r0, r0, r6
 800a0f2:	6060      	str	r0, [r4, #4]
 800a0f4:	6863      	ldr	r3, [r4, #4]
 800a0f6:	6123      	str	r3, [r4, #16]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0fe:	e7a8      	b.n	800a052 <_printf_i+0x152>
 800a100:	4632      	mov	r2, r6
 800a102:	4649      	mov	r1, r9
 800a104:	4640      	mov	r0, r8
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	47d0      	blx	sl
 800a10a:	3001      	adds	r0, #1
 800a10c:	d0ab      	beq.n	800a066 <_printf_i+0x166>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	079b      	lsls	r3, r3, #30
 800a112:	d413      	bmi.n	800a13c <_printf_i+0x23c>
 800a114:	68e0      	ldr	r0, [r4, #12]
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	4298      	cmp	r0, r3
 800a11a:	bfb8      	it	lt
 800a11c:	4618      	movlt	r0, r3
 800a11e:	e7a4      	b.n	800a06a <_printf_i+0x16a>
 800a120:	2301      	movs	r3, #1
 800a122:	4632      	mov	r2, r6
 800a124:	4649      	mov	r1, r9
 800a126:	4640      	mov	r0, r8
 800a128:	47d0      	blx	sl
 800a12a:	3001      	adds	r0, #1
 800a12c:	d09b      	beq.n	800a066 <_printf_i+0x166>
 800a12e:	3501      	adds	r5, #1
 800a130:	68e3      	ldr	r3, [r4, #12]
 800a132:	9903      	ldr	r1, [sp, #12]
 800a134:	1a5b      	subs	r3, r3, r1
 800a136:	42ab      	cmp	r3, r5
 800a138:	dcf2      	bgt.n	800a120 <_printf_i+0x220>
 800a13a:	e7eb      	b.n	800a114 <_printf_i+0x214>
 800a13c:	2500      	movs	r5, #0
 800a13e:	f104 0619 	add.w	r6, r4, #25
 800a142:	e7f5      	b.n	800a130 <_printf_i+0x230>
 800a144:	0800a435 	.word	0x0800a435
 800a148:	0800a446 	.word	0x0800a446

0800a14c <__retarget_lock_acquire_recursive>:
 800a14c:	4770      	bx	lr

0800a14e <__retarget_lock_release_recursive>:
 800a14e:	4770      	bx	lr

0800a150 <memchr>:
 800a150:	4603      	mov	r3, r0
 800a152:	b510      	push	{r4, lr}
 800a154:	b2c9      	uxtb	r1, r1
 800a156:	4402      	add	r2, r0
 800a158:	4293      	cmp	r3, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	d101      	bne.n	800a162 <memchr+0x12>
 800a15e:	2000      	movs	r0, #0
 800a160:	e003      	b.n	800a16a <memchr+0x1a>
 800a162:	7804      	ldrb	r4, [r0, #0]
 800a164:	3301      	adds	r3, #1
 800a166:	428c      	cmp	r4, r1
 800a168:	d1f6      	bne.n	800a158 <memchr+0x8>
 800a16a:	bd10      	pop	{r4, pc}

0800a16c <memmove>:
 800a16c:	4288      	cmp	r0, r1
 800a16e:	b510      	push	{r4, lr}
 800a170:	eb01 0402 	add.w	r4, r1, r2
 800a174:	d902      	bls.n	800a17c <memmove+0x10>
 800a176:	4284      	cmp	r4, r0
 800a178:	4623      	mov	r3, r4
 800a17a:	d807      	bhi.n	800a18c <memmove+0x20>
 800a17c:	1e43      	subs	r3, r0, #1
 800a17e:	42a1      	cmp	r1, r4
 800a180:	d008      	beq.n	800a194 <memmove+0x28>
 800a182:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a18a:	e7f8      	b.n	800a17e <memmove+0x12>
 800a18c:	4601      	mov	r1, r0
 800a18e:	4402      	add	r2, r0
 800a190:	428a      	cmp	r2, r1
 800a192:	d100      	bne.n	800a196 <memmove+0x2a>
 800a194:	bd10      	pop	{r4, pc}
 800a196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a19a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a19e:	e7f7      	b.n	800a190 <memmove+0x24>

0800a1a0 <_realloc_r>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	4607      	mov	r7, r0
 800a1a4:	4614      	mov	r4, r2
 800a1a6:	460e      	mov	r6, r1
 800a1a8:	b921      	cbnz	r1, 800a1b4 <_realloc_r+0x14>
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1b0:	f7ff bc44 	b.w	8009a3c <_malloc_r>
 800a1b4:	b922      	cbnz	r2, 800a1c0 <_realloc_r+0x20>
 800a1b6:	f7ff fbf5 	bl	80099a4 <_free_r>
 800a1ba:	4625      	mov	r5, r4
 800a1bc:	4628      	mov	r0, r5
 800a1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1c0:	f000 f814 	bl	800a1ec <_malloc_usable_size_r>
 800a1c4:	42a0      	cmp	r0, r4
 800a1c6:	d20f      	bcs.n	800a1e8 <_realloc_r+0x48>
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	f7ff fc36 	bl	8009a3c <_malloc_r>
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d0f2      	beq.n	800a1bc <_realloc_r+0x1c>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4622      	mov	r2, r4
 800a1da:	f7ff fbcd 	bl	8009978 <memcpy>
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f7ff fbdf 	bl	80099a4 <_free_r>
 800a1e6:	e7e9      	b.n	800a1bc <_realloc_r+0x1c>
 800a1e8:	4635      	mov	r5, r6
 800a1ea:	e7e7      	b.n	800a1bc <_realloc_r+0x1c>

0800a1ec <_malloc_usable_size_r>:
 800a1ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1f0:	1f18      	subs	r0, r3, #4
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	bfbc      	itt	lt
 800a1f6:	580b      	ldrlt	r3, [r1, r0]
 800a1f8:	18c0      	addlt	r0, r0, r3
 800a1fa:	4770      	bx	lr

0800a1fc <_init>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	bf00      	nop
 800a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a202:	bc08      	pop	{r3}
 800a204:	469e      	mov	lr, r3
 800a206:	4770      	bx	lr

0800a208 <_fini>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr
