
stm32_PIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f24  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a278  0800a278  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a278  0800a278  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a278  0800a278  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a278  0800a278  0001a278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a27c  0800a27c  0001a27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800a280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  200000a0  0800a320  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800a320  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da9c  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1c  00000000  00000000  0003db65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00041988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  00043020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1c6  00000000  00000000  00044540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019327  00000000  00000000  0005f706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b573  00000000  00000000  00078a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113fa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062cc  00000000  00000000  00113ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a01c 	.word	0x0800a01c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	0800a01c 	.word	0x0800a01c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800061e:	4619      	mov	r1, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	78fa      	ldrb	r2, [r7, #3]
 8000624:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800062c:	3301      	adds	r3, #1
 800062e:	425a      	negs	r2, r3
 8000630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000634:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000638:	bf58      	it	pl
 800063a:	4253      	negpl	r3, r2
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800064a:	2b80      	cmp	r3, #128	; 0x80
 800064c:	d113      	bne.n	8000676 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800065c:	3301      	adds	r3, #1
 800065e:	425a      	negs	r2, r3
 8000660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000668:	bf58      	it	pl
 800066a:	4253      	negpl	r3, r2
 800066c:	b2da      	uxtb	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8000674:	e00b      	b.n	800068e <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80006a8:	461a      	mov	r2, r3
 80006aa:	6839      	ldr	r1, [r7, #0]
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f805 	bl	80006bc <RingGetNBytes>
 80006b2:	4603      	mov	r3, r0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <RingGetNBytes+0x1e>
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <RingGetNBytes+0x22>
 80006da:	2300      	movs	r3, #0
 80006dc:	e03e      	b.n	800075c <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b80      	cmp	r3, #128	; 0x80
 80006e2:	d901      	bls.n	80006e8 <RingGetNBytes+0x2c>
 80006e4:	2300      	movs	r3, #0
 80006e6:	e039      	b.n	800075c <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	75fb      	strb	r3, [r7, #23]
 80006ec:	e01b      	b.n	8000726 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80006f4:	4619      	mov	r1, r3
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	4413      	add	r3, r2
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	5c52      	ldrb	r2, [r2, r1]
 8000700:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000708:	3301      	adds	r3, #1
 800070a:	425a      	negs	r2, r3
 800070c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000714:	bf58      	it	pl
 8000716:	4253      	negpl	r3, r2
 8000718:	b2da      	uxtb	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	3301      	adds	r3, #1
 8000724:	75fb      	strb	r3, [r7, #23]
 8000726:	7dfa      	ldrb	r2, [r7, #23]
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	429a      	cmp	r2, r3
 800072c:	d205      	bcs.n	800073a <RingGetNBytes+0x7e>
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000734:	7dfa      	ldrb	r2, [r7, #23]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3d9      	bcc.n	80006ee <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f000 f805 	bl	8000764 <RingClear>

	return uCounter;
 800075a:	7dfb      	ldrb	r3, [r7, #23]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
	...

08000798 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80007a0:	4b42      	ldr	r3, [pc, #264]	; (80008ac <ModbusInit+0x114>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d87d      	bhi.n	80008a4 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	33bc      	adds	r3, #188	; 0xbc
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ffd9 	bl	8000764 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d109      	bne.n	80007ce <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80007ba:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <ModbusInit+0x118>)
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	483d      	ldr	r0, [pc, #244]	; (80008b4 <ModbusInit+0x11c>)
 80007c0:	f005 fda0 	bl	8006304 <osThreadNew>
 80007c4:	4602      	mov	r2, r0
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80007cc:	e033      	b.n	8000836 <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d12e      	bne.n	8000834 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <ModbusInit+0x120>)
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	4838      	ldr	r0, [pc, #224]	; (80008bc <ModbusInit+0x124>)
 80007dc:	f005 fd92 	bl	8006304 <osThreadNew>
 80007e0:	4602      	mov	r2, r0
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80007ee:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80007f6:	4a32      	ldr	r2, [pc, #200]	; (80008c0 <ModbusInit+0x128>)
 80007f8:	9200      	str	r2, [sp, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4831      	ldr	r0, [pc, #196]	; (80008c4 <ModbusInit+0x12c>)
 80007fe:	f008 fa5b 	bl	8008cb8 <xTimerCreate>
 8000802:	4602      	mov	r2, r0
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000810:	2b00      	cmp	r3, #0
 8000812:	d100      	bne.n	8000816 <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8000814:	e7fe      	b.n	8000814 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <ModbusInit+0x130>)
 8000818:	2110      	movs	r1, #16
 800081a:	2002      	movs	r0, #2
 800081c:	f005 fee6 	bl	80065ec <osMessageQueueNew>
 8000820:	4602      	mov	r2, r0
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8000832:	e7fe      	b.n	8000832 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8000834:	e7fe      	b.n	8000834 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800083c:	2b00      	cmp	r3, #0
 800083e:	d100      	bne.n	8000842 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8000840:	e7fe      	b.n	8000840 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8000848:	4a20      	ldr	r2, [pc, #128]	; (80008cc <ModbusInit+0x134>)
 800084a:	9200      	str	r2, [sp, #0]
 800084c:	2200      	movs	r2, #0
 800084e:	2105      	movs	r1, #5
 8000850:	481f      	ldr	r0, [pc, #124]	; (80008d0 <ModbusInit+0x138>)
 8000852:	f008 fa31 	bl	8008cb8 <xTimerCreate>
 8000856:	4602      	mov	r2, r0
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d100      	bne.n	800086a <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8000868:	e7fe      	b.n	8000868 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 800086a:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <ModbusInit+0x13c>)
 800086c:	2101      	movs	r1, #1
 800086e:	2001      	movs	r0, #1
 8000870:	f005 fe20 	bl	80064b4 <osSemaphoreNew>
 8000874:	4602      	mov	r2, r0
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000882:	2b00      	cmp	r3, #0
 8000884:	d100      	bne.n	8000888 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8000886:	e7fe      	b.n	8000886 <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <ModbusInit+0x114>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <ModbusInit+0x140>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <ModbusInit+0x114>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b03      	ldr	r3, [pc, #12]	; (80008ac <ModbusInit+0x114>)
 80008a0:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80008a2:	e000      	b.n	80008a6 <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 80008a4:	e7fe      	b.n	80008a4 <ModbusInit+0x10c>
}
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000bc 	.word	0x200000bc
 80008b0:	0800a124 	.word	0x0800a124
 80008b4:	08000ac5 	.word	0x08000ac5
 80008b8:	0800a148 	.word	0x0800a148
 80008bc:	08000f39 	.word	0x08000f39
 80008c0:	08000a69 	.word	0x08000a69
 80008c4:	0800a078 	.word	0x0800a078
 80008c8:	0800a10c 	.word	0x0800a10c
 80008cc:	080009e5 	.word	0x080009e5
 80008d0:	0800a088 	.word	0x0800a088
 80008d4:	0800a16c 	.word	0x0800a16c
 80008d8:	20000e7c 	.word	0x20000e7c

080008dc <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d00f      	beq.n	800090e <ModbusStart+0x32>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d00a      	beq.n	800090e <ModbusStart+0x32>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d005      	beq.n	800090e <ModbusStart+0x32>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000908:	2b04      	cmp	r3, #4
 800090a:	d000      	beq.n	800090e <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 800090c:	e7fe      	b.n	800090c <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000914:	2b04      	cmp	r3, #4
 8000916:	d100      	bne.n	800091a <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8000918:	e7fe      	b.n	8000918 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000920:	2b01      	cmp	r3, #1
 8000922:	d004      	beq.n	800092e <ModbusStart+0x52>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800092a:	2b04      	cmp	r3, #4
 800092c:	d13c      	bne.n	80009a8 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d007      	beq.n	8000946 <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	68d8      	ldr	r0, [r3, #12]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	8a1b      	ldrh	r3, [r3, #16]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f003 f9db 	bl	8003cfc <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d105      	bne.n	800095a <ModbusStart+0x7e>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000954:	2b00      	cmp	r3, #0
 8000956:	d100      	bne.n	800095a <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8000958:	e7fe      	b.n	8000958 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800095a:	bf00      	nop
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f005 fa1c 	bl	8005d9e <HAL_UART_GetState>
 8000966:	4603      	mov	r3, r0
 8000968:	2b20      	cmp	r3, #32
 800096a:	d1f7      	bne.n	800095c <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6858      	ldr	r0, [r3, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	33a6      	adds	r3, #166	; 0xa6
 8000974:	2201      	movs	r2, #1
 8000976:	4619      	mov	r1, r3
 8000978:	f004 ff4a 	bl	8005810 <HAL_UART_Receive_IT>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d000      	beq.n	8000984 <ModbusStart+0xa8>
          {
                while(1)
 8000982:	e7fe      	b.n	8000982 <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a1b      	ldrb	r3, [r3, #8]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d004      	beq.n	8000996 <ModbusStart+0xba>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d100      	bne.n	8000996 <ModbusStart+0xba>
          {
        	  while(1)
 8000994:	e7fe      	b.n	8000994 <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	7a1b      	ldrb	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <ModbusStart+0xcc>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d100      	bne.n	80009a8 <ModbusStart+0xcc>
          {
             	  while(1)
 80009a6:	e7fe      	b.n	80009a6 <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e02a      	b.n	8000a48 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80009f2:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <vTimerCallbackT35+0x7c>)
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d11e      	bne.n	8000a42 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8000a04:	4a16      	ldr	r2, [pc, #88]	; (8000a60 <vTimerCallbackT35+0x7c>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d10c      	bne.n	8000a2c <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <vTimerCallbackT35+0x7c>)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	2200      	movs	r2, #0
 8000a26:	2103      	movs	r1, #3
 8000a28:	f008 f99a 	bl	8008d60 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <vTimerCallbackT35+0x7c>)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a34:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f007 ff31 	bl	80088a4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3301      	adds	r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <vTimerCallbackT35+0x80>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4293      	cmp	r3, r2
 8000a52:	dbce      	blt.n	80009f2 <vTimerCallbackT35+0xe>
		}

	}
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000e7c 	.word	0x20000e7c
 8000a64:	200000bc 	.word	0x200000bc

08000a68 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e017      	b.n	8000aa6 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <vTimerCallbackTimeout+0x54>)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d10b      	bne.n	8000aa0 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <vTimerCallbackTimeout+0x54>)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8000a94:	2300      	movs	r3, #0
 8000a96:	2203      	movs	r2, #3
 8000a98:	f06f 0107 	mvn.w	r1, #7
 8000a9c:	f007 ff02 	bl	80088a4 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <vTimerCallbackTimeout+0x58>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	dbe1      	blt.n	8000a76 <vTimerCallbackTimeout+0xe>
		}

	}

}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000e7c 	.word	0x20000e7c
 8000ac0:	200000bc 	.word	0x200000bc

08000ac4 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d004      	beq.n	8000aea <StartTaskModbusSlave+0x26>
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	d117      	bne.n	8000b1a <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8000aea:	f04f 31ff 	mov.w	r1, #4294967295
 8000aee:	2001      	movs	r0, #1
 8000af0:	f007 fe90 	bl	8008814 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f000 fbe9 	bl	80012cc <getRxBuffer>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f113 0f03 	cmn.w	r3, #3
 8000b00:	d10b      	bne.n	8000b1a <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	22fd      	movs	r2, #253	; 0xfd
 8000b06:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8000b18:	e0a1      	b.n	8000c5e <StartTaskModbusSlave+0x19a>
	  }
	   //modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
   }

   if (modH->u8BufferSize < 7)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000b20:	2b06      	cmp	r3, #6
 8000b22:	d80b      	bhi.n	8000b3c <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	22fa      	movs	r2, #250	; 0xfa
 8000b28:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000b30:	3301      	adds	r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	  {
		  netconn_close(modH->newconn);
		  netconn_delete(modH->newconn);
	  }
  #endif
	  continue;
 8000b3a:	e090      	b.n	8000c5e <StartTaskModbusSlave+0x19a>
    }

		// check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	7cda      	ldrb	r2, [r3, #19]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	7a1b      	ldrb	r3, [r3, #8]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 8089 	bne.w	8000c5c <StartTaskModbusSlave+0x198>
        #endif
		continue;
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f000 fc08 	bl	8001360 <validateRequest>
 8000b50:	4603      	mov	r3, r0
 8000b52:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8000b54:	7afb      	ldrb	r3, [r7, #11]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00c      	beq.n	8000b74 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8000b5a:	7afb      	ldrb	r3, [r7, #11]
 8000b5c:	68f9      	ldr	r1, [r7, #12]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fda0 	bl	80016a4 <buildException>
			sendTxBuffer(modH);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 fdbb 	bl	80016e0 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8000b6a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	749a      	strb	r2, [r3, #18]
		{
		    netconn_close(modH->newconn);
		  	netconn_delete(modH->newconn);
		}
        #endif
		continue;
 8000b72:	e074      	b.n	8000c5e <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2200      	movs	r2, #0
 8000b78:	749a      	strb	r2, [r3, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	4618      	mov	r0, r3
 8000b86:	f006 fb2b 	bl	80071e0 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	7d1b      	ldrb	r3, [r3, #20]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d859      	bhi.n	8000c48 <StartTaskModbusSlave+0x184>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <StartTaskModbusSlave+0xd8>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000bdd 	.word	0x08000bdd
 8000ba0:	08000bdd 	.word	0x08000bdd
 8000ba4:	08000bef 	.word	0x08000bef
 8000ba8:	08000bef 	.word	0x08000bef
 8000bac:	08000c01 	.word	0x08000c01
 8000bb0:	08000c13 	.word	0x08000c13
 8000bb4:	08000c49 	.word	0x08000c49
 8000bb8:	08000c49 	.word	0x08000c49
 8000bbc:	08000c49 	.word	0x08000c49
 8000bc0:	08000c49 	.word	0x08000c49
 8000bc4:	08000c49 	.word	0x08000c49
 8000bc8:	08000c49 	.word	0x08000c49
 8000bcc:	08000c49 	.word	0x08000c49
 8000bd0:	08000c49 	.word	0x08000c49
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c37 	.word	0x08000c37
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f000 fe0f 	bl	8001800 <process_FC1>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000bec:	e02d      	b.n	8000c4a <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f000 febb 	bl	800196a <process_FC3>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000bfe:	e024      	b.n	8000c4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8000c00:	68f8      	ldr	r0, [r7, #12]
 8000c02:	f000 ff1d 	bl	8001a40 <process_FC5>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000c10:	e01b      	b.n	8000c4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f000 ff6d 	bl	8001af2 <process_FC6>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000c22:	e012      	b.n	8000c4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f000 ff96 	bl	8001b56 <process_FC15>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000c34:	e009      	b.n	8000c4a <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f001 f81b 	bl	8001c72 <process_FC16>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000c46:	e000      	b.n	8000c4a <StartTaskModbusSlave+0x186>
			default:
				break;
 8000c48:	bf00      	nop
	    netconn_close(modH->newconn);
	  	netconn_delete(modH->newconn);
	 }
   #endif

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000c50:	2300      	movs	r3, #0
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	f006 f84d 	bl	8006cf4 <xQueueGenericSend>

	 continue;
 8000c5a:	e000      	b.n	8000c5e <StartTaskModbusSlave+0x19a>
		continue;
 8000c5c:	bf00      	nop
  {
 8000c5e:	e737      	b.n	8000ad0 <StartTaskModbusSlave+0xc>

08000c60 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8000c60:	b084      	sub	sp, #16
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	f107 001c 	add.w	r0, r7, #28
 8000c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	4618      	mov	r0, r3
 8000c82:	f006 faad 	bl	80071e0 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7a1b      	ldrb	r3, [r3, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SendQuery+0x32>
 8000c8e:	23ff      	movs	r3, #255	; 0xff
 8000c90:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SendQuery+0x40>
 8000c9c:	23fe      	movs	r3, #254	; 0xfe
 8000c9e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8000ca0:	7f3b      	ldrb	r3, [r7, #28]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <SendQuery+0x4c>
 8000ca6:	7f3b      	ldrb	r3, [r7, #28]
 8000ca8:	2bf7      	cmp	r3, #247	; 0xf7
 8000caa:	d901      	bls.n	8000cb0 <SendQuery+0x50>
 8000cac:	23f7      	movs	r3, #247	; 0xf7
 8000cae:	73bb      	strb	r3, [r7, #14]

	if(error)
 8000cb0:	7bbb      	ldrb	r3, [r7, #14]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00e      	beq.n	8000cd4 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8000cb6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	f006 f813 	bl	8006cf4 <xQueueGenericSend>
		 return error;
 8000cce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cd2:	e129      	b.n	8000f28 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8000cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8000cdc:	7f3a      	ldrb	r2, [r7, #28]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8000ce2:	7f7a      	ldrb	r2, [r7, #29]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8000ce8:	8bfb      	ldrh	r3, [r7, #30]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8000cf4:	8bfb      	ldrh	r3, [r7, #30]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8000cfc:	7f7b      	ldrb	r3, [r7, #29]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	f200 80fe 	bhi.w	8000f02 <SendQuery+0x2a2>
 8000d06:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <SendQuery+0xac>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000d4d 	.word	0x08000d4d
 8000d10:	08000d4d 	.word	0x08000d4d
 8000d14:	08000d4d 	.word	0x08000d4d
 8000d18:	08000d4d 	.word	0x08000d4d
 8000d1c:	08000d6b 	.word	0x08000d6b
 8000d20:	08000d8d 	.word	0x08000d8d
 8000d24:	08000f03 	.word	0x08000f03
 8000d28:	08000f03 	.word	0x08000f03
 8000d2c:	08000f03 	.word	0x08000f03
 8000d30:	08000f03 	.word	0x08000f03
 8000d34:	08000f03 	.word	0x08000f03
 8000d38:	08000f03 	.word	0x08000f03
 8000d3c:	08000f03 	.word	0x08000f03
 8000d40:	08000f03 	.word	0x08000f03
 8000d44:	08000daf 	.word	0x08000daf
 8000d48:	08000e6d 	.word	0x08000e6d
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000d4c:	8c3b      	ldrh	r3, [r7, #32]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000d58:	8c3b      	ldrh	r3, [r7, #32]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2206      	movs	r2, #6
 8000d64:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000d68:	e0cb      	b.n	8000f02 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SendQuery+0x116>
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	e000      	b.n	8000d78 <SendQuery+0x118>
 8000d76:	2200      	movs	r2, #0
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2206      	movs	r2, #6
 8000d86:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000d8a:	e0ba      	b.n	8000f02 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2206      	movs	r2, #6
 8000da8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000dac:	e0a9      	b.n	8000f02 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8000dae:	8c3b      	ldrh	r3, [r7, #32]
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8000db6:	7a7b      	ldrb	r3, [r7, #9]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000dbc:	8c3b      	ldrh	r3, [r7, #32]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8000dce:	7a7b      	ldrb	r3, [r7, #9]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000dd4:	8c3b      	ldrh	r3, [r7, #32]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000de0:	8c3b      	ldrh	r3, [r7, #32]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7bfa      	ldrb	r2, [r7, #15]
 8000dec:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2207      	movs	r2, #7
 8000df2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	81bb      	strh	r3, [r7, #12]
 8000dfa:	e031      	b.n	8000e60 <SendQuery+0x200>
	    {
	        if(i%2)
 8000dfc:	89bb      	ldrh	r3, [r7, #12]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00f      	beq.n	8000e28 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8000e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e0a:	89bb      	ldrh	r3, [r7, #12]
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	440b      	add	r3, r1
 8000e24:	74da      	strb	r2, [r3, #19]
 8000e26:	e010      	b.n	8000e4a <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8000e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	085b      	lsrs	r3, r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000e40:	4619      	mov	r1, r3
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	440b      	add	r3, r1
 8000e48:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000e5a:	89bb      	ldrh	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	81bb      	strh	r3, [r7, #12]
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	89ba      	ldrh	r2, [r7, #12]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d3c8      	bcc.n	8000dfc <SendQuery+0x19c>
	    }
	    break;
 8000e6a:	e04a      	b.n	8000f02 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000e6c:	8c3b      	ldrh	r3, [r7, #32]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000e78:	8c3b      	ldrh	r3, [r7, #32]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8000e80:	8c3b      	ldrh	r3, [r7, #32]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2207      	movs	r2, #7
 8000e90:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	817b      	strh	r3, [r7, #10]
 8000e98:	e02e      	b.n	8000ef8 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8000e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e9c:	897b      	ldrh	r3, [r7, #10]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000eae:	4619      	mov	r1, r3
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	440b      	add	r3, r1
 8000eb6:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eca:	897b      	ldrh	r3, [r7, #10]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000ed8:	4619      	mov	r1, r3
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	440b      	add	r3, r1
 8000ee0:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000ef2:	897b      	ldrh	r3, [r7, #10]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	817b      	strh	r3, [r7, #10]
 8000ef8:	8c3b      	ldrh	r3, [r7, #32]
 8000efa:	897a      	ldrh	r2, [r7, #10]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3cc      	bcc.n	8000e9a <SendQuery+0x23a>
	    }
	    break;
 8000f00:	bf00      	nop
	}

	sendTxBuffer(modH);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 fbec 	bl	80016e0 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000f0e:	2300      	movs	r3, #0
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	f005 feee 	bl	8006cf4 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	749a      	strb	r2, [r3, #18]
	return 0;
 8000f26:	2300      	movs	r3, #0


}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f32:	b004      	add	sp, #16
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f4a:	f107 010c 	add.w	r1, r7, #12
 8000f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f52:	4618      	mov	r0, r3
 8000f54:	f006 f864 	bl	8007020 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f64:	f7ff fe7c 	bl	8000c60 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f007 fc51 	bl	8008814 <ulTaskNotifyTake>
 8000f72:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	2200      	movs	r2, #0
 8000f78:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d018      	beq.n	8000fb2 <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	22f8      	movs	r2, #248	; 0xf8
 8000f8c:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000f9e:	69b8      	ldr	r0, [r7, #24]
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2203      	movs	r2, #3
 8000fac:	f007 fc7a 	bl	80088a4 <xTaskGenericNotify>
    	  continue;
 8000fb0:	e097      	b.n	80010e2 <StartTaskModbusMaster+0x1aa>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8000fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fb4:	f000 f98a 	bl	80012cc <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d818      	bhi.n	8000ff4 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	22fa      	movs	r2, #250	; 0xfa
 8000fce:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000fe0:	69b8      	ldr	r0, [r7, #24]
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2300      	movs	r3, #0
 8000fec:	2203      	movs	r2, #3
 8000fee:	f007 fc59 	bl	80088a4 <xTaskGenericNotify>
		  continue;
 8000ff2:	e076      	b.n	80010e2 <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2200      	movs	r2, #0
 8001002:	2103      	movs	r1, #3
 8001004:	f007 feac 	bl	8008d60 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8001008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800100a:	f000 f8f1 	bl	80011f0 <validateAnswer>
 800100e:	4603      	mov	r3, r0
 8001010:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8001012:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d010      	beq.n	800103c <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	2200      	movs	r2, #0
 800101e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	7ffa      	ldrb	r2, [r7, #31]
 8001026:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001028:	69b8      	ldr	r0, [r7, #24]
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001030:	4619      	mov	r1, r3
 8001032:	2300      	movs	r3, #0
 8001034:	2203      	movs	r2, #3
 8001036:	f007 fc35 	bl	80088a4 <xTaskGenericNotify>
	     continue;
 800103a:	e052      	b.n	80010e2 <StartTaskModbusMaster+0x1aa>
	  }

	  modH->i8lastError = u8exception;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	7ffa      	ldrb	r2, [r7, #31]
 8001040:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	4618      	mov	r0, r3
 800104e:	f006 f8c7 	bl	80071e0 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	7d1b      	ldrb	r3, [r3, #20]
 8001056:	3b01      	subs	r3, #1
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d82b      	bhi.n	80010b4 <StartTaskModbusMaster+0x17c>
 800105c:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <StartTaskModbusMaster+0x12c>)
 800105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001062:	bf00      	nop
 8001064:	080010a5 	.word	0x080010a5
 8001068:	080010a5 	.word	0x080010a5
 800106c:	080010ad 	.word	0x080010ad
 8001070:	080010ad 	.word	0x080010ad
 8001074:	080010b5 	.word	0x080010b5
 8001078:	080010b5 	.word	0x080010b5
 800107c:	080010b5 	.word	0x080010b5
 8001080:	080010b5 	.word	0x080010b5
 8001084:	080010b5 	.word	0x080010b5
 8001088:	080010b5 	.word	0x080010b5
 800108c:	080010b5 	.word	0x080010b5
 8001090:	080010b5 	.word	0x080010b5
 8001094:	080010b5 	.word	0x080010b5
 8001098:	080010b5 	.word	0x080010b5
 800109c:	080010b5 	.word	0x080010b5
 80010a0:	080010b5 	.word	0x080010b5
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 80010a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010a6:	f000 f81d 	bl	80010e4 <get_FC1>
	      break;
 80010aa:	e004      	b.n	80010b6 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 80010ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ae:	f000 f870 	bl	8001192 <get_FC3>
	      break;
 80010b2:	e000      	b.n	80010b6 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80010b4:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80010c4:	2300      	movs	r3, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	f005 fe13 	bl	8006cf4 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80010ce:	69b8      	ldr	r0, [r7, #24]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80010d6:	4619      	mov	r1, r3
 80010d8:	2300      	movs	r3, #0
 80010da:	2203      	movs	r2, #3
 80010dc:	f007 fbe2 	bl	80088a4 <xTaskGenericNotify>
	  continue;
 80010e0:	bf00      	nop
  {
 80010e2:	e72f      	b.n	8000f44 <StartTaskModbusMaster+0xc>

080010e4 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e043      	b.n	800117e <get_FC1+0x9a>

        if(i%2)
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01c      	beq.n	800113c <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	4413      	add	r3, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	7cd8      	ldrb	r0, [r3, #19]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	18d4      	adds	r4, r2, r3
 8001132:	f000 fa5f 	bl	80015f4 <word>
 8001136:	4603      	mov	r3, r0
 8001138:	8023      	strh	r3, [r4, #0]
 800113a:	e01d      	b.n	8001178 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	085b      	lsrs	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b29b      	uxth	r3, r3
 8001152:	b2d8      	uxtb	r0, r3
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	7bbb      	ldrb	r3, [r7, #14]
 8001158:	4413      	add	r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	7cd9      	ldrb	r1, [r3, #19]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	18d4      	adds	r4, r2, r3
 8001170:	f000 fa40 	bl	80015f4 <word>
 8001174:	4603      	mov	r3, r0
 8001176:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	3301      	adds	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7d5b      	ldrb	r3, [r3, #21]
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	429a      	cmp	r2, r3
 8001186:	d3b6      	bcc.n	80010f6 <get_FC1+0x12>
        }

     }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}

08001192 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8001192:	b590      	push	{r4, r7, lr}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800119a:	2303      	movs	r3, #3
 800119c:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	73bb      	strb	r3, [r7, #14]
 80011a2:	e018      	b.n	80011d6 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	7cd8      	ldrb	r0, [r3, #19]
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	3301      	adds	r3, #1
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	7cd9      	ldrb	r1, [r3, #19]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	18d4      	adds	r4, r2, r3
 80011c2:	f000 fa17 	bl	80015f4 <word>
 80011c6:	4603      	mov	r3, r0
 80011c8:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	3302      	adds	r3, #2
 80011ce:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73bb      	strb	r3, [r7, #14]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7d5b      	ldrb	r3, [r3, #21]
 80011da:	085b      	lsrs	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	7bba      	ldrb	r2, [r7, #14]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3df      	bcc.n	80011a4 <get_FC3+0x12>
    }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
	...

080011f0 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80011fe:	3b02      	subs	r3, #2
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	7cdb      	ldrb	r3, [r3, #19]
 8001206:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001208:	b21a      	sxth	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001210:	3b01      	subs	r3, #1
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	440b      	add	r3, r1
 8001216:	7cdb      	ldrb	r3, [r3, #19]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800121e:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f103 0213 	add.w	r2, r3, #19
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800122c:	3b02      	subs	r3, #2
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4619      	mov	r1, r3
 8001232:	4610      	mov	r0, r2
 8001234:	f000 f9f0 	bl	8001618 <calcCRC>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	89bb      	ldrh	r3, [r7, #12]
 800123e:	4293      	cmp	r3, r2
 8001240:	d009      	beq.n	8001256 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001248:	3301      	adds	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8001252:	23fc      	movs	r3, #252	; 0xfc
 8001254:	e034      	b.n	80012c0 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7d1b      	ldrb	r3, [r3, #20]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	da09      	bge.n	8001274 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001266:	3301      	adds	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8001270:	23fb      	movs	r3, #251	; 0xfb
 8001272:	e025      	b.n	80012c0 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001278:	2300      	movs	r3, #0
 800127a:	73bb      	strb	r3, [r7, #14]
 800127c:	e00c      	b.n	8001298 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <validateAnswer+0xd8>)
 8001282:	5cd2      	ldrb	r2, [r2, r3]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	429a      	cmp	r2, r3
 800128a:	d102      	bne.n	8001292 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
            break;
 8001290:	e005      	b.n	800129e <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	3301      	adds	r3, #1
 8001296:	73bb      	strb	r3, [r7, #14]
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d9ef      	bls.n	800127e <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f083 0301 	eor.w	r3, r3, #1
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80012b0:	3301      	adds	r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	0800a17c 	.word	0x0800a17c

080012cc <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d104      	bne.n	80012e8 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fac4 	bl	8005870 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d008      	beq.n	8001304 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	33bc      	adds	r3, #188	; 0xbc
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fa34 	bl	8000764 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 80012fc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8001300:	81fb      	strh	r3, [r7, #14]
 8001302:	e019      	b.n	8001338 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3313      	adds	r3, #19
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f7ff f9c1 	bl	8000698 <RingGetAllBytes>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001326:	3301      	adds	r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001336:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800133e:	2b01      	cmp	r3, #1
 8001340:	d107      	bne.n	8001352 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6858      	ldr	r0, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	33a6      	adds	r3, #166	; 0xa6
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	f004 fa5f 	bl	8005810 <HAL_UART_Receive_IT>
	}

    return i16result;
 8001352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800136e:	3b02      	subs	r3, #2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	7cdb      	ldrb	r3, [r3, #19]
 8001376:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001380:	3b01      	subs	r3, #1
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	440b      	add	r3, r1
 8001386:	7cdb      	ldrb	r3, [r3, #19]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800138e:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f103 0213 	add.w	r2, r3, #19
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800139c:	3b02      	subs	r3, #2
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f000 f938 	bl	8001618 <calcCRC>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	893b      	ldrh	r3, [r7, #8]
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d009      	beq.n	80013c6 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80013b8:	3301      	adds	r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	e10f      	b.n	80015e6 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	73bb      	strb	r3, [r7, #14]
 80013ce:	e00c      	b.n	80013ea <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	4a87      	ldr	r2, [pc, #540]	; (80015f0 <validateRequest+0x290>)
 80013d4:	5cd2      	ldrb	r2, [r2, r3]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7d1b      	ldrb	r3, [r3, #20]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d102      	bne.n	80013e4 <validateRequest+0x84>
	        {
	            isSupported = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
	            break;
 80013e2:	e005      	b.n	80013f0 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73bb      	strb	r3, [r7, #14]
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d9ef      	bls.n	80013d0 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	f083 0301 	eor.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d009      	beq.n	8001410 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001402:	3301      	adds	r3, #1
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 800140c:	2301      	movs	r3, #1
 800140e:	e0ea      	b.n	80015e6 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7d1b      	ldrb	r3, [r3, #20]
 800141c:	3b01      	subs	r3, #1
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f200 80e0 	bhi.w	80015e4 <validateRequest+0x284>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <validateRequest+0xcc>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800146d 	.word	0x0800146d
 8001430:	0800146d 	.word	0x0800146d
 8001434:	08001585 	.word	0x08001585
 8001438:	08001585 	.word	0x08001585
 800143c:	08001519 	.word	0x08001519
 8001440:	08001561 	.word	0x08001561
 8001444:	080015e5 	.word	0x080015e5
 8001448:	080015e5 	.word	0x080015e5
 800144c:	080015e5 	.word	0x080015e5
 8001450:	080015e5 	.word	0x080015e5
 8001454:	080015e5 	.word	0x080015e5
 8001458:	080015e5 	.word	0x080015e5
 800145c:	080015e5 	.word	0x080015e5
 8001460:	080015e5 	.word	0x080015e5
 8001464:	0800146d 	.word	0x0800146d
 8001468:	08001585 	.word	0x08001585
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7d5a      	ldrb	r2, [r3, #21]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7d9b      	ldrb	r3, [r3, #22]
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f000 f8bc 	bl	80015f4 <word>
 800147c:	4603      	mov	r3, r0
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7dda      	ldrb	r2, [r3, #23]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	4619      	mov	r1, r3
 800148c:	4610      	mov	r0, r2
 800148e:	f000 f8b1 	bl	80015f4 <word>
 8001492:	4603      	mov	r3, r0
 8001494:	091b      	lsrs	r3, r3, #4
 8001496:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7dda      	ldrb	r2, [r3, #23]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7e1b      	ldrb	r3, [r3, #24]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f000 f8a6 	bl	80015f4 <word>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <validateRequest+0x15a>
 80014b4:	897b      	ldrh	r3, [r7, #10]
 80014b6:	3301      	adds	r3, #1
 80014b8:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 80014ba:	89ba      	ldrh	r2, [r7, #12]
 80014bc:	897b      	ldrh	r3, [r7, #10]
 80014be:	4413      	add	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 80014c6:	4293      	cmp	r3, r2
 80014c8:	dd01      	ble.n	80014ce <validateRequest+0x16e>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e08b      	b.n	80015e6 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7dda      	ldrb	r2, [r3, #23]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7e1b      	ldrb	r3, [r3, #24]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f000 f88b 	bl	80015f4 <word>
 80014de:	4603      	mov	r3, r0
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7dda      	ldrb	r2, [r3, #23]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7e1b      	ldrb	r3, [r3, #24]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f000 f880 	bl	80015f4 <word>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <validateRequest+0x1a6>
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	3301      	adds	r3, #1
 8001504:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	3305      	adds	r3, #5
 800150a:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 800150c:	897b      	ldrh	r3, [r7, #10]
 800150e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001512:	d960      	bls.n	80015d6 <validateRequest+0x276>
 8001514:	2303      	movs	r3, #3
 8001516:	e066      	b.n	80015e6 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d5a      	ldrb	r2, [r3, #21]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7d9b      	ldrb	r3, [r3, #22]
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f000 f866 	bl	80015f4 <word>
 8001528:	4603      	mov	r3, r0
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7d5a      	ldrb	r2, [r3, #21]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7d9b      	ldrb	r3, [r3, #22]
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f000 f85b 	bl	80015f4 <word>
 800153e:	4603      	mov	r3, r0
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	b29b      	uxth	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <validateRequest+0x1f0>
 800154a:	89bb      	ldrh	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001556:	89ba      	ldrh	r2, [r7, #12]
 8001558:	429a      	cmp	r2, r3
 800155a:	d93e      	bls.n	80015da <validateRequest+0x27a>
 800155c:	2302      	movs	r3, #2
 800155e:	e042      	b.n	80015e6 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7d5a      	ldrb	r2, [r3, #21]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7d9b      	ldrb	r3, [r3, #22]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f000 f842 	bl	80015f4 <word>
 8001570:	4603      	mov	r3, r0
 8001572:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800157a:	89ba      	ldrh	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d92e      	bls.n	80015de <validateRequest+0x27e>
 8001580:	2302      	movs	r3, #2
 8001582:	e030      	b.n	80015e6 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7d5a      	ldrb	r2, [r3, #21]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7d9b      	ldrb	r3, [r3, #22]
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f000 f830 	bl	80015f4 <word>
 8001594:	4603      	mov	r3, r0
 8001596:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7dda      	ldrb	r2, [r3, #23]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e1b      	ldrb	r3, [r3, #24]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f000 f826 	bl	80015f4 <word>
 80015a8:	4603      	mov	r3, r0
 80015aa:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 80015ac:	89ba      	ldrh	r2, [r7, #12]
 80015ae:	897b      	ldrh	r3, [r7, #10]
 80015b0:	4413      	add	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 80015b8:	4293      	cmp	r3, r2
 80015ba:	dd01      	ble.n	80015c0 <validateRequest+0x260>
 80015bc:	2302      	movs	r3, #2
 80015be:	e012      	b.n	80015e6 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 80015c0:	897b      	ldrh	r3, [r7, #10]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3305      	adds	r3, #5
 80015c8:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 80015ca:	897b      	ldrh	r3, [r7, #10]
 80015cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d0:	d907      	bls.n	80015e2 <validateRequest+0x282>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e007      	b.n	80015e6 <validateRequest+0x286>
	        break;
 80015d6:	bf00      	nop
 80015d8:	e004      	b.n	80015e4 <validateRequest+0x284>
	        break;
 80015da:	bf00      	nop
 80015dc:	e002      	b.n	80015e4 <validateRequest+0x284>
	        break;
 80015de:	bf00      	nop
 80015e0:	e000      	b.n	80015e4 <validateRequest+0x284>
	        break;
 80015e2:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 80015e4:	2300      	movs	r3, #0

}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	0800a17c 	.word	0x0800a17c

080015f4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	460a      	mov	r2, r1
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	4613      	mov	r3, r2
 8001602:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 800160c:	89bb      	ldrh	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8001618:	b480      	push	{r7}
 800161a:	b087      	sub	sp, #28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8001624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001628:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	74fb      	strb	r3, [r7, #19]
 800162e:	e023      	b.n	8001678 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8001630:	7cfb      	ldrb	r3, [r7, #19]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4053      	eors	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001640:	2301      	movs	r3, #1
 8001642:	74bb      	strb	r3, [r7, #18]
 8001644:	e012      	b.n	800166c <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	617b      	str	r3, [r7, #20]
            if (flag)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <calcCRC+0x4e>
                temp ^= 0xA001;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001666:	7cbb      	ldrb	r3, [r7, #18]
 8001668:	3301      	adds	r3, #1
 800166a:	74bb      	strb	r3, [r7, #18]
 800166c:	7cbb      	ldrb	r3, [r7, #18]
 800166e:	2b08      	cmp	r3, #8
 8001670:	d9e9      	bls.n	8001646 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	3301      	adds	r3, #1
 8001676:	74fb      	strb	r3, [r7, #19]
 8001678:	7cfa      	ldrb	r2, [r7, #19]
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	429a      	cmp	r2, r3
 800167e:	d3d7      	bcc.n	8001630 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	b29b      	uxth	r3, r3
 8001694:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	b29b      	uxth	r3, r3

}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	7d1b      	ldrb	r3, [r3, #20]
 80016b4:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	7a1a      	ldrb	r2, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	3b80      	subs	r3, #128	; 0x80
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	79fa      	ldrb	r2, [r7, #7]
 80016cc:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2203      	movs	r2, #3
 80016d2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f103 0213 	add.w	r2, r3, #19
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f7ff ff8e 	bl	8001618 <calcCRC>
 80016fc:	4603      	mov	r3, r0
 80016fe:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800170c:	4619      	mov	r1, r3
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	440b      	add	r3, r1
 8001714:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800171c:	3301      	adds	r3, #1
 800171e:	b2da      	uxtb	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800172c:	4619      	mov	r1, r3
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	440b      	add	r3, r1
 8001736:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800173e:	3301      	adds	r3, #1
 8001740:	b2da      	uxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fabc 	bl	8005cd2 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68d8      	ldr	r0, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8a1b      	ldrh	r3, [r3, #16]
 8001762:	2201      	movs	r2, #1
 8001764:	4619      	mov	r1, r3
 8001766:	f002 fac9 	bl	8003cfc <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6858      	ldr	r0, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f103 0113 	add.w	r1, r3, #19
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	f004 f803 	bl	8005788 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8001782:	21fa      	movs	r1, #250	; 0xfa
 8001784:	2001      	movs	r0, #1
 8001786:	f007 f845 	bl	8008814 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 800178a:	bf00      	nop
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f7      	beq.n	800178c <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00c      	beq.n	80017be <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68d8      	ldr	r0, [r3, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	8a1b      	ldrh	r3, [r3, #16]
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	f002 faa4 	bl	8003cfc <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fabd 	bl	8005d38 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d10c      	bne.n	80017e0 <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80017cc:	f006 fb42 	bl	8007e54 <xTaskGetTickCount>
 80017d0:	4602      	mov	r2, r0
 80017d2:	2300      	movs	r3, #0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	2102      	movs	r1, #2
 80017da:	4620      	mov	r0, r4
 80017dc:	f007 fac0 	bl	8008d60 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80017ee:	3301      	adds	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7d5a      	ldrb	r2, [r3, #21]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7d9b      	ldrb	r3, [r3, #22]
 8001810:	4619      	mov	r1, r3
 8001812:	4610      	mov	r0, r2
 8001814:	f7ff feee 	bl	80015f4 <word>
 8001818:	4603      	mov	r3, r0
 800181a:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7dda      	ldrb	r2, [r3, #23]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e1b      	ldrb	r3, [r3, #24]
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f7ff fee4 	bl	80015f4 <word>
 800182c:	4603      	mov	r3, r0
 800182e:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8001830:	8a3b      	ldrh	r3, [r7, #16]
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	b29b      	uxth	r3, r3
 8001836:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8001838:	8a3b      	ldrh	r3, [r7, #16]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	b29b      	uxth	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <process_FC1+0x4a>
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	3301      	adds	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7dfa      	ldrb	r2, [r7, #23]
 800184e:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2203      	movs	r2, #3
 8001854:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800185e:	461a      	mov	r2, r3
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	4413      	add	r3, r2
 8001864:	3b01      	subs	r3, #1
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	2200      	movs	r2, #0
 800186c:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001872:	2300      	movs	r3, #0
 8001874:	82bb      	strh	r3, [r7, #20]
 8001876:	e058      	b.n	800192a <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8001878:	8a7a      	ldrh	r2, [r7, #18]
 800187a:	8abb      	ldrh	r3, [r7, #20]
 800187c:	4413      	add	r3, r2
 800187e:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001886:	89bb      	ldrh	r3, [r7, #12]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001896:	897b      	ldrh	r3, [r7, #10]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	7a7b      	ldrb	r3, [r7, #9]
 80018a2:	fa42 f303 	asr.w	r3, r2, r3
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d014      	beq.n	80018d8 <process_FC1+0xd8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80018b4:	461a      	mov	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	7cda      	ldrb	r2, [r3, #19]
 80018bc:	7dbb      	ldrb	r3, [r7, #22]
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	440b      	add	r3, r1
 80018d4:	74da      	strb	r2, [r3, #19]
 80018d6:	e015      	b.n	8001904 <process_FC1+0x104>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80018de:	461a      	mov	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	7cda      	ldrb	r2, [r3, #19]
 80018e6:	7dbb      	ldrb	r3, [r7, #22]
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80018fa:	4013      	ands	r3, r2
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	440b      	add	r3, r1
 8001902:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8001904:	7dbb      	ldrb	r3, [r7, #22]
 8001906:	3301      	adds	r3, #1
 8001908:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d909      	bls.n	8001924 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800191a:	3301      	adds	r3, #1
 800191c:	b2da      	uxtb	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001924:	8abb      	ldrh	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	82bb      	strh	r3, [r7, #20]
 800192a:	8aba      	ldrh	r2, [r7, #20]
 800192c:	8a3b      	ldrh	r3, [r7, #16]
 800192e:	429a      	cmp	r2, r3
 8001930:	d3a2      	bcc.n	8001878 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8001932:	8a3b      	ldrh	r3, [r7, #16]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	b29b      	uxth	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <process_FC1+0x14e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001944:	3301      	adds	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001954:	3302      	adds	r3, #2
 8001956:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fec1 	bl	80016e0 <sendTxBuffer>
    return u8CopyBufferSize;
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7d5a      	ldrb	r2, [r3, #21]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7d9b      	ldrb	r3, [r3, #22]
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f7ff fe39 	bl	80015f4 <word>
 8001982:	4603      	mov	r3, r0
 8001984:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7dda      	ldrb	r2, [r3, #23]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7e1b      	ldrb	r3, [r3, #24]
 800198e:	4619      	mov	r1, r3
 8001990:	4610      	mov	r0, r2
 8001992:	f7ff fe2f 	bl	80015f4 <word>
 8001996:	4603      	mov	r3, r0
 8001998:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	81fb      	strh	r3, [r7, #14]
 80019b0:	e032      	b.n	8001a18 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80019ca:	4619      	mov	r1, r3
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	440b      	add	r3, r1
 80019d2:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80019f8:	4619      	mov	r1, r3
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	440b      	add	r3, r1
 8001a00:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	3301      	adds	r3, #1
 8001a16:	81fb      	strh	r3, [r7, #14]
 8001a18:	89fa      	ldrh	r2, [r7, #14]
 8001a1a:	89b9      	ldrh	r1, [r7, #12]
 8001a1c:	7afb      	ldrb	r3, [r7, #11]
 8001a1e:	440b      	add	r3, r1
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbc6      	blt.n	80019b2 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fe56 	bl	80016e0 <sendTxBuffer>

    return u8CopyBufferSize;
 8001a34:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7d5a      	ldrb	r2, [r3, #21]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7d9b      	ldrb	r3, [r3, #22]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f7ff fdce 	bl	80015f4 <word>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7ddb      	ldrb	r3, [r3, #23]
 8001a70:	2bff      	cmp	r3, #255	; 0xff
 8001a72:	d115      	bne.n	8001aa0 <process_FC5+0x60>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001a7a:	89bb      	ldrh	r3, [r7, #12]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	8819      	ldrh	r1, [r3, #0]
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	2201      	movs	r2, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4403      	add	r3, r0
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	b292      	uxth	r2, r2
 8001a9c:	801a      	strh	r2, [r3, #0]
 8001a9e:	e016      	b.n	8001ace <process_FC5+0x8e>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001aa6:	89bb      	ldrh	r3, [r7, #12]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	8819      	ldrh	r1, [r3, #0]
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001ac2:	89bb      	ldrh	r3, [r7, #12]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4403      	add	r3, r0
 8001ac8:	400a      	ands	r2, r1
 8001aca:	b292      	uxth	r2, r2
 8001acc:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001adc:	3302      	adds	r3, #2
 8001ade:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fdfd 	bl	80016e0 <sendTxBuffer>

    return u8CopyBufferSize;
 8001ae6:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7d5a      	ldrb	r2, [r3, #21]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	7d9b      	ldrb	r3, [r3, #22]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff fd75 	bl	80015f4 <word>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7dda      	ldrb	r2, [r3, #23]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7e1b      	ldrb	r3, [r3, #24]
 8001b16:	4619      	mov	r1, r3
 8001b18:	4610      	mov	r0, r2
 8001b1a:	f7ff fd6b 	bl	80015f4 <word>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	89ba      	ldrh	r2, [r7, #12]
 8001b30:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2206      	movs	r2, #6
 8001b36:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001b40:	3302      	adds	r3, #2
 8001b42:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff fdcb 	bl	80016e0 <sendTxBuffer>

    return u8CopyBufferSize;
 8001b4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7d5a      	ldrb	r2, [r3, #21]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7d9b      	ldrb	r3, [r3, #22]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7ff fd43 	bl	80015f4 <word>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7dda      	ldrb	r2, [r3, #23]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	7e1b      	ldrb	r3, [r3, #24]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f7ff fd39 	bl	80015f4 <word>
 8001b82:	4603      	mov	r3, r0
 8001b84:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	82bb      	strh	r3, [r7, #20]
 8001b92:	e058      	b.n	8001c46 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8001b94:	8a7a      	ldrh	r2, [r7, #18]
 8001b96:	8abb      	ldrh	r3, [r7, #20]
 8001b98:	4413      	add	r3, r2
 8001b9a:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8001b9c:	89bb      	ldrh	r3, [r7, #12]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001ba2:	89bb      	ldrh	r3, [r7, #12]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	7cdb      	ldrb	r3, [r3, #19]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	7dbb      	ldrb	r3, [r7, #22]
 8001bb8:	fa42 f303 	asr.w	r3, r2, r3
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8001bca:	7a3b      	ldrb	r3, [r7, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <process_FC15+0xa6>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001bd6:	897b      	ldrh	r3, [r7, #10]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	8819      	ldrh	r1, [r3, #0]
 8001bde:	7a7b      	ldrb	r3, [r7, #9]
 8001be0:	2201      	movs	r2, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001bee:	897b      	ldrh	r3, [r7, #10]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4403      	add	r3, r0
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	b292      	uxth	r2, r2
 8001bf8:	801a      	strh	r2, [r3, #0]
 8001bfa:	e016      	b.n	8001c2a <process_FC15+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	8819      	ldrh	r1, [r3, #0]
 8001c0a:	7a7b      	ldrb	r3, [r7, #9]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4403      	add	r3, r0
 8001c24:	400a      	ands	r2, r1
 8001c26:	b292      	uxth	r2, r2
 8001c28:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8001c2a:	7dbb      	ldrb	r3, [r7, #22]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001c30:	7dbb      	ldrb	r3, [r7, #22]
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	d904      	bls.n	8001c40 <process_FC15+0xea>
        {
            u8bitsno = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001c40:	8abb      	ldrh	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	82bb      	strh	r3, [r7, #20]
 8001c46:	8aba      	ldrh	r2, [r7, #20]
 8001c48:	8a3b      	ldrh	r3, [r7, #16]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d3a2      	bcc.n	8001b94 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2206      	movs	r2, #6
 8001c52:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fd3d 	bl	80016e0 <sendTxBuffer>
    return u8CopyBufferSize;
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7d5b      	ldrb	r3, [r3, #21]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7d9b      	ldrb	r3, [r3, #22]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7ddb      	ldrb	r3, [r3, #23]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7e1b      	ldrb	r3, [r3, #24]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8001ca8:	8a7b      	ldrh	r3, [r7, #18]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2206      	movs	r2, #6
 8001cb4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	82fb      	strh	r3, [r7, #22]
 8001cbc:	e01d      	b.n	8001cfa <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8001cbe:	8afb      	ldrh	r3, [r7, #22]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	3307      	adds	r3, #7
        temp = word(
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8001cca:	8afb      	ldrh	r3, [r7, #22]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	005b      	lsls	r3, r3, #1
        temp = word(
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	7cdb      	ldrb	r3, [r3, #19]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7ff fc8c 	bl	80015f4 <word>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001ce6:	8ab9      	ldrh	r1, [r7, #20]
 8001ce8:	8afb      	ldrh	r3, [r7, #22]
 8001cea:	440b      	add	r3, r1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	89fa      	ldrh	r2, [r7, #14]
 8001cf2:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	82fb      	strh	r3, [r7, #22]
 8001cfa:	8afa      	ldrh	r2, [r7, #22]
 8001cfc:	8a7b      	ldrh	r3, [r7, #18]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3dd      	bcc.n	8001cbe <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d08:	3302      	adds	r3, #2
 8001d0a:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fce7 	bl	80016e0 <sendTxBuffer>

    return u8CopyBufferSize;
 8001d12:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e019      	b.n	8001d66 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_UART_TxCpltCallback+0x70>)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d10e      	bne.n	8001d60 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <HAL_UART_TxCpltCallback+0x70>)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2300      	movs	r3, #0
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f006 fe47 	bl	80089ec <xTaskGenericNotifyFromISR>
	   		break;
 8001d5e:	e008      	b.n	8001d72 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3301      	adds	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_UART_TxCpltCallback+0x74>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	dbdf      	blt.n	8001d32 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d007      	beq.n	8001d88 <HAL_UART_TxCpltCallback+0x68>
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_UART_TxCpltCallback+0x78>)
 8001d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	f3bf 8f4f 	dsb	sy
 8001d84:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000e7c 	.word	0x20000e7c
 8001d94:	200000bc 	.word	0x200000bc
 8001d98:	e000ed04 	.word	0xe000ed04

08001d9c <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e042      	b.n	8001e34 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8001dae:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_UART_RxCpltCallback+0xc8>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d137      	bne.n	8001e2e <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8001dbe:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <HAL_UART_RxCpltCallback+0xc8>)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d139      	bne.n	8001e42 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8001dce:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <HAL_UART_RxCpltCallback+0xc8>)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8001dda:	4922      	ldr	r1, [pc, #136]	; (8001e64 <HAL_UART_RxCpltCallback+0xc8>)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001de2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe fc0f 	bl	800060c <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_UART_RxCpltCallback+0xc8>)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	6858      	ldr	r0, [r3, #4]
 8001df8:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_UART_RxCpltCallback+0xc8>)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	33a6      	adds	r3, #166	; 0xa6
 8001e02:	2201      	movs	r2, #1
 8001e04:	4619      	mov	r1, r3
 8001e06:	f003 fd03 	bl	8005810 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8001e0a:	4a16      	ldr	r2, [pc, #88]	; (8001e64 <HAL_UART_RxCpltCallback+0xc8>)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e12:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001e16:	f006 f82b 	bl	8007e70 <xTaskGetTickCountFromISR>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f107 0308 	add.w	r3, r7, #8
 8001e20:	2100      	movs	r1, #0
 8001e22:	9100      	str	r1, [sp, #0]
 8001e24:	2107      	movs	r1, #7
 8001e26:	4620      	mov	r0, r4
 8001e28:	f006 ff9a 	bl	8008d60 <xTimerGenericCommand>
    		}
    		break;
 8001e2c:	e009      	b.n	8001e42 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3301      	adds	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_UART_RxCpltCallback+0xcc>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	dbb6      	blt.n	8001dae <HAL_UART_RxCpltCallback+0x12>
 8001e40:	e000      	b.n	8001e44 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8001e42:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <HAL_UART_RxCpltCallback+0xbe>
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_UART_RxCpltCallback+0xd0>)
 8001e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f3bf 8f4f 	dsb	sy
 8001e56:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000e7c 	.word	0x20000e7c
 8001e68:	200000bc 	.word	0x200000bc
 8001e6c:	e000ed04 	.word	0xe000ed04

08001e70 <moveMean>:

//uint16_t adc1=1000;

//----------------

float moveMean(float vel){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	// Vector de desplazamiento
	size_t n = sizeof(mean)/sizeof(mean[0]);
 8001e78:	2328      	movs	r3, #40	; 0x28
 8001e7a:	60bb      	str	r3, [r7, #8]

	for (int i = 1; i < n; ++i) {
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	e00b      	b.n	8001e9a <moveMean+0x2a>
		mean[i-1]=mean[i];
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	491d      	ldr	r1, [pc, #116]	; (8001efc <moveMean+0x8c>)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001e8e:	491b      	ldr	r1, [pc, #108]	; (8001efc <moveMean+0x8c>)
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 1; i < n; ++i) {
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d8ef      	bhi.n	8001e82 <moveMean+0x12>
	}
	mean[n-1] = vel;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	4915      	ldr	r1, [pc, #84]	; (8001efc <moveMean+0x8c>)
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// Ahora aplico el filtro
	float result = 0;
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i <= n; ++i) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e00c      	b.n	8001ed4 <moveMean+0x64>
		result += mean[i];
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <moveMean+0x8c>)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6938      	ldr	r0, [r7, #16]
 8001ec6:	f7fe f949 	bl	800015c <__addsf3>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	613b      	str	r3, [r7, #16]
	for (int i = 0; i <= n; ++i) {
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d2ee      	bcs.n	8001eba <moveMean+0x4a>
	}
	result = result/((float)n);
 8001edc:	68b8      	ldr	r0, [r7, #8]
 8001ede:	f7fe f9ed 	bl	80002bc <__aeabi_ui2f>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	6938      	ldr	r0, [r7, #16]
 8001ee8:	f7fe faf4 	bl	80004d4 <__aeabi_fdiv>
 8001eec:	4603      	mov	r3, r0
 8001eee:	613b      	str	r3, [r7, #16]
	return result;
 8001ef0:	693b      	ldr	r3, [r7, #16]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200000d8 	.word	0x200000d8

08001f00 <HAL_GPIO_EXTI_Callback>:




// Si se interrumpe por flanco ascendente del pin 0 (Enconder optico)
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]

	uint32_t ticksAux = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == D02_Encoder_Pin){
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	f040 809d 	bne.w	8002050 <HAL_GPIO_EXTI_Callback+0x150>
		counter ++;
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_GPIO_EXTI_Callback+0x158>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	; (8002058 <HAL_GPIO_EXTI_Callback+0x158>)
 8001f1e:	6013      	str	r3, [r2, #0]
		ticksAux = ticksPrev;
 8001f20:	4b4e      	ldr	r3, [pc, #312]	; (800205c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
		ticksPrev = ticksNow;
 8001f26:	4b4e      	ldr	r3, [pc, #312]	; (8002060 <HAL_GPIO_EXTI_Callback+0x160>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001f2c:	6013      	str	r3, [r2, #0]
		ticksNow = __HAL_TIM_GetCounter(&htim2);
 8001f2e:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_GPIO_EXTI_Callback+0x164>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_GPIO_EXTI_Callback+0x160>)
 8001f36:	6013      	str	r3, [r2, #0]

		 if (overflow == 0){
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_GPIO_EXTI_Callback+0x168>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d13b      	bne.n	8001fb8 <HAL_GPIO_EXTI_Callback+0xb8>
			// Todo cool, calculo normal
			deltaTicks = ticksNow - ticksPrev;
 8001f40:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_GPIO_EXTI_Callback+0x160>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b45      	ldr	r3, [pc, #276]	; (800205c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001f4c:	6013      	str	r3, [r2, #0]
			if (deltaTicks > tickFilter){
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_GPIO_EXTI_Callback+0x170>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d92a      	bls.n	8001fb0 <HAL_GPIO_EXTI_Callback+0xb0>
			velocidad = ((float)1/(float)ranuras)/(((float)deltaTicks)/(float)(fsTmr2));
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_GPIO_EXTI_Callback+0x174>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f9ac 	bl	80002bc <__aeabi_ui2f>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f6c:	f7fe fab2 	bl	80004d4 <__aeabi_fdiv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	461c      	mov	r4, r3
 8001f74:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe f99f 	bl	80002bc <__aeabi_ui2f>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <HAL_GPIO_EXTI_Callback+0x178>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f7fe faa4 	bl	80004d4 <__aeabi_fdiv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4620      	mov	r0, r4
 8001f92:	f7fe fa9f 	bl	80004d4 <__aeabi_fdiv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b38      	ldr	r3, [pc, #224]	; (800207c <HAL_GPIO_EXTI_Callback+0x17c>)
 8001f9c:	601a      	str	r2, [r3, #0]
			resultMean = moveMean(velocidad);
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_GPIO_EXTI_Callback+0x17c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff64 	bl	8001e70 <moveMean>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a35      	ldr	r2, [pc, #212]	; (8002080 <HAL_GPIO_EXTI_Callback+0x180>)
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e048      	b.n	8002042 <HAL_GPIO_EXTI_Callback+0x142>
			}
			else{
				ticksPrev = ticksAux;
 8001fb0:	4a2a      	ldr	r2, [pc, #168]	; (800205c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e044      	b.n	8002042 <HAL_GPIO_EXTI_Callback+0x142>
			}
		} else{
			// Tuve algun desborde y tengo que tenerlo en cuenta
//			deltaTicks = (ticksNow + (uint32_t)overflow * (uint32_t)cantTicksTmr2)- ticksPrev;

			deltaTicks = ticksNow + overflow * cantTicksTmr2 - ticksPrev;
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_GPIO_EXTI_Callback+0x168>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a31      	ldr	r2, [pc, #196]	; (8002084 <HAL_GPIO_EXTI_Callback+0x184>)
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	fb02 f203 	mul.w	r2, r2, r3
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_GPIO_EXTI_Callback+0x160>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	441a      	add	r2, r3
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001fd2:	6013      	str	r3, [r2, #0]
			if (deltaTicks > tickFilter ){
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_GPIO_EXTI_Callback+0x170>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d92d      	bls.n	800203c <HAL_GPIO_EXTI_Callback+0x13c>
				velocidad = ((float)1/(float)ranuras)/(((float)deltaTicks)/(float)(fsTmr2));
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_GPIO_EXTI_Callback+0x174>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f969 	bl	80002bc <__aeabi_ui2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ff2:	f7fe fa6f 	bl	80004d4 <__aeabi_fdiv>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f95c 	bl	80002bc <__aeabi_ui2f>
 8002004:	4602      	mov	r2, r0
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_GPIO_EXTI_Callback+0x178>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f7fe fa61 	bl	80004d4 <__aeabi_fdiv>
 8002012:	4603      	mov	r3, r0
 8002014:	4619      	mov	r1, r3
 8002016:	4620      	mov	r0, r4
 8002018:	f7fe fa5c 	bl	80004d4 <__aeabi_fdiv>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_GPIO_EXTI_Callback+0x17c>)
 8002022:	601a      	str	r2, [r3, #0]
				resultMean = moveMean(velocidad);
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_GPIO_EXTI_Callback+0x17c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff21 	bl	8001e70 <moveMean>
 800202e:	4603      	mov	r3, r0
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_GPIO_EXTI_Callback+0x180>)
 8002032:	6013      	str	r3, [r2, #0]
				overflow = 0;
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <HAL_GPIO_EXTI_Callback+0x168>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e002      	b.n	8002042 <HAL_GPIO_EXTI_Callback+0x142>
			}
			else{
				ticksPrev = ticksAux;
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_GPIO_EXTI_Callback+0x15c>)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6013      	str	r3, [r2, #0]
			}
		}

		if(deltaTicks == 0){
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_GPIO_EXTI_Callback+0x16c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_GPIO_EXTI_Callback+0x150>
			velocidad = 3.14;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_GPIO_EXTI_Callback+0x17c>)
 800204c:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_GPIO_EXTI_Callback+0x188>)
 800204e:	601a      	str	r2, [r3, #0]
	 }
	}

}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	2000017c 	.word	0x2000017c
 800205c:	200000c4 	.word	0x200000c4
 8002060:	200000c8 	.word	0x200000c8
 8002064:	200010d0 	.word	0x200010d0
 8002068:	200000cc 	.word	0x200000cc
 800206c:	200000d0 	.word	0x200000d0
 8002070:	200000d4 	.word	0x200000d4
 8002074:	20000020 	.word	0x20000020
 8002078:	20000028 	.word	0x20000028
 800207c:	200000c0 	.word	0x200000c0
 8002080:	20000178 	.word	0x20000178
 8002084:	20000024 	.word	0x20000024
 8002088:	4048f5c3 	.word	0x4048f5c3

0800208c <Sentido>:
//	 overflow += 1;
//  }
//  /* USER CODE END Callback 1 */
//}

void Sentido(uint16_t valor){
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
	//Motor gira en un sentido
	if(valor == 0){
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10c      	bne.n	80020b6 <Sentido+0x2a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, SET);
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a2:	4815      	ldr	r0, [pc, #84]	; (80020f8 <Sentido+0x6c>)
 80020a4:	f001 fe2a 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <Sentido+0x6c>)
 80020b0:	f001 fe24 	bl	8003cfc <HAL_GPIO_WritePin>
	}
	else{ // Break
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
	}
}
 80020b4:	e01b      	b.n	80020ee <Sentido+0x62>
	else if(valor == 1){
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d10c      	bne.n	80020d6 <Sentido+0x4a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <Sentido+0x6c>)
 80020c4:	f001 fe1a 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ce:	480a      	ldr	r0, [pc, #40]	; (80020f8 <Sentido+0x6c>)
 80020d0:	f001 fe14 	bl	8003cfc <HAL_GPIO_WritePin>
}
 80020d4:	e00b      	b.n	80020ee <Sentido+0x62>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020dc:	4806      	ldr	r0, [pc, #24]	; (80020f8 <Sentido+0x6c>)
 80020de:	f001 fe0d 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <Sentido+0x6c>)
 80020ea:	f001 fe07 	bl	8003cfc <HAL_GPIO_WritePin>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40010c00 	.word	0x40010c00

080020fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002100:	f000 fe66 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002104:	f000 f884 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002108:	f000 faa0 	bl	800264c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800210c:	f000 fa56 	bl	80025bc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002110:	f000 f944 	bl	800239c <MX_TIM1_Init>
  MX_DMA_Init();
 8002114:	f000 fa7c 	bl	8002610 <MX_DMA_Init>
  MX_ADC1_Init();
 8002118:	f000 f8d6 	bl	80022c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800211c:	f000 fa02 	bl	8002524 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Definiciones para la biblioteca de modbus
   ModbusH.uModbusType = MB_SLAVE;
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <main+0xcc>)
 8002122:	2203      	movs	r2, #3
 8002124:	701a      	strb	r2, [r3, #0]
   ModbusH.port =  &huart3;
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <main+0xcc>)
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <main+0xd0>)
 800212a:	605a      	str	r2, [r3, #4]
   ModbusH.u8id = 1; //Modbus slave ID
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <main+0xcc>)
 800212e:	2201      	movs	r2, #1
 8002130:	721a      	strb	r2, [r3, #8]
   ModbusH.u16timeOut = 1000;
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <main+0xcc>)
 8002134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002138:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
   ModbusH.EN_Port = NULL;
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <main+0xcc>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
   ModbusH.u16regs = ModbusDATA;
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <main+0xcc>)
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <main+0xd4>)
 8002146:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <main+0xcc>)
 800214c:	220d      	movs	r2, #13
 800214e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ModbusH.xTypeHW = USART_HW;
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <main+0xcc>)
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

   //Initialize Modbus library
   ModbusInit(&ModbusH);
 800215a:	481b      	ldr	r0, [pc, #108]	; (80021c8 <main+0xcc>)
 800215c:	f7fe fb1c 	bl	8000798 <ModbusInit>
   //Start capturing traffic on serial Port
   ModbusStart(&ModbusH);
 8002160:	4819      	ldr	r0, [pc, #100]	; (80021c8 <main+0xcc>)
 8002162:	f7fe fbbb 	bl	80008dc <ModbusStart>

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002166:	2100      	movs	r1, #0
 8002168:	481a      	ldr	r0, [pc, #104]	; (80021d4 <main+0xd8>)
 800216a:	f002 fc0b 	bl	8004984 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800216e:	f004 f863 	bl	8006238 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueDataADC */
  QueueDataADCHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueDataADC_attributes);
 8002172:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <main+0xdc>)
 8002174:	2102      	movs	r1, #2
 8002176:	2010      	movs	r0, #16
 8002178:	f004 fa38 	bl	80065ec <osMessageQueueNew>
 800217c:	4603      	mov	r3, r0
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <main+0xe0>)
 8002180:	6013      	str	r3, [r2, #0]
//  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Modbus */
  ModbusHandle = osThreadNew(StartModbus, NULL, &Modbus_attributes);
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <main+0xe4>)
 8002184:	2100      	movs	r1, #0
 8002186:	4817      	ldr	r0, [pc, #92]	; (80021e4 <main+0xe8>)
 8002188:	f004 f8bc 	bl	8006304 <osThreadNew>
 800218c:	4603      	mov	r3, r0
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <main+0xec>)
 8002190:	6013      	str	r3, [r2, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(StartADC, NULL, &ADC_attributes);
 8002192:	4a16      	ldr	r2, [pc, #88]	; (80021ec <main+0xf0>)
 8002194:	2100      	movs	r1, #0
 8002196:	4816      	ldr	r0, [pc, #88]	; (80021f0 <main+0xf4>)
 8002198:	f004 f8b4 	bl	8006304 <osThreadNew>
 800219c:	4603      	mov	r3, r0
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <main+0xf8>)
 80021a0:	6013      	str	r3, [r2, #0]

  /* creation of Encoders */
  EncodersHandle = osThreadNew(StartEncoders, NULL, &Encoders_attributes);
 80021a2:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <main+0xfc>)
 80021a4:	2100      	movs	r1, #0
 80021a6:	4815      	ldr	r0, [pc, #84]	; (80021fc <main+0x100>)
 80021a8:	f004 f8ac 	bl	8006304 <osThreadNew>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <main+0x104>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(StartControl, NULL, &Control_attributes);
 80021b2:	4a14      	ldr	r2, [pc, #80]	; (8002204 <main+0x108>)
 80021b4:	2100      	movs	r1, #0
 80021b6:	4814      	ldr	r0, [pc, #80]	; (8002208 <main+0x10c>)
 80021b8:	f004 f8a4 	bl	8006304 <osThreadNew>
 80021bc:	4603      	mov	r3, r0
 80021be:	4a13      	ldr	r2, [pc, #76]	; (800220c <main+0x110>)
 80021c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80021c2:	f004 f86b 	bl	800629c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <main+0xca>
 80021c8:	20000e84 	.word	0x20000e84
 80021cc:	20000fcc 	.word	0x20000fcc
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20001088 	.word	0x20001088
 80021d8:	0800a214 	.word	0x0800a214
 80021dc:	2000111c 	.word	0x2000111c
 80021e0:	0800a184 	.word	0x0800a184
 80021e4:	08002785 	.word	0x08002785
 80021e8:	20001120 	.word	0x20001120
 80021ec:	0800a1a8 	.word	0x0800a1a8
 80021f0:	080027e9 	.word	0x080027e9
 80021f4:	20001118 	.word	0x20001118
 80021f8:	0800a1cc 	.word	0x0800a1cc
 80021fc:	080027f9 	.word	0x080027f9
 8002200:	20000fc8 	.word	0x20000fc8
 8002204:	0800a1f0 	.word	0x0800a1f0
 8002208:	08002895 	.word	0x08002895
 800220c:	20001010 	.word	0x20001010

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b094      	sub	sp, #80	; 0x50
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221a:	2228      	movs	r2, #40	; 0x28
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f007 fac8 	bl	80097b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002240:	2301      	movs	r3, #1
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800224e:	2301      	movs	r3, #1
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002252:	2302      	movs	r3, #2
 8002254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800225c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002266:	4618      	mov	r0, r3
 8002268:	f001 fd92 	bl	8003d90 <HAL_RCC_OscConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002272:	f000 fb35 	bl	80028e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002276:	230f      	movs	r3, #15
 8002278:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227a:	2302      	movs	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2102      	movs	r1, #2
 8002292:	4618      	mov	r0, r3
 8002294:	f001 fffc 	bl	8004290 <HAL_RCC_ClockConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800229e:	f000 fb1f 	bl	80028e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022a2:	2302      	movs	r3, #2
 80022a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022aa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 f9b8 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022ba:	f000 fb11 	bl	80028e0 <Error_Handler>
  }
}
 80022be:	bf00      	nop
 80022c0:	3750      	adds	r7, #80	; 0x50
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <MX_ADC1_Init+0xcc>)
 80022da:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <MX_ADC1_Init+0xd0>)
 80022dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <MX_ADC1_Init+0xcc>)
 80022e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <MX_ADC1_Init+0xcc>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <MX_ADC1_Init+0xcc>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f2:	4b28      	ldr	r3, [pc, #160]	; (8002394 <MX_ADC1_Init+0xcc>)
 80022f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <MX_ADC1_Init+0xcc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002300:	4b24      	ldr	r3, [pc, #144]	; (8002394 <MX_ADC1_Init+0xcc>)
 8002302:	2204      	movs	r2, #4
 8002304:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002306:	4823      	ldr	r0, [pc, #140]	; (8002394 <MX_ADC1_Init+0xcc>)
 8002308:	f000 fd94 	bl	8002e34 <HAL_ADC_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002312:	f000 fae5 	bl	80028e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800231a:	2301      	movs	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	481b      	ldr	r0, [pc, #108]	; (8002394 <MX_ADC1_Init+0xcc>)
 8002328:	f000 ff32 	bl	8003190 <HAL_ADC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002332:	f000 fad5 	bl	80028e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002336:	2301      	movs	r3, #1
 8002338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800233a:	2302      	movs	r3, #2
 800233c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4814      	ldr	r0, [pc, #80]	; (8002394 <MX_ADC1_Init+0xcc>)
 8002344:	f000 ff24 	bl	8003190 <HAL_ADC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800234e:	f000 fac7 	bl	80028e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002352:	2302      	movs	r3, #2
 8002354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002356:	2303      	movs	r3, #3
 8002358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4619      	mov	r1, r3
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <MX_ADC1_Init+0xcc>)
 8002360:	f000 ff16 	bl	8003190 <HAL_ADC_ConfigChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800236a:	f000 fab9 	bl	80028e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800236e:	2303      	movs	r3, #3
 8002370:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002372:	2304      	movs	r3, #4
 8002374:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <MX_ADC1_Init+0xcc>)
 800237c:	f000 ff08 	bl	8003190 <HAL_ADC_ConfigChannel>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002386:	f000 faab 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20001014 	.word	0x20001014
 8002398:	40012400 	.word	0x40012400

0800239c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b096      	sub	sp, #88	; 0x58
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]
 80023ca:	615a      	str	r2, [r3, #20]
 80023cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2220      	movs	r2, #32
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 f9ed 	bl	80097b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <MX_TIM1_Init+0x180>)
 80023dc:	4a50      	ldr	r2, [pc, #320]	; (8002520 <MX_TIM1_Init+0x184>)
 80023de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80023e0:	4b4e      	ldr	r3, [pc, #312]	; (800251c <MX_TIM1_Init+0x180>)
 80023e2:	2247      	movs	r2, #71	; 0x47
 80023e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e6:	4b4d      	ldr	r3, [pc, #308]	; (800251c <MX_TIM1_Init+0x180>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <MX_TIM1_Init+0x180>)
 80023ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80023f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <MX_TIM1_Init+0x180>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <MX_TIM1_Init+0x180>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002400:	4b46      	ldr	r3, [pc, #280]	; (800251c <MX_TIM1_Init+0x180>)
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002406:	4845      	ldr	r0, [pc, #276]	; (800251c <MX_TIM1_Init+0x180>)
 8002408:	f002 f9c2 	bl	8004790 <HAL_TIM_Base_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002412:	f000 fa65 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002420:	4619      	mov	r1, r3
 8002422:	483e      	ldr	r0, [pc, #248]	; (800251c <MX_TIM1_Init+0x180>)
 8002424:	f002 fd16 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800242e:	f000 fa57 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002432:	483a      	ldr	r0, [pc, #232]	; (800251c <MX_TIM1_Init+0x180>)
 8002434:	f002 fa4e 	bl	80048d4 <HAL_TIM_PWM_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800243e:	f000 fa4f 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800244a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800244e:	4619      	mov	r1, r3
 8002450:	4832      	ldr	r0, [pc, #200]	; (800251c <MX_TIM1_Init+0x180>)
 8002452:	f003 f88b 	bl	800556c <HAL_TIMEx_MasterConfigSynchronization>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800245c:	f000 fa40 	bl	80028e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002460:	2360      	movs	r3, #96	; 0x60
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002468:	2300      	movs	r3, #0
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800246c:	2300      	movs	r3, #0
 800246e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002480:	2200      	movs	r2, #0
 8002482:	4619      	mov	r1, r3
 8002484:	4825      	ldr	r0, [pc, #148]	; (800251c <MX_TIM1_Init+0x180>)
 8002486:	f002 fc27 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002490:	f000 fa26 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002498:	2204      	movs	r2, #4
 800249a:	4619      	mov	r1, r3
 800249c:	481f      	ldr	r0, [pc, #124]	; (800251c <MX_TIM1_Init+0x180>)
 800249e:	f002 fc1b 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80024a8:	f000 fa1a 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	2208      	movs	r2, #8
 80024b2:	4619      	mov	r1, r3
 80024b4:	4819      	ldr	r0, [pc, #100]	; (800251c <MX_TIM1_Init+0x180>)
 80024b6:	f002 fc0f 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80024c0:	f000 fa0e 	bl	80028e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	220c      	movs	r2, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	4813      	ldr	r0, [pc, #76]	; (800251c <MX_TIM1_Init+0x180>)
 80024ce:	f002 fc03 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80024d8:	f000 fa02 	bl	80028e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4807      	ldr	r0, [pc, #28]	; (800251c <MX_TIM1_Init+0x180>)
 8002500:	f003 f892 	bl	8005628 <HAL_TIMEx_ConfigBreakDeadTime>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800250a:	f000 f9e9 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800250e:	4803      	ldr	r0, [pc, #12]	; (800251c <MX_TIM1_Init+0x180>)
 8002510:	f000 facc 	bl	8002aac <HAL_TIM_MspPostInit>

}
 8002514:	bf00      	nop
 8002516:	3758      	adds	r7, #88	; 0x58
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20001088 	.word	0x20001088
 8002520:	40012c00 	.word	0x40012c00

08002524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	463b      	mov	r3, r7
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 144-1;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_TIM2_Init+0x94>)
 800254a:	228f      	movs	r2, #143	; 0x8f
 800254c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002556:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800255a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_TIM2_Init+0x94>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002568:	4813      	ldr	r0, [pc, #76]	; (80025b8 <MX_TIM2_Init+0x94>)
 800256a:	f002 f911 	bl	8004790 <HAL_TIM_Base_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002574:	f000 f9b4 	bl	80028e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_TIM2_Init+0x94>)
 8002586:	f002 fc65 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002590:	f000 f9a6 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002594:	2300      	movs	r3, #0
 8002596:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_TIM2_Init+0x94>)
 80025a2:	f002 ffe3 	bl	800556c <HAL_TIMEx_MasterConfigSynchronization>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80025ac:	f000 f998 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200010d0 	.word	0x200010d0

080025bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025c2:	4a12      	ldr	r2, [pc, #72]	; (800260c <MX_USART3_UART_Init+0x50>)
 80025c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025e2:	220c      	movs	r2, #12
 80025e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_USART3_UART_Init+0x4c>)
 80025f4:	f003 f87b 	bl	80056ee <HAL_UART_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025fe:	f000 f96f 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000fcc 	.word	0x20000fcc
 800260c:	40004800 	.word	0x40004800

08002610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_DMA_Init+0x38>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <MX_DMA_Init+0x38>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6153      	str	r3, [r2, #20]
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_DMA_Init+0x38>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2105      	movs	r1, #5
 8002632:	200b      	movs	r0, #11
 8002634:	f000 ffa3 	bl	800357e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002638:	200b      	movs	r0, #11
 800263a:	f000 ffbc 	bl	80035b6 <HAL_NVIC_EnableIRQ>

}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000

0800264c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <MX_GPIO_Init+0x124>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a42      	ldr	r2, [pc, #264]	; (8002770 <MX_GPIO_Init+0x124>)
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b40      	ldr	r3, [pc, #256]	; (8002770 <MX_GPIO_Init+0x124>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002678:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <MX_GPIO_Init+0x124>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a3c      	ldr	r2, [pc, #240]	; (8002770 <MX_GPIO_Init+0x124>)
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <MX_GPIO_Init+0x124>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <MX_GPIO_Init+0x124>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a36      	ldr	r2, [pc, #216]	; (8002770 <MX_GPIO_Init+0x124>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <MX_GPIO_Init+0x124>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <MX_GPIO_Init+0x124>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a30      	ldr	r2, [pc, #192]	; (8002770 <MX_GPIO_Init+0x124>)
 80026ae:	f043 0308 	orr.w	r3, r3, #8
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <MX_GPIO_Init+0x124>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80026c0:	2200      	movs	r2, #0
 80026c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c6:	482b      	ldr	r0, [pc, #172]	; (8002774 <MX_GPIO_Init+0x128>)
 80026c8:	f001 fb18 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 80026cc:	2200      	movs	r2, #0
 80026ce:	f24f 0118 	movw	r1, #61464	; 0xf018
 80026d2:	4829      	ldr	r0, [pc, #164]	; (8002778 <MX_GPIO_Init+0x12c>)
 80026d4:	f001 fb12 	bl	8003cfc <HAL_GPIO_WritePin>
                          |OUT3_2_Pin|OUT3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_1_Pin|OUT4_2_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80026de:	4827      	ldr	r0, [pc, #156]	; (800277c <MX_GPIO_Init+0x130>)
 80026e0:	f001 fb0c 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	4619      	mov	r1, r3
 80026fc:	481d      	ldr	r0, [pc, #116]	; (8002774 <MX_GPIO_Init+0x128>)
 80026fe:	f001 f979 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_1_Pin OUT2_2_Pin OUT1_2_Pin OUT1_1_Pin
                           OUT3_2_Pin OUT3_1_Pin */
  GPIO_InitStruct.Pin = OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 8002702:	f24f 0318 	movw	r3, #61464	; 0xf018
 8002706:	613b      	str	r3, [r7, #16]
                          |OUT3_2_Pin|OUT3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	2301      	movs	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2302      	movs	r3, #2
 8002712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	f107 0310 	add.w	r3, r7, #16
 8002718:	4619      	mov	r1, r3
 800271a:	4817      	ldr	r0, [pc, #92]	; (8002778 <MX_GPIO_Init+0x12c>)
 800271c:	f001 f96a 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT4_1_Pin OUT4_2_Pin */
  GPIO_InitStruct.Pin = OUT4_1_Pin|OUT4_2_Pin;
 8002720:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8002724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002726:	2301      	movs	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2302      	movs	r3, #2
 8002730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	4619      	mov	r1, r3
 8002738:	4810      	ldr	r0, [pc, #64]	; (800277c <MX_GPIO_Init+0x130>)
 800273a:	f001 f95b 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D02_Encoder_Pin */
  GPIO_InitStruct.Pin = D02_Encoder_Pin;
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <MX_GPIO_Init+0x134>)
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D02_Encoder_GPIO_Port, &GPIO_InitStruct);
 800274a:	f107 0310 	add.w	r3, r7, #16
 800274e:	4619      	mov	r1, r3
 8002750:	4809      	ldr	r0, [pc, #36]	; (8002778 <MX_GPIO_Init+0x12c>)
 8002752:	f001 f94f 	bl	80039f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2105      	movs	r1, #5
 800275a:	2017      	movs	r0, #23
 800275c:	f000 ff0f 	bl	800357e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002760:	2017      	movs	r0, #23
 8002762:	f000 ff28 	bl	80035b6 <HAL_NVIC_EnableIRQ>

}
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	40011000 	.word	0x40011000
 8002778:	40010c00 	.word	0x40010c00
 800277c:	40010800 	.word	0x40010800
 8002780:	10110000 	.word	0x10110000

08002784 <StartModbus>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbus */
void StartModbus(void *argument)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	int i =0;
//	char buff[64];
	uint16_t valor =1234;
 800278c:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002790:	81fb      	strh	r3, [r7, #14]
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
//	  osMessageGet( QueueDataADCHandle, &valor, 0 );
	prt=pvPortMalloc(100*sizeof (char));
 8002792:	2064      	movs	r0, #100	; 0x64
 8002794:	f006 ffa2 	bl	80096dc <pvPortMalloc>
 8002798:	6178      	str	r0, [r7, #20]
	sprintf(prt,"Dato leido de la Queue: %u \n",valor);
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	461a      	mov	r2, r3
 800279e:	490f      	ldr	r1, [pc, #60]	; (80027dc <StartModbus+0x58>)
 80027a0:	6978      	ldr	r0, [r7, #20]
 80027a2:	f007 f8c5 	bl	8009930 <siprintf>

	 status = osMessageQueueGet(QueueDataADCHandle, &valor, NULL, 5000);   // wait for message
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <StartModbus+0x5c>)
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	f107 010e 	add.w	r1, r7, #14
 80027ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80027b2:	2200      	movs	r2, #0
 80027b4:	f003 ffa0 	bl	80066f8 <osMessageQueueGet>
 80027b8:	6138      	str	r0, [r7, #16]
	    if (status == osOK) {
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <StartModbus+0x42>
//	HAL_UART_Transmit(&huart3, (uint8_t*)prt, strlen(prt), 100);
	vPortFree(prt);
 80027c0:	6978      	ldr	r0, [r7, #20]
 80027c2:	f006 ff9d 	bl	8009700 <vPortFree>
	      ; // process data
	    }
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80027c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <StartModbus+0x60>)
 80027cc:	f001 faae 	bl	8003d2c <HAL_GPIO_TogglePin>

    osDelay(900);
 80027d0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80027d4:	f003 fe40 	bl	8006458 <osDelay>
	prt=pvPortMalloc(100*sizeof (char));
 80027d8:	e7db      	b.n	8002792 <StartModbus+0xe>
 80027da:	bf00      	nop
 80027dc:	0800a0c4 	.word	0x0800a0c4
 80027e0:	2000111c 	.word	0x2000111c
 80027e4:	40011000 	.word	0x40011000

080027e8 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1,sizeof (adc1));
//	osMessageQueuePut(QueueDataADCHandle, &adc1, 5000);
//	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
//	osThreadYield();

    osDelay(100);
 80027f0:	2064      	movs	r0, #100	; 0x64
 80027f2:	f003 fe31 	bl	8006458 <osDelay>
 80027f6:	e7fb      	b.n	80027f0 <StartADC+0x8>

080027f8 <StartEncoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoders */
void StartEncoders(void *argument)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	uint16_t pasador[2];
	uint16_t delta[2];// para mandar los deltaticks
	uint16_t meanData[2];


	HAL_TIM_Base_Start_IT(&htim2);
 8002800:	481c      	ldr	r0, [pc, #112]	; (8002874 <StartEncoders+0x7c>)
 8002802:	f002 f815 	bl	8004830 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {

    //Velocidad(ModbusDATA[0]);// Calculo la velocidad para devolver por modbus
    osDelay(Ts);// Delta T
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <StartEncoders+0x80>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f003 fe24 	bl	8006458 <osDelay>
    Sentido(ModbusDATA[0]);
 8002810:	4b1a      	ldr	r3, [pc, #104]	; (800287c <StartEncoders+0x84>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fc39 	bl	800208c <Sentido>
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <StartEncoders+0x88>)
 800281c:	681b      	ldr	r3, [r3, #0]

    memcpy(meanData, &resultMean, sizeof(resultMean));
 800281e:	60fb      	str	r3, [r7, #12]
    ModbusDATA[4]=meanData[0];
 8002820:	89ba      	ldrh	r2, [r7, #12]
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <StartEncoders+0x84>)
 8002824:	811a      	strh	r2, [r3, #8]
    ModbusDATA[5]=meanData[1];
 8002826:	89fa      	ldrh	r2, [r7, #14]
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <StartEncoders+0x84>)
 800282a:	815a      	strh	r2, [r3, #10]
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <StartEncoders+0x8c>)
 800282e:	681b      	ldr	r3, [r3, #0]


    memcpy(pasador, &velocidad, sizeof(velocidad));
 8002830:	617b      	str	r3, [r7, #20]
    ModbusDATA[8]=pasador[0];
 8002832:	8aba      	ldrh	r2, [r7, #20]
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <StartEncoders+0x84>)
 8002836:	821a      	strh	r2, [r3, #16]
    ModbusDATA[9]=pasador[1];
 8002838:	8afa      	ldrh	r2, [r7, #22]
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <StartEncoders+0x84>)
 800283c:	825a      	strh	r2, [r3, #18]
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <StartEncoders+0x90>)
 8002840:	681b      	ldr	r3, [r3, #0]

    memcpy(delta, &deltaTicks, sizeof(deltaTicks));
 8002842:	613b      	str	r3, [r7, #16]
    ModbusDATA[10]=delta[0];
 8002844:	8a3a      	ldrh	r2, [r7, #16]
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <StartEncoders+0x84>)
 8002848:	829a      	strh	r2, [r3, #20]
    ModbusDATA[11]=delta[1];
 800284a:	8a7a      	ldrh	r2, [r7, #18]
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <StartEncoders+0x84>)
 800284e:	82da      	strh	r2, [r3, #22]

    htim1.Instance->CCR1 = ModbusDATA[1];
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <StartEncoders+0x84>)
 8002852:	885a      	ldrh	r2, [r3, #2]
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <StartEncoders+0x94>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	635a      	str	r2, [r3, #52]	; 0x34

//    ModbusDATA[6] = overflow;
    if(overflow >= 2){
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <StartEncoders+0x98>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d9d1      	bls.n	8002806 <StartEncoders+0xe>
    	  velocidad = 0;
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <StartEncoders+0x8c>)
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    	  overflow = 0;
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <StartEncoders+0x98>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    osDelay(Ts);// Delta T
 8002870:	e7c9      	b.n	8002806 <StartEncoders+0xe>
 8002872:	bf00      	nop
 8002874:	200010d0 	.word	0x200010d0
 8002878:	2000001c 	.word	0x2000001c
 800287c:	20000000 	.word	0x20000000
 8002880:	20000178 	.word	0x20000178
 8002884:	200000c0 	.word	0x200000c0
 8002888:	200000d0 	.word	0x200000d0
 800288c:	20001088 	.word	0x20001088
 8002890:	200000cc 	.word	0x200000cc

08002894 <StartControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800289c:	2001      	movs	r0, #1
 800289e:	f003 fddb 	bl	8006458 <osDelay>
 80028a2:	e7fb      	b.n	800289c <StartControl+0x8>

080028a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//  // ESTO ES DE FREERTOS
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028b6:	f000 faa1 	bl	8002dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2){
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d104      	bne.n	80028ce <HAL_TIM_PeriodElapsedCallback+0x2a>
	 overflow += 1;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80028cc:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40000800 	.word	0x40000800
 80028dc:	200000cc 	.word	0x200000cc

080028e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e4:	b672      	cpsid	i
}
 80028e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <Error_Handler+0x8>
	...

080028ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_MspInit+0x68>)
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_MspInit+0x68>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6193      	str	r3, [r2, #24]
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_MspInit+0x68>)
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_MspInit+0x68>)
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	4a11      	ldr	r2, [pc, #68]	; (8002954 <HAL_MspInit+0x68>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	61d3      	str	r3, [r2, #28]
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_MspInit+0x68>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	210f      	movs	r1, #15
 8002926:	f06f 0001 	mvn.w	r0, #1
 800292a:	f000 fe28 	bl	800357e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_MspInit+0x6c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_MspInit+0x6c>)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40010000 	.word	0x40010000

0800295c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2c      	ldr	r2, [pc, #176]	; (8002a28 <HAL_ADC_MspInit+0xcc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d151      	bne.n	8002a20 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_ADC_MspInit+0xd0>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <HAL_ADC_MspInit+0xd0>)
 8002982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_ADC_MspInit+0xd0>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_ADC_MspInit+0xd0>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a24      	ldr	r2, [pc, #144]	; (8002a2c <HAL_ADC_MspInit+0xd0>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <HAL_ADC_MspInit+0xd0>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80029ac:	230f      	movs	r3, #15
 80029ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b0:	2303      	movs	r3, #3
 80029b2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	4619      	mov	r1, r3
 80029ba:	481d      	ldr	r0, [pc, #116]	; (8002a30 <HAL_ADC_MspInit+0xd4>)
 80029bc:	f001 f81a 	bl	80039f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029c0:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_ADC_MspInit+0xdc>)
 80029c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029f4:	480f      	ldr	r0, [pc, #60]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 80029f6:	f000 fded 	bl	80035d4 <HAL_DMA_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002a00:	f7ff ff6e 	bl	80028e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 8002a08:	621a      	str	r2, [r3, #32]
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <HAL_ADC_MspInit+0xd8>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002a10:	2200      	movs	r2, #0
 8002a12:	2105      	movs	r1, #5
 8002a14:	2012      	movs	r0, #18
 8002a16:	f000 fdb2 	bl	800357e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a1a:	2012      	movs	r0, #18
 8002a1c:	f000 fdcb 	bl	80035b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40012400 	.word	0x40012400
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010800 	.word	0x40010800
 8002a34:	20001044 	.word	0x20001044
 8002a38:	40020008 	.word	0x40020008

08002a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_TIM_Base_MspInit+0x68>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10c      	bne.n	8002a68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_TIM_Base_MspInit+0x6c>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <HAL_TIM_Base_MspInit+0x6c>)
 8002a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a58:	6193      	str	r3, [r2, #24]
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_TIM_Base_MspInit+0x6c>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a66:	e018      	b.n	8002a9a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d113      	bne.n	8002a9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_TIM_Base_MspInit+0x6c>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a0c      	ldr	r2, [pc, #48]	; (8002aa8 <HAL_TIM_Base_MspInit+0x6c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	61d3      	str	r3, [r2, #28]
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_TIM_Base_MspInit+0x6c>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2105      	movs	r1, #5
 8002a8e:	201c      	movs	r0, #28
 8002a90:	f000 fd75 	bl	800357e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a94:	201c      	movs	r0, #28
 8002a96:	f000 fd8e 	bl	80035b6 <HAL_NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_TIM_MspPostInit+0x5c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d118      	bne.n	8002afe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_TIM_MspPostInit+0x60>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_TIM_MspPostInit+0x60>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6193      	str	r3, [r2, #24]
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_TIM_MspPostInit+0x60>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_01_Pin|PWM_02_Pin|PWM_03_Pin|PWM_04_Pin;
 8002ae4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	4619      	mov	r1, r3
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <HAL_TIM_MspPostInit+0x64>)
 8002afa:	f000 ff7b 	bl	80039f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010800 	.word	0x40010800

08002b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <HAL_UART_MspInit+0x9c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d139      	bne.n	8002ba8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b34:	4b1f      	ldr	r3, [pc, #124]	; (8002bb4 <HAL_UART_MspInit+0xa0>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <HAL_UART_MspInit+0xa0>)
 8002b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3e:	61d3      	str	r3, [r2, #28]
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_UART_MspInit+0xa0>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_UART_MspInit+0xa0>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_UART_MspInit+0xa0>)
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	6193      	str	r3, [r2, #24]
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_UART_MspInit+0xa0>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	4619      	mov	r1, r3
 8002b78:	480f      	ldr	r0, [pc, #60]	; (8002bb8 <HAL_UART_MspInit+0xa4>)
 8002b7a:	f000 ff3b 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4619      	mov	r1, r3
 8002b92:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <HAL_UART_MspInit+0xa4>)
 8002b94:	f000 ff2e 	bl	80039f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2105      	movs	r1, #5
 8002b9c:	2027      	movs	r0, #39	; 0x27
 8002b9e:	f000 fcee 	bl	800357e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ba2:	2027      	movs	r0, #39	; 0x27
 8002ba4:	f000 fd07 	bl	80035b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ba8:	bf00      	nop
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40004800 	.word	0x40004800
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010c00 	.word	0x40010c00

08002bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	201e      	movs	r0, #30
 8002bd2:	f000 fcd4 	bl	800357e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bd6:	201e      	movs	r0, #30
 8002bd8:	f000 fced 	bl	80035b6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_InitTick+0xa0>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_InitTick+0xa0>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	61d3      	str	r3, [r2, #28]
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <HAL_InitTick+0xa0>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bf4:	f107 0210 	add.w	r2, r7, #16
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 fcc2 	bl	8004588 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c04:	f001 fc98 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_InitTick+0xa4>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0c9b      	lsrs	r3, r3, #18
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_InitTick+0xac>)
 8002c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c28:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002c3c:	4809      	ldr	r0, [pc, #36]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c3e:	f001 fda7 	bl	8004790 <HAL_TIM_Base_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002c48:	4806      	ldr	r0, [pc, #24]	; (8002c64 <HAL_InitTick+0xa8>)
 8002c4a:	f001 fdf1 	bl	8004830 <HAL_TIM_Base_Start_IT>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	e000      	b.n	8002c54 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3730      	adds	r7, #48	; 0x30
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	431bde83 	.word	0x431bde83
 8002c64:	20001124 	.word	0x20001124
 8002c68:	40000800 	.word	0x40000800

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
	...

08002c98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <DMA1_Channel1_IRQHandler+0x10>)
 8002c9e:	f000 fda3 	bl	80037e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20001044 	.word	0x20001044

08002cac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <ADC1_2_IRQHandler+0x10>)
 8002cb2:	f000 f997 	bl	8002fe4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20001014 	.word	0x20001014

08002cc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D02_Encoder_Pin);
 8002cc4:	2080      	movs	r0, #128	; 0x80
 8002cc6:	f001 f84b 	bl	8003d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <TIM2_IRQHandler+0x10>)
 8002cd6:	f001 fef7 	bl	8004ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200010d0 	.word	0x200010d0

08002ce4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <TIM4_IRQHandler+0x10>)
 8002cea:	f001 feed 	bl	8004ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001124 	.word	0x20001124

08002cf8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <USART3_IRQHandler+0x10>)
 8002cfe:	f002 fe21 	bl	8005944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000fcc 	.word	0x20000fcc

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f006 fcf2 	bl	8009724 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20005000 	.word	0x20005000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20000180 	.word	0x20000180
 8002d74:	200011c0 	.word	0x200011c0

08002d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d84:	480c      	ldr	r0, [pc, #48]	; (8002db8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d86:	490d      	ldr	r1, [pc, #52]	; (8002dbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	; (8002dc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002daa:	f7ff ffe5 	bl	8002d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dae:	f006 fcbf 	bl	8009730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002db2:	f7ff f9a3 	bl	80020fc <main>
  bx lr
 8002db6:	4770      	bx	lr
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002dc0:	0800a280 	.word	0x0800a280
  ldr r2, =_sbss
 8002dc4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002dc8:	200011c0 	.word	0x200011c0

08002dcc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <CAN1_RX1_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_Init+0x28>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a07      	ldr	r2, [pc, #28]	; (8002df8 <HAL_Init+0x28>)
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de0:	2003      	movs	r0, #3
 8002de2:	f000 fbc1 	bl	8003568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de6:	200f      	movs	r0, #15
 8002de8:	f7ff fee8 	bl	8002bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dec:	f7ff fd7e 	bl	80028ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40022000 	.word	0x40022000

08002dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_IncTick+0x1c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_IncTick+0x20>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <HAL_IncTick+0x20>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	20000034 	.word	0x20000034
 8002e1c:	2000116c 	.word	0x2000116c

08002e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <HAL_GetTick+0x10>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	2000116c 	.word	0x2000116c

08002e34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0be      	b.n	8002fd4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fd72 	bl	800295c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa81 	bl	8003380 <ADC_ConversionStop_Disable>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 8099 	bne.w	8002fc2 <HAL_ADC_Init+0x18e>
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 8095 	bne.w	8002fc2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	f043 0202 	orr.w	r2, r3, #2
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7b1b      	ldrb	r3, [r3, #12]
 8002eba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ebc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ecc:	d003      	beq.n	8002ed6 <HAL_ADC_Init+0xa2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d102      	bne.n	8002edc <HAL_ADC_Init+0xa8>
 8002ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eda:	e000      	b.n	8002ede <HAL_ADC_Init+0xaa>
 8002edc:	2300      	movs	r3, #0
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7d1b      	ldrb	r3, [r3, #20]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d119      	bne.n	8002f20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	7b1b      	ldrb	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	035a      	lsls	r2, r3, #13
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	e00b      	b.n	8002f20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_ADC_Init+0x1a8>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f50:	d003      	beq.n	8002f5a <HAL_ADC_Init+0x126>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d104      	bne.n	8002f64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	051b      	lsls	r3, r3, #20
 8002f62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_ADC_Init+0x1ac>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d10b      	bne.n	8002fa0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	f043 0201 	orr.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f9e:	e018      	b.n	8002fd2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f023 0312 	bic.w	r3, r3, #18
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fc0:	e007      	b.n	8002fd2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f043 0210 	orr.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	ffe1f7fd 	.word	0xffe1f7fd
 8002fe0:	ff1f0efe 	.word	0xff1f0efe

08002fe4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d140      	bne.n	800307c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b02      	cmp	r3, #2
 8003006:	d139      	bne.n	800307c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800302a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800302e:	d11d      	bne.n	800306c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003034:	2b00      	cmp	r3, #0
 8003036:	d119      	bne.n	800306c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0220 	bic.w	r2, r2, #32
 8003046:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f043 0201 	orr.w	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f87c 	bl	800316a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f06f 0212 	mvn.w	r2, #18
 800307a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d14f      	bne.n	800312a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d148      	bne.n	800312a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80030ba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80030be:	d012      	beq.n	80030e6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d125      	bne.n	800311a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030dc:	d11d      	bne.n	800311a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d119      	bne.n	800311a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f971 	bl	8003402 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 020c 	mvn.w	r2, #12
 8003128:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d114      	bne.n	8003162 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10d      	bne.n	8003162 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f812 	bl	800317c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0201 	mvn.w	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
	...

08003190 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x20>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0dc      	b.n	800336a <HAL_ADC_ConfigChannel+0x1da>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b06      	cmp	r3, #6
 80031be:	d81c      	bhi.n	80031fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b05      	subs	r3, #5
 80031d2:	221f      	movs	r2, #31
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	4019      	ands	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	3b05      	subs	r3, #5
 80031ec:	fa00 f203 	lsl.w	r2, r0, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
 80031f8:	e03c      	b.n	8003274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d81c      	bhi.n	800323c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b23      	subs	r3, #35	; 0x23
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	4019      	ands	r1, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	3b23      	subs	r3, #35	; 0x23
 800322e:	fa00 f203 	lsl.w	r2, r0, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
 800323a:	e01b      	b.n	8003274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b41      	subs	r3, #65	; 0x41
 800324e:	221f      	movs	r2, #31
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4019      	ands	r1, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b41      	subs	r3, #65	; 0x41
 8003268:	fa00 f203 	lsl.w	r2, r0, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b09      	cmp	r3, #9
 800327a:	d91c      	bls.n	80032b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68d9      	ldr	r1, [r3, #12]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	3b1e      	subs	r3, #30
 800328e:	2207      	movs	r2, #7
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	4019      	ands	r1, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6898      	ldr	r0, [r3, #8]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	3b1e      	subs	r3, #30
 80032a8:	fa00 f203 	lsl.w	r2, r0, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	e019      	b.n	80032ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6919      	ldr	r1, [r3, #16]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	2207      	movs	r2, #7
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4019      	ands	r1, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6898      	ldr	r0, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	fa00 f203 	lsl.w	r2, r0, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d003      	beq.n	80032fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032f6:	2b11      	cmp	r3, #17
 80032f8:	d132      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_ADC_ConfigChannel+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d125      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d126      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003320:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b10      	cmp	r3, #16
 8003328:	d11a      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_ADC_ConfigChannel+0x1e8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a13      	ldr	r2, [pc, #76]	; (800337c <HAL_ADC_ConfigChannel+0x1ec>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9a      	lsrs	r2, r3, #18
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003340:	e002      	b.n	8003348 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3b01      	subs	r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f9      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x1b2>
 800334e:	e007      	b.n	8003360 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012400 	.word	0x40012400
 8003378:	2000002c 	.word	0x2000002c
 800337c:	431bde83 	.word	0x431bde83

08003380 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d12e      	bne.n	80033f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033aa:	f7ff fd39 	bl	8002e20 <HAL_GetTick>
 80033ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033b0:	e01b      	b.n	80033ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033b2:	f7ff fd35 	bl	8002e20 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d914      	bls.n	80033ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10d      	bne.n	80033ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	f043 0210 	orr.w	r2, r3, #16
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e007      	b.n	80033fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d0dc      	beq.n	80033b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003430:	4013      	ands	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800343c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <__NVIC_SetPriorityGrouping+0x44>)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	60d3      	str	r3, [r2, #12]
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <__NVIC_GetPriorityGrouping+0x18>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 0307 	and.w	r3, r3, #7
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	2b00      	cmp	r3, #0
 8003488:	db0b      	blt.n	80034a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	f003 021f 	and.w	r2, r3, #31
 8003490:	4906      	ldr	r1, [pc, #24]	; (80034ac <__NVIC_EnableIRQ+0x34>)
 8003492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2001      	movs	r0, #1
 800349a:	fa00 f202 	lsl.w	r2, r0, r2
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100

080034b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	6039      	str	r1, [r7, #0]
 80034ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	db0a      	blt.n	80034da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	490c      	ldr	r1, [pc, #48]	; (80034fc <__NVIC_SetPriority+0x4c>)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	0112      	lsls	r2, r2, #4
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034d8:	e00a      	b.n	80034f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4908      	ldr	r1, [pc, #32]	; (8003500 <__NVIC_SetPriority+0x50>)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3b04      	subs	r3, #4
 80034e8:	0112      	lsls	r2, r2, #4
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	440b      	add	r3, r1
 80034ee:	761a      	strb	r2, [r3, #24]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	e000e100 	.word	0xe000e100
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f1c3 0307 	rsb	r3, r3, #7
 800351e:	2b04      	cmp	r3, #4
 8003520:	bf28      	it	cs
 8003522:	2304      	movcs	r3, #4
 8003524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3304      	adds	r3, #4
 800352a:	2b06      	cmp	r3, #6
 800352c:	d902      	bls.n	8003534 <NVIC_EncodePriority+0x30>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3b03      	subs	r3, #3
 8003532:	e000      	b.n	8003536 <NVIC_EncodePriority+0x32>
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	401a      	ands	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800354c:	f04f 31ff 	mov.w	r1, #4294967295
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43d9      	mvns	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	4313      	orrs	r3, r2
         );
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	; 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff4f 	bl	8003414 <__NVIC_SetPriorityGrouping>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003590:	f7ff ff64 	bl	800345c <__NVIC_GetPriorityGrouping>
 8003594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	6978      	ldr	r0, [r7, #20]
 800359c:	f7ff ffb2 	bl	8003504 <NVIC_EncodePriority>
 80035a0:	4602      	mov	r2, r0
 80035a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff81 	bl	80034b0 <__NVIC_SetPriority>
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff57 	bl	8003478 <__NVIC_EnableIRQ>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e043      	b.n	8003672 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_DMA_Init+0xa8>)
 80035f2:	4413      	add	r3, r2
 80035f4:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_DMA_Init+0xac>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	009a      	lsls	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <HAL_DMA_Init+0xb0>)
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800361e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003622:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800362c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	bffdfff8 	.word	0xbffdfff8
 8003680:	cccccccd 	.word	0xcccccccd
 8003684:	40020000 	.word	0x40020000

08003688 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800369a:	2b02      	cmp	r3, #2
 800369c:	d008      	beq.n	80036b0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e020      	b.n	80036f2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020e 	bic.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800370e:	2b02      	cmp	r3, #2
 8003710:	d005      	beq.n	800371e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2204      	movs	r2, #4
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	e051      	b.n	80037c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 020e 	bic.w	r2, r2, #14
 800372c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <HAL_DMA_Abort_IT+0xd0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d029      	beq.n	800379c <HAL_DMA_Abort_IT+0xa0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a20      	ldr	r2, [pc, #128]	; (80037d0 <HAL_DMA_Abort_IT+0xd4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d022      	beq.n	8003798 <HAL_DMA_Abort_IT+0x9c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <HAL_DMA_Abort_IT+0xd8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d01a      	beq.n	8003792 <HAL_DMA_Abort_IT+0x96>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <HAL_DMA_Abort_IT+0xdc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d012      	beq.n	800378c <HAL_DMA_Abort_IT+0x90>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_DMA_Abort_IT+0xe0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00a      	beq.n	8003786 <HAL_DMA_Abort_IT+0x8a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <HAL_DMA_Abort_IT+0xe4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d102      	bne.n	8003780 <HAL_DMA_Abort_IT+0x84>
 800377a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800377e:	e00e      	b.n	800379e <HAL_DMA_Abort_IT+0xa2>
 8003780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003784:	e00b      	b.n	800379e <HAL_DMA_Abort_IT+0xa2>
 8003786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800378a:	e008      	b.n	800379e <HAL_DMA_Abort_IT+0xa2>
 800378c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003790:	e005      	b.n	800379e <HAL_DMA_Abort_IT+0xa2>
 8003792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003796:	e002      	b.n	800379e <HAL_DMA_Abort_IT+0xa2>
 8003798:	2310      	movs	r3, #16
 800379a:	e000      	b.n	800379e <HAL_DMA_Abort_IT+0xa2>
 800379c:	2301      	movs	r3, #1
 800379e:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <HAL_DMA_Abort_IT+0xe8>)
 80037a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
    } 
  }
  return status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40020008 	.word	0x40020008
 80037d0:	4002001c 	.word	0x4002001c
 80037d4:	40020030 	.word	0x40020030
 80037d8:	40020044 	.word	0x40020044
 80037dc:	40020058 	.word	0x40020058
 80037e0:	4002006c 	.word	0x4002006c
 80037e4:	40020000 	.word	0x40020000

080037e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2204      	movs	r2, #4
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d04f      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xc8>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d04a      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0204 	bic.w	r2, r2, #4
 8003836:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a66      	ldr	r2, [pc, #408]	; (80039d8 <HAL_DMA_IRQHandler+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d029      	beq.n	8003896 <HAL_DMA_IRQHandler+0xae>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a65      	ldr	r2, [pc, #404]	; (80039dc <HAL_DMA_IRQHandler+0x1f4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_IRQHandler+0xaa>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a63      	ldr	r2, [pc, #396]	; (80039e0 <HAL_DMA_IRQHandler+0x1f8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01a      	beq.n	800388c <HAL_DMA_IRQHandler+0xa4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a62      	ldr	r2, [pc, #392]	; (80039e4 <HAL_DMA_IRQHandler+0x1fc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d012      	beq.n	8003886 <HAL_DMA_IRQHandler+0x9e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a60      	ldr	r2, [pc, #384]	; (80039e8 <HAL_DMA_IRQHandler+0x200>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00a      	beq.n	8003880 <HAL_DMA_IRQHandler+0x98>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5f      	ldr	r2, [pc, #380]	; (80039ec <HAL_DMA_IRQHandler+0x204>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d102      	bne.n	800387a <HAL_DMA_IRQHandler+0x92>
 8003874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003878:	e00e      	b.n	8003898 <HAL_DMA_IRQHandler+0xb0>
 800387a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800387e:	e00b      	b.n	8003898 <HAL_DMA_IRQHandler+0xb0>
 8003880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003884:	e008      	b.n	8003898 <HAL_DMA_IRQHandler+0xb0>
 8003886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800388a:	e005      	b.n	8003898 <HAL_DMA_IRQHandler+0xb0>
 800388c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003890:	e002      	b.n	8003898 <HAL_DMA_IRQHandler+0xb0>
 8003892:	2340      	movs	r3, #64	; 0x40
 8003894:	e000      	b.n	8003898 <HAL_DMA_IRQHandler+0xb0>
 8003896:	2304      	movs	r3, #4
 8003898:	4a55      	ldr	r2, [pc, #340]	; (80039f0 <HAL_DMA_IRQHandler+0x208>)
 800389a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8094 	beq.w	80039ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038ae:	e08e      	b.n	80039ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2202      	movs	r2, #2
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d056      	beq.n	800396e <HAL_DMA_IRQHandler+0x186>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d051      	beq.n	800396e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 020a 	bic.w	r2, r2, #10
 80038e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a38      	ldr	r2, [pc, #224]	; (80039d8 <HAL_DMA_IRQHandler+0x1f0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d029      	beq.n	800394e <HAL_DMA_IRQHandler+0x166>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a37      	ldr	r2, [pc, #220]	; (80039dc <HAL_DMA_IRQHandler+0x1f4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d022      	beq.n	800394a <HAL_DMA_IRQHandler+0x162>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a35      	ldr	r2, [pc, #212]	; (80039e0 <HAL_DMA_IRQHandler+0x1f8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01a      	beq.n	8003944 <HAL_DMA_IRQHandler+0x15c>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a34      	ldr	r2, [pc, #208]	; (80039e4 <HAL_DMA_IRQHandler+0x1fc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d012      	beq.n	800393e <HAL_DMA_IRQHandler+0x156>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <HAL_DMA_IRQHandler+0x200>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00a      	beq.n	8003938 <HAL_DMA_IRQHandler+0x150>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a31      	ldr	r2, [pc, #196]	; (80039ec <HAL_DMA_IRQHandler+0x204>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d102      	bne.n	8003932 <HAL_DMA_IRQHandler+0x14a>
 800392c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003930:	e00e      	b.n	8003950 <HAL_DMA_IRQHandler+0x168>
 8003932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003936:	e00b      	b.n	8003950 <HAL_DMA_IRQHandler+0x168>
 8003938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800393c:	e008      	b.n	8003950 <HAL_DMA_IRQHandler+0x168>
 800393e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003942:	e005      	b.n	8003950 <HAL_DMA_IRQHandler+0x168>
 8003944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003948:	e002      	b.n	8003950 <HAL_DMA_IRQHandler+0x168>
 800394a:	2320      	movs	r3, #32
 800394c:	e000      	b.n	8003950 <HAL_DMA_IRQHandler+0x168>
 800394e:	2302      	movs	r3, #2
 8003950:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <HAL_DMA_IRQHandler+0x208>)
 8003952:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	2b00      	cmp	r3, #0
 8003962:	d034      	beq.n	80039ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800396c:	e02f      	b.n	80039ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2208      	movs	r2, #8
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d028      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x1e8>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d023      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
    }
  }
  return;
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
}
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40020008 	.word	0x40020008
 80039dc:	4002001c 	.word	0x4002001c
 80039e0:	40020030 	.word	0x40020030
 80039e4:	40020044 	.word	0x40020044
 80039e8:	40020058 	.word	0x40020058
 80039ec:	4002006c 	.word	0x4002006c
 80039f0:	40020000 	.word	0x40020000

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b08b      	sub	sp, #44	; 0x2c
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a06:	e169      	b.n	8003cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a08:	2201      	movs	r2, #1
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f040 8158 	bne.w	8003cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a9a      	ldr	r2, [pc, #616]	; (8003c94 <HAL_GPIO_Init+0x2a0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d05e      	beq.n	8003aee <HAL_GPIO_Init+0xfa>
 8003a30:	4a98      	ldr	r2, [pc, #608]	; (8003c94 <HAL_GPIO_Init+0x2a0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d875      	bhi.n	8003b22 <HAL_GPIO_Init+0x12e>
 8003a36:	4a98      	ldr	r2, [pc, #608]	; (8003c98 <HAL_GPIO_Init+0x2a4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d058      	beq.n	8003aee <HAL_GPIO_Init+0xfa>
 8003a3c:	4a96      	ldr	r2, [pc, #600]	; (8003c98 <HAL_GPIO_Init+0x2a4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d86f      	bhi.n	8003b22 <HAL_GPIO_Init+0x12e>
 8003a42:	4a96      	ldr	r2, [pc, #600]	; (8003c9c <HAL_GPIO_Init+0x2a8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d052      	beq.n	8003aee <HAL_GPIO_Init+0xfa>
 8003a48:	4a94      	ldr	r2, [pc, #592]	; (8003c9c <HAL_GPIO_Init+0x2a8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d869      	bhi.n	8003b22 <HAL_GPIO_Init+0x12e>
 8003a4e:	4a94      	ldr	r2, [pc, #592]	; (8003ca0 <HAL_GPIO_Init+0x2ac>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d04c      	beq.n	8003aee <HAL_GPIO_Init+0xfa>
 8003a54:	4a92      	ldr	r2, [pc, #584]	; (8003ca0 <HAL_GPIO_Init+0x2ac>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d863      	bhi.n	8003b22 <HAL_GPIO_Init+0x12e>
 8003a5a:	4a92      	ldr	r2, [pc, #584]	; (8003ca4 <HAL_GPIO_Init+0x2b0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d046      	beq.n	8003aee <HAL_GPIO_Init+0xfa>
 8003a60:	4a90      	ldr	r2, [pc, #576]	; (8003ca4 <HAL_GPIO_Init+0x2b0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d85d      	bhi.n	8003b22 <HAL_GPIO_Init+0x12e>
 8003a66:	2b12      	cmp	r3, #18
 8003a68:	d82a      	bhi.n	8003ac0 <HAL_GPIO_Init+0xcc>
 8003a6a:	2b12      	cmp	r3, #18
 8003a6c:	d859      	bhi.n	8003b22 <HAL_GPIO_Init+0x12e>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <HAL_GPIO_Init+0x80>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003aef 	.word	0x08003aef
 8003a78:	08003ac9 	.word	0x08003ac9
 8003a7c:	08003adb 	.word	0x08003adb
 8003a80:	08003b1d 	.word	0x08003b1d
 8003a84:	08003b23 	.word	0x08003b23
 8003a88:	08003b23 	.word	0x08003b23
 8003a8c:	08003b23 	.word	0x08003b23
 8003a90:	08003b23 	.word	0x08003b23
 8003a94:	08003b23 	.word	0x08003b23
 8003a98:	08003b23 	.word	0x08003b23
 8003a9c:	08003b23 	.word	0x08003b23
 8003aa0:	08003b23 	.word	0x08003b23
 8003aa4:	08003b23 	.word	0x08003b23
 8003aa8:	08003b23 	.word	0x08003b23
 8003aac:	08003b23 	.word	0x08003b23
 8003ab0:	08003b23 	.word	0x08003b23
 8003ab4:	08003b23 	.word	0x08003b23
 8003ab8:	08003ad1 	.word	0x08003ad1
 8003abc:	08003ae5 	.word	0x08003ae5
 8003ac0:	4a79      	ldr	r2, [pc, #484]	; (8003ca8 <HAL_GPIO_Init+0x2b4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ac6:	e02c      	b.n	8003b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	623b      	str	r3, [r7, #32]
          break;
 8003ace:	e029      	b.n	8003b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	623b      	str	r3, [r7, #32]
          break;
 8003ad8:	e024      	b.n	8003b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	623b      	str	r3, [r7, #32]
          break;
 8003ae2:	e01f      	b.n	8003b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	623b      	str	r3, [r7, #32]
          break;
 8003aec:	e01a      	b.n	8003b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003af6:	2304      	movs	r3, #4
 8003af8:	623b      	str	r3, [r7, #32]
          break;
 8003afa:	e013      	b.n	8003b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b04:	2308      	movs	r3, #8
 8003b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	611a      	str	r2, [r3, #16]
          break;
 8003b0e:	e009      	b.n	8003b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b10:	2308      	movs	r3, #8
 8003b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	615a      	str	r2, [r3, #20]
          break;
 8003b1a:	e003      	b.n	8003b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	623b      	str	r3, [r7, #32]
          break;
 8003b20:	e000      	b.n	8003b24 <HAL_GPIO_Init+0x130>
          break;
 8003b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2bff      	cmp	r3, #255	; 0xff
 8003b28:	d801      	bhi.n	8003b2e <HAL_GPIO_Init+0x13a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	e001      	b.n	8003b32 <HAL_GPIO_Init+0x13e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2bff      	cmp	r3, #255	; 0xff
 8003b38:	d802      	bhi.n	8003b40 <HAL_GPIO_Init+0x14c>
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	e002      	b.n	8003b46 <HAL_GPIO_Init+0x152>
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	3b08      	subs	r3, #8
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	210f      	movs	r1, #15
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	401a      	ands	r2, r3
 8003b58:	6a39      	ldr	r1, [r7, #32]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 80b1 	beq.w	8003cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b74:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_GPIO_Init+0x2b8>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	4a4c      	ldr	r2, [pc, #304]	; (8003cac <HAL_GPIO_Init+0x2b8>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6193      	str	r3, [r2, #24]
 8003b80:	4b4a      	ldr	r3, [pc, #296]	; (8003cac <HAL_GPIO_Init+0x2b8>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b8c:	4a48      	ldr	r2, [pc, #288]	; (8003cb0 <HAL_GPIO_Init+0x2bc>)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <HAL_GPIO_Init+0x2c0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_GPIO_Init+0x1ec>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <HAL_GPIO_Init+0x2c4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00d      	beq.n	8003bdc <HAL_GPIO_Init+0x1e8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3e      	ldr	r2, [pc, #248]	; (8003cbc <HAL_GPIO_Init+0x2c8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <HAL_GPIO_Init+0x1e4>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3d      	ldr	r2, [pc, #244]	; (8003cc0 <HAL_GPIO_Init+0x2cc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_GPIO_Init+0x1e0>
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e006      	b.n	8003be2 <HAL_GPIO_Init+0x1ee>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	e004      	b.n	8003be2 <HAL_GPIO_Init+0x1ee>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e002      	b.n	8003be2 <HAL_GPIO_Init+0x1ee>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_GPIO_Init+0x1ee>
 8003be0:	2300      	movs	r3, #0
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	f002 0203 	and.w	r2, r2, #3
 8003be8:	0092      	lsls	r2, r2, #2
 8003bea:	4093      	lsls	r3, r2
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bf2:	492f      	ldr	r1, [pc, #188]	; (8003cb0 <HAL_GPIO_Init+0x2bc>)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d006      	beq.n	8003c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c0c:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	492c      	ldr	r1, [pc, #176]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	4928      	ldr	r1, [pc, #160]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c34:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	4922      	ldr	r1, [pc, #136]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
 8003c40:	e006      	b.n	8003c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	491e      	ldr	r1, [pc, #120]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d006      	beq.n	8003c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c5c:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	4918      	ldr	r1, [pc, #96]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	4914      	ldr	r1, [pc, #80]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d021      	beq.n	8003cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	490e      	ldr	r1, [pc, #56]	; (8003cc4 <HAL_GPIO_Init+0x2d0>)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60cb      	str	r3, [r1, #12]
 8003c90:	e021      	b.n	8003cd6 <HAL_GPIO_Init+0x2e2>
 8003c92:	bf00      	nop
 8003c94:	10320000 	.word	0x10320000
 8003c98:	10310000 	.word	0x10310000
 8003c9c:	10220000 	.word	0x10220000
 8003ca0:	10210000 	.word	0x10210000
 8003ca4:	10120000 	.word	0x10120000
 8003ca8:	10110000 	.word	0x10110000
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40010800 	.word	0x40010800
 8003cb8:	40010c00 	.word	0x40010c00
 8003cbc:	40011000 	.word	0x40011000
 8003cc0:	40011400 	.word	0x40011400
 8003cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_GPIO_Init+0x304>)
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	4909      	ldr	r1, [pc, #36]	; (8003cf8 <HAL_GPIO_Init+0x304>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	3301      	adds	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f47f ae8e 	bne.w	8003a08 <HAL_GPIO_Init+0x14>
  }
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	372c      	adds	r7, #44	; 0x2c
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	40010400 	.word	0x40010400

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	611a      	str	r2, [r3, #16]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4013      	ands	r3, r2
 8003d44:	041a      	lsls	r2, r3, #16
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	43d9      	mvns	r1, r3
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	400b      	ands	r3, r1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	611a      	str	r2, [r3, #16]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d76:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fe f8be 	bl	8001f00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40010400 	.word	0x40010400

08003d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e26c      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8087 	beq.w	8003ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db0:	4b92      	ldr	r3, [pc, #584]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d00c      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dbc:	4b8f      	ldr	r3, [pc, #572]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d112      	bne.n	8003dee <HAL_RCC_OscConfig+0x5e>
 8003dc8:	4b8c      	ldr	r3, [pc, #560]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d10b      	bne.n	8003dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd6:	4b89      	ldr	r3, [pc, #548]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d06c      	beq.n	8003ebc <HAL_RCC_OscConfig+0x12c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d168      	bne.n	8003ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e246      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x76>
 8003df8:	4b80      	ldr	r3, [pc, #512]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7f      	ldr	r2, [pc, #508]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e02e      	b.n	8003e64 <HAL_RCC_OscConfig+0xd4>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x98>
 8003e0e:	4b7b      	ldr	r3, [pc, #492]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7a      	ldr	r2, [pc, #488]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b78      	ldr	r3, [pc, #480]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a77      	ldr	r2, [pc, #476]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e01d      	b.n	8003e64 <HAL_RCC_OscConfig+0xd4>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0xbc>
 8003e32:	4b72      	ldr	r3, [pc, #456]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a71      	ldr	r2, [pc, #452]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b6f      	ldr	r3, [pc, #444]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6e      	ldr	r2, [pc, #440]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCC_OscConfig+0xd4>
 8003e4c:	4b6b      	ldr	r3, [pc, #428]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a6a      	ldr	r2, [pc, #424]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a67      	ldr	r2, [pc, #412]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fe ffd8 	bl	8002e20 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fe ffd4 	bl	8002e20 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1fa      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0xe4>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe ffc4 	bl	8002e20 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fe ffc0 	bl	8002e20 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e1e6      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eae:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x10c>
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d063      	beq.n	8003f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eca:	4b4c      	ldr	r3, [pc, #304]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ed6:	4b49      	ldr	r3, [pc, #292]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d11c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x18c>
 8003ee2:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	4b43      	ldr	r3, [pc, #268]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x176>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e1ba      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b3d      	ldr	r3, [pc, #244]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4939      	ldr	r1, [pc, #228]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	e03a      	b.n	8003f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f24:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCC_OscConfig+0x270>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fe ff79 	bl	8002e20 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f32:	f7fe ff75 	bl	8002e20 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e19b      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	4b2d      	ldr	r3, [pc, #180]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4927      	ldr	r1, [pc, #156]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	e015      	b.n	8003f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <HAL_RCC_OscConfig+0x270>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fe ff58 	bl	8002e20 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fe ff54 	bl	8002e20 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e17a      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d03a      	beq.n	8004014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d019      	beq.n	8003fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b17      	ldr	r3, [pc, #92]	; (8004004 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fac:	f7fe ff38 	bl	8002e20 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb4:	f7fe ff34 	bl	8002e20 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e15a      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f000 fb08 	bl	80045e8 <RCC_Delay>
 8003fd8:	e01c      	b.n	8004014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fda:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <HAL_RCC_OscConfig+0x274>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe0:	f7fe ff1e 	bl	8002e20 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe6:	e00f      	b.n	8004008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe8:	f7fe ff1a 	bl	8002e20 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d908      	bls.n	8004008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e140      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	42420000 	.word	0x42420000
 8004004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	4b9e      	ldr	r3, [pc, #632]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e9      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a6 	beq.w	800416e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004026:	4b97      	ldr	r3, [pc, #604]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	4b94      	ldr	r3, [pc, #592]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4a93      	ldr	r2, [pc, #588]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403c:	61d3      	str	r3, [r2, #28]
 800403e:	4b91      	ldr	r3, [pc, #580]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404e:	4b8e      	ldr	r3, [pc, #568]	; (8004288 <HAL_RCC_OscConfig+0x4f8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d118      	bne.n	800408c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405a:	4b8b      	ldr	r3, [pc, #556]	; (8004288 <HAL_RCC_OscConfig+0x4f8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a8a      	ldr	r2, [pc, #552]	; (8004288 <HAL_RCC_OscConfig+0x4f8>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7fe fedb 	bl	8002e20 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fe fed7 	bl	8002e20 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	; 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0fd      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	4b81      	ldr	r3, [pc, #516]	; (8004288 <HAL_RCC_OscConfig+0x4f8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <HAL_RCC_OscConfig+0x312>
 8004094:	4b7b      	ldr	r3, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4a7a      	ldr	r2, [pc, #488]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6213      	str	r3, [r2, #32]
 80040a0:	e02d      	b.n	80040fe <HAL_RCC_OscConfig+0x36e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x334>
 80040aa:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4a75      	ldr	r2, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6213      	str	r3, [r2, #32]
 80040b6:	4b73      	ldr	r3, [pc, #460]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	4a72      	ldr	r2, [pc, #456]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	6213      	str	r3, [r2, #32]
 80040c2:	e01c      	b.n	80040fe <HAL_RCC_OscConfig+0x36e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCC_OscConfig+0x356>
 80040cc:	4b6d      	ldr	r3, [pc, #436]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	4a6c      	ldr	r2, [pc, #432]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	6213      	str	r3, [r2, #32]
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4a69      	ldr	r2, [pc, #420]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	6213      	str	r3, [r2, #32]
 80040e4:	e00b      	b.n	80040fe <HAL_RCC_OscConfig+0x36e>
 80040e6:	4b67      	ldr	r3, [pc, #412]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4a66      	ldr	r2, [pc, #408]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6213      	str	r3, [r2, #32]
 80040f2:	4b64      	ldr	r3, [pc, #400]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4a63      	ldr	r2, [pc, #396]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d015      	beq.n	8004132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fe fe8b 	bl	8002e20 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	e00a      	b.n	8004124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800410e:	f7fe fe87 	bl	8002e20 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f241 3288 	movw	r2, #5000	; 0x1388
 800411c:	4293      	cmp	r3, r2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e0ab      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004124:	4b57      	ldr	r3, [pc, #348]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ee      	beq.n	800410e <HAL_RCC_OscConfig+0x37e>
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fe fe75 	bl	8002e20 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fe fe71 	bl	8002e20 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e095      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004150:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1ee      	bne.n	800413a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004162:	4b48      	ldr	r3, [pc, #288]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4a47      	ldr	r2, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8081 	beq.w	800427a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004178:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d061      	beq.n	8004248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d146      	bne.n	800421a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418c:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_RCC_OscConfig+0x4fc>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fe fe45 	bl	8002e20 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419a:	f7fe fe41 	bl	8002e20 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e067      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ac:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d108      	bne.n	80041d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041c2:	4b30      	ldr	r3, [pc, #192]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	492d      	ldr	r1, [pc, #180]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a19      	ldr	r1, [r3, #32]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	430b      	orrs	r3, r1
 80041e6:	4927      	ldr	r1, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <HAL_RCC_OscConfig+0x4fc>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7fe fe15 	bl	8002e20 <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fa:	f7fe fe11 	bl	8002e20 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e037      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x46a>
 8004218:	e02f      	b.n	800427a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <HAL_RCC_OscConfig+0x4fc>)
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fe fdfe 	bl	8002e20 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004228:	f7fe fdfa 	bl	8002e20 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e020      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x498>
 8004246:	e018      	b.n	800427a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e013      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x4f4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	429a      	cmp	r2, r3
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d001      	beq.n	800427a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	40007000 	.word	0x40007000
 800428c:	42420060 	.word	0x42420060

08004290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d0      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b6a      	ldr	r3, [pc, #424]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d910      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b67      	ldr	r3, [pc, #412]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 0207 	bic.w	r2, r3, #7
 80042ba:	4965      	ldr	r1, [pc, #404]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b63      	ldr	r3, [pc, #396]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0b8      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800430e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	494d      	ldr	r1, [pc, #308]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d040      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d115      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e073      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06b      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4936      	ldr	r1, [pc, #216]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fe fd4e 	bl	8002e20 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7fe fd4a 	bl	8002e20 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e053      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d210      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 0207 	bic.w	r2, r3, #7
 80043c6:	4922      	ldr	r1, [pc, #136]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4916      	ldr	r1, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f821 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	490a      	ldr	r1, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x1cc>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_ClockConfig+0x1d0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fe fbbc 	bl	8002bbc <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40022000 	.word	0x40022000
 8004454:	40021000 	.word	0x40021000
 8004458:	0800a22c 	.word	0x0800a22c
 800445c:	2000002c 	.word	0x2000002c
 8004460:	20000030 	.word	0x20000030

08004464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b490      	push	{r4, r7}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800446a:	4b2a      	ldr	r3, [pc, #168]	; (8004514 <HAL_RCC_GetSysClockFreq+0xb0>)
 800446c:	1d3c      	adds	r4, r7, #4
 800446e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004474:	f240 2301 	movw	r3, #513	; 0x201
 8004478:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800448e:	4b22      	ldr	r3, [pc, #136]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d002      	beq.n	80044a4 <HAL_RCC_GetSysClockFreq+0x40>
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d003      	beq.n	80044aa <HAL_RCC_GetSysClockFreq+0x46>
 80044a2:	e02d      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a6:	623b      	str	r3, [r7, #32]
      break;
 80044a8:	e02d      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	0c9b      	lsrs	r3, r3, #18
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044b6:	4413      	add	r3, r2
 80044b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	0c5b      	lsrs	r3, r3, #17
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044d6:	4413      	add	r3, r2
 80044d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4a0e      	ldr	r2, [pc, #56]	; (800451c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e2:	fb02 f203 	mul.w	r2, r2, r3
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
 80044ee:	e004      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044f4:	fb02 f303 	mul.w	r3, r2, r3
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	623b      	str	r3, [r7, #32]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004500:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004502:	623b      	str	r3, [r7, #32]
      break;
 8004504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004506:	6a3b      	ldr	r3, [r7, #32]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bc90      	pop	{r4, r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	0800a0e4 	.word	0x0800a0e4
 8004518:	40021000 	.word	0x40021000
 800451c:	007a1200 	.word	0x007a1200
 8004520:	003d0900 	.word	0x003d0900

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b02      	ldr	r3, [pc, #8]	; (8004534 <HAL_RCC_GetHCLKFreq+0x10>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	2000002c 	.word	0x2000002c

08004538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800453c:	f7ff fff2 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK1Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	0800a23c 	.word	0x0800a23c

08004560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004564:	f7ff ffde 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	0adb      	lsrs	r3, r3, #11
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	4903      	ldr	r1, [pc, #12]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	0800a23c 	.word	0x0800a23c

08004588 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	220f      	movs	r2, #15
 8004596:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCC_GetClockConfig+0x58>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 0203 	and.w	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <HAL_RCC_GetClockConfig+0x58>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <HAL_RCC_GetClockConfig+0x58>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <HAL_RCC_GetClockConfig+0x58>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_RCC_GetClockConfig+0x5c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0207 	and.w	r2, r3, #7
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40022000 	.word	0x40022000

080045e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <RCC_Delay+0x34>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <RCC_Delay+0x38>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0a5b      	lsrs	r3, r3, #9
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004604:	bf00      	nop
  }
  while (Delay --);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1e5a      	subs	r2, r3, #1
 800460a:	60fa      	str	r2, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f9      	bne.n	8004604 <RCC_Delay+0x1c>
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bc80      	pop	{r7}
 800461a:	4770      	bx	lr
 800461c:	2000002c 	.word	0x2000002c
 8004620:	10624dd3 	.word	0x10624dd3

08004624 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d07d      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004644:	4b4f      	ldr	r3, [pc, #316]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10d      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004650:	4b4c      	ldr	r3, [pc, #304]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	4a4b      	ldr	r2, [pc, #300]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465a:	61d3      	str	r3, [r2, #28]
 800465c:	4b49      	ldr	r3, [pc, #292]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004668:	2301      	movs	r3, #1
 800466a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	4b46      	ldr	r3, [pc, #280]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d118      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004678:	4b43      	ldr	r3, [pc, #268]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a42      	ldr	r2, [pc, #264]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800467e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004684:	f7fe fbcc 	bl	8002e20 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	e008      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468c:	f7fe fbc8 	bl	8002e20 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e06d      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	4b3a      	ldr	r3, [pc, #232]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046aa:	4b36      	ldr	r3, [pc, #216]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d02e      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d027      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c8:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d2:	4b2e      	ldr	r3, [pc, #184]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046de:	4a29      	ldr	r2, [pc, #164]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d014      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fe fb97 	bl	8002e20 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fe fb93 	bl	8002e20 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	; 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e036      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ee      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004718:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4917      	ldr	r1, [pc, #92]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	4313      	orrs	r3, r2
 8004728:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4a13      	ldr	r2, [pc, #76]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004748:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	490b      	ldr	r1, [pc, #44]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	4313      	orrs	r3, r2
 8004758:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4904      	ldr	r1, [pc, #16]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	40007000 	.word	0x40007000
 800478c:	42420440 	.word	0x42420440

08004790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e041      	b.n	8004826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fe f940 	bl	8002a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fc28 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e03a      	b.n	80048be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_TIM_Base_Start_IT+0x98>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00e      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x58>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d009      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x58>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a14      	ldr	r2, [pc, #80]	; (80048cc <HAL_TIM_Base_Start_IT+0x9c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x58>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d111      	bne.n	80048ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b06      	cmp	r3, #6
 8004898:	d010      	beq.n	80048bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	e007      	b.n	80048bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800

080048d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e041      	b.n	800496a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f839 	bl	8004972 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 fb86 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_TIM_PWM_Start+0x24>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e022      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d109      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x3e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	e015      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d109      	bne.n	80049dc <HAL_TIM_PWM_Start+0x58>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e008      	b.n	80049ee <HAL_TIM_PWM_Start+0x6a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e05e      	b.n	8004ab4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_PWM_Start+0x82>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	e013      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x92>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	e00b      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0xa2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a24:	e003      	b.n	8004a2e <HAL_TIM_PWM_Start+0xaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fd74 	bl	8005524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_TIM_PWM_Start+0x138>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d107      	bne.n	8004a56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_TIM_PWM_Start+0x138>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00e      	beq.n	8004a7e <HAL_TIM_PWM_Start+0xfa>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d009      	beq.n	8004a7e <HAL_TIM_PWM_Start+0xfa>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a14      	ldr	r2, [pc, #80]	; (8004ac0 <HAL_TIM_PWM_Start+0x13c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d004      	beq.n	8004a7e <HAL_TIM_PWM_Start+0xfa>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <HAL_TIM_PWM_Start+0x140>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d111      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d010      	beq.n	8004ab2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa0:	e007      	b.n	8004ab2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800

08004ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0202 	mvn.w	r2, #2
 8004af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa6f 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa62 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa71 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0204 	mvn.w	r2, #4
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa45 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa38 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa47 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0208 	mvn.w	r2, #8
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa1b 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa0e 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fa1d 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0210 	mvn.w	r2, #16
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9f1 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9e4 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f9f3 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0201 	mvn.w	r2, #1
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd fe2c 	bl	80028a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d10e      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d107      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fd32 	bl	80056dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9b7 	bl	8005012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0220 	mvn.w	r2, #32
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fcfd 	bl	80056ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0ac      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	f200 809f 	bhi.w	8004e40 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d3d 	.word	0x08004d3d
 8004d0c:	08004e41 	.word	0x08004e41
 8004d10:	08004e41 	.word	0x08004e41
 8004d14:	08004e41 	.word	0x08004e41
 8004d18:	08004d7d 	.word	0x08004d7d
 8004d1c:	08004e41 	.word	0x08004e41
 8004d20:	08004e41 	.word	0x08004e41
 8004d24:	08004e41 	.word	0x08004e41
 8004d28:	08004dbf 	.word	0x08004dbf
 8004d2c:	08004e41 	.word	0x08004e41
 8004d30:	08004e41 	.word	0x08004e41
 8004d34:	08004e41 	.word	0x08004e41
 8004d38:	08004dff 	.word	0x08004dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f9d0 	bl	80050e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	619a      	str	r2, [r3, #24]
      break;
 8004d7a:	e062      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa16 	bl	80051b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	619a      	str	r2, [r3, #24]
      break;
 8004dbc:	e041      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fa5f 	bl	8005288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0208 	orr.w	r2, r2, #8
 8004dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0204 	bic.w	r2, r2, #4
 8004de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69d9      	ldr	r1, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	61da      	str	r2, [r3, #28]
      break;
 8004dfc:	e021      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 faa9 	bl	800535c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	021a      	lsls	r2, r3, #8
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	61da      	str	r2, [r3, #28]
      break;
 8004e3e:	e000      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_ConfigClockSource+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e0b3      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x180>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea4:	d03e      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0xd0>
 8004ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eaa:	f200 8087 	bhi.w	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	f000 8085 	beq.w	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eba:	d87f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d01a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xa2>
 8004ec0:	2b70      	cmp	r3, #112	; 0x70
 8004ec2:	d87b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d050      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x116>
 8004ec8:	2b60      	cmp	r3, #96	; 0x60
 8004eca:	d877      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d03c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0xf6>
 8004ed0:	2b50      	cmp	r3, #80	; 0x50
 8004ed2:	d873      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d058      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x136>
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d86f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d064      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
 8004ee0:	2b30      	cmp	r3, #48	; 0x30
 8004ee2:	d86b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d060      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d867      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d05c      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d05a      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ef4:	e062      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f000 faee 	bl	80054e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	609a      	str	r2, [r3, #8]
      break;
 8004f22:	e04e      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6899      	ldr	r1, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f000 fad7 	bl	80054e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f46:	609a      	str	r2, [r3, #8]
      break;
 8004f48:	e03b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 fa4e 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2150      	movs	r1, #80	; 0x50
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 faa5 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f68:	e02b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f000 fa6c 	bl	8005454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2160      	movs	r1, #96	; 0x60
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fa95 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f88:	e01b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 fa2e 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fa85 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e00b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fa7c 	bl	80054b2 <TIM_ITRx_SetConfig>
        break;
 8004fba:	e002      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004fbc:	bf00      	nop
 8004fbe:	e000      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004fc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a29      	ldr	r2, [pc, #164]	; (80050dc <TIM_Base_SetConfig+0xb8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_Base_SetConfig+0x30>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d007      	beq.n	8005054 <TIM_Base_SetConfig+0x30>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <TIM_Base_SetConfig+0xbc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_Base_SetConfig+0x30>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <TIM_Base_SetConfig+0xc0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <TIM_Base_SetConfig+0xb8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_Base_SetConfig+0x62>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0x62>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <TIM_Base_SetConfig+0xbc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0x62>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <TIM_Base_SetConfig+0xc0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a07      	ldr	r2, [pc, #28]	; (80050dc <TIM_Base_SetConfig+0xb8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800

080050e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f023 0201 	bic.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 0302 	bic.w	r3, r3, #2
 8005130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <TIM_OC1_SetConfig+0xc8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d10c      	bne.n	800515e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0308 	bic.w	r3, r3, #8
 800514a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <TIM_OC1_SetConfig+0xc8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d111      	bne.n	800518a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800516c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00

080051b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0210 	bic.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0320 	bic.w	r3, r3, #32
 80051fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <TIM_OC2_SetConfig+0xd0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10d      	bne.n	8005230 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a14      	ldr	r2, [pc, #80]	; (8005284 <TIM_OC2_SetConfig+0xd0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d113      	bne.n	8005260 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	40012c00 	.word	0x40012c00

08005288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <TIM_OC3_SetConfig+0xd0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d10d      	bne.n	8005302 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <TIM_OC3_SetConfig+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d113      	bne.n	8005332 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00

0800535c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <TIM_OC4_SetConfig+0x98>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d109      	bne.n	80053d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00

080053f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800547e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	031b      	lsls	r3, r3, #12
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005490:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	621a      	str	r2, [r3, #32]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	021a      	lsls	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	431a      	orrs	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4313      	orrs	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	2201      	movs	r2, #1
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	43db      	mvns	r3, r3
 8005546:	401a      	ands	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	431a      	orrs	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005580:	2302      	movs	r3, #2
 8005582:	e046      	b.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d009      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a12      	ldr	r2, [pc, #72]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a10      	ldr	r2, [pc, #64]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d10c      	bne.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800

08005628 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005640:	2302      	movs	r3, #2
 8005642:	e03d      	b.n	80056c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e03f      	b.n	8005780 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fd f9fd 	bl	8002b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2224      	movs	r2, #36	; 0x24
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005730:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fcf2 	bl	800611c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005746:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005756:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005766:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d130      	bne.n	8005804 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_UART_Transmit_IT+0x26>
 80057a8:	88fb      	ldrh	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e029      	b.n	8005806 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_UART_Transmit_IT+0x38>
 80057bc:	2302      	movs	r3, #2
 80057be:	e022      	b.n	8005806 <HAL_UART_Transmit_IT+0x7e>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2221      	movs	r2, #33	; 0x21
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057fe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	e000      	b.n	8005806 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
  }
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4613      	mov	r3, r2
 800581c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b20      	cmp	r3, #32
 8005828:	d11d      	bne.n	8005866 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <HAL_UART_Receive_IT+0x26>
 8005830:	88fb      	ldrh	r3, [r7, #6]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e016      	b.n	8005868 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_UART_Receive_IT+0x38>
 8005844:	2302      	movs	r3, #2
 8005846:	e00f      	b.n	8005868 <HAL_UART_Receive_IT+0x58>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	461a      	mov	r2, r3
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fabb 	bl	8005dd8 <UART_Start_Receive_IT>
 8005862:	4603      	mov	r3, r0
 8005864:	e000      	b.n	8005868 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005866:	2302      	movs	r3, #2
  }
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005886:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695a      	ldr	r2, [r3, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	d107      	bne.n	80058b0 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0210 	bic.w	r2, r2, #16
 80058ae:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d02d      	beq.n	800591a <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695a      	ldr	r2, [r3, #20]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058cc:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d013      	beq.n	80058fe <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	4a19      	ldr	r2, [pc, #100]	; (8005940 <HAL_UART_AbortReceive_IT+0xd0>)
 80058dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fd ff0a 	bl	80036fc <HAL_DMA_Abort_IT>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d022      	beq.n	8005934 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058f8:	4610      	mov	r0, r2
 80058fa:	4798      	blx	r3
 80058fc:	e01a      	b.n	8005934 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f9c9 	bl	8005caa <HAL_UART_AbortReceiveCpltCallback>
 8005918:	e00c      	b.n	8005934 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f9bb 	bl	8005caa <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	08005ecb 	.word	0x08005ecb

08005944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_UART_IRQHandler+0x52>
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fb1a 	bl	8005fc8 <UART_Receive_IT>
      return;
 8005994:	e17b      	b.n	8005c8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80b1 	beq.w	8005b00 <HAL_UART_IRQHandler+0x1bc>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <HAL_UART_IRQHandler+0x70>
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80a6 	beq.w	8005b00 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_UART_IRQHandler+0x90>
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_UART_IRQHandler+0xb0>
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	f043 0202 	orr.w	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_UART_IRQHandler+0xd0>
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f043 0204 	orr.w	r2, r3, #4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00f      	beq.n	8005a3e <HAL_UART_IRQHandler+0xfa>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <HAL_UART_IRQHandler+0xee>
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0208 	orr.w	r2, r3, #8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 811e 	beq.w	8005c84 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_UART_IRQHandler+0x11e>
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fab3 	bl	8005fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <HAL_UART_IRQHandler+0x146>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d031      	beq.n	8005aee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9dd 	bl	8005e4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d023      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	4a76      	ldr	r2, [pc, #472]	; (8005c94 <HAL_UART_IRQHandler+0x350>)
 8005abc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fd fe1a 	bl	80036fc <HAL_DMA_Abort_IT>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d016      	beq.n	8005afc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	e00e      	b.n	8005afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8da 	bl	8005c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	e00a      	b.n	8005afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8d6 	bl	8005c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	e006      	b.n	8005afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8d2 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005afa:	e0c3      	b.n	8005c84 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	bf00      	nop
    return;
 8005afe:	e0c1      	b.n	8005c84 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 80a1 	bne.w	8005c4c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 809b 	beq.w	8005c4c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8095 	beq.w	8005c4c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d04e      	beq.n	8005be4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005b50:	8a3b      	ldrh	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8098 	beq.w	8005c88 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b5c:	8a3a      	ldrh	r2, [r7, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f080 8092 	bcs.w	8005c88 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8a3a      	ldrh	r2, [r7, #16]
 8005b68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d02b      	beq.n	8005bcc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b82:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0210 	bic.w	r2, r2, #16
 8005bc0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fd fd5e 	bl	8003688 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f86d 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005be2:	e051      	b.n	8005c88 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d047      	beq.n	8005c8c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005bfc:	8a7b      	ldrh	r3, [r7, #18]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d044      	beq.n	8005c8c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c10:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695a      	ldr	r2, [r3, #20]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0210 	bic.w	r2, r2, #16
 8005c3e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c40:	8a7b      	ldrh	r3, [r7, #18]
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f839 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c4a:	e01f      	b.n	8005c8c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <HAL_UART_IRQHandler+0x324>
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f94a 	bl	8005efa <UART_Transmit_IT>
    return;
 8005c66:	e012      	b.n	8005c8e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00d      	beq.n	8005c8e <HAL_UART_IRQHandler+0x34a>
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f98b 	bl	8005f98 <UART_EndTransmit_IT>
    return;
 8005c82:	e004      	b.n	8005c8e <HAL_UART_IRQHandler+0x34a>
    return;
 8005c84:	bf00      	nop
 8005c86:	e002      	b.n	8005c8e <HAL_UART_IRQHandler+0x34a>
      return;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <HAL_UART_IRQHandler+0x34a>
      return;
 8005c8c:	bf00      	nop
  }
}
 8005c8e:	3728      	adds	r7, #40	; 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	08005ea3 	.word	0x08005ea3

08005c98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bc80      	pop	{r7}
 8005ca8:	4770      	bx	lr

08005caa <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e020      	b.n	8005d2e <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 030c 	bic.w	r3, r3, #12
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f043 0308 	orr.w	r3, r3, #8
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e020      	b.n	8005d94 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2224      	movs	r2, #36	; 0x24
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f023 030c 	bic.w	r3, r3, #12
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f043 0304 	orr.w	r3, r3, #4
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	b2db      	uxtb	r3, r3
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	88fa      	ldrh	r2, [r7, #6]
 8005df6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2222      	movs	r2, #34	; 0x22
 8005e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e1c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0220 	orr.w	r2, r2, #32
 8005e3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e60:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0210 	bic.w	r2, r2, #16
 8005e88:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff feeb 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff fedc 	bl	8005caa <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b21      	cmp	r3, #33	; 0x21
 8005f0c:	d13e      	bne.n	8005f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f16:	d114      	bne.n	8005f42 <UART_Transmit_IT+0x48>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	621a      	str	r2, [r3, #32]
 8005f40:	e008      	b.n	8005f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6211      	str	r1, [r2, #32]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4619      	mov	r1, r3
 8005f62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7fb feb1 	bl	8001d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b22      	cmp	r3, #34	; 0x22
 8005fda:	f040 8099 	bne.w	8006110 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe6:	d117      	bne.n	8006018 <UART_Receive_IT+0x50>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d113      	bne.n	8006018 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	b29a      	uxth	r2, r3
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	629a      	str	r2, [r3, #40]	; 0x28
 8006016:	e026      	b.n	8006066 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800602a:	d007      	beq.n	800603c <UART_Receive_IT+0x74>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <UART_Receive_IT+0x82>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e008      	b.n	800605c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006056:	b2da      	uxtb	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	4619      	mov	r1, r3
 8006074:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006076:	2b00      	cmp	r3, #0
 8006078:	d148      	bne.n	800610c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0220 	bic.w	r2, r2, #32
 8006088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d123      	bne.n	8006102 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0210 	bic.w	r2, r2, #16
 80060ce:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d10a      	bne.n	80060f4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fdde 	bl	8005cbc <HAL_UARTEx_RxEventCallback>
 8006100:	e002      	b.n	8006108 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fb fe4a 	bl	8001d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	e002      	b.n	8006112 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006156:	f023 030c 	bic.w	r3, r3, #12
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	430b      	orrs	r3, r1
 8006162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <UART_SetConfig+0x114>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d103      	bne.n	800618c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006184:	f7fe f9ec 	bl	8004560 <HAL_RCC_GetPCLK2Freq>
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	e002      	b.n	8006192 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800618c:	f7fe f9d4 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8006190:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009a      	lsls	r2, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	4a22      	ldr	r2, [pc, #136]	; (8006234 <UART_SetConfig+0x118>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	0119      	lsls	r1, r3, #4
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	009a      	lsls	r2, r3, #2
 80061bc:	441a      	add	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <UART_SetConfig+0x118>)
 80061ca:	fba3 0302 	umull	r0, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2064      	movs	r0, #100	; 0x64
 80061d2:	fb00 f303 	mul.w	r3, r0, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	3332      	adds	r3, #50	; 0x32
 80061dc:	4a15      	ldr	r2, [pc, #84]	; (8006234 <UART_SetConfig+0x118>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061e8:	4419      	add	r1, r3
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009a      	lsls	r2, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <UART_SetConfig+0x118>)
 8006202:	fba3 0302 	umull	r0, r3, r3, r2
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2064      	movs	r0, #100	; 0x64
 800620a:	fb00 f303 	mul.w	r3, r0, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	3332      	adds	r3, #50	; 0x32
 8006214:	4a07      	ldr	r2, [pc, #28]	; (8006234 <UART_SetConfig+0x118>)
 8006216:	fba2 2303 	umull	r2, r3, r2, r3
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	f003 020f 	and.w	r2, r3, #15
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	440a      	add	r2, r1
 8006226:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40013800 	.word	0x40013800
 8006234:	51eb851f 	.word	0x51eb851f

08006238 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800623e:	f3ef 8305 	mrs	r3, IPSR
 8006242:	60bb      	str	r3, [r7, #8]
  return(result);
 8006244:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800624a:	f3ef 8310 	mrs	r3, PRIMASK
 800624e:	607b      	str	r3, [r7, #4]
  return(result);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <osKernelInitialize+0x32>
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <osKernelInitialize+0x60>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d109      	bne.n	8006272 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800625e:	f3ef 8311 	mrs	r3, BASEPRI
 8006262:	603b      	str	r3, [r7, #0]
  return(result);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800626a:	f06f 0305 	mvn.w	r3, #5
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e00c      	b.n	800628c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <osKernelInitialize+0x60>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <osKernelInitialize+0x60>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e002      	b.n	800628c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006286:	f04f 33ff 	mov.w	r3, #4294967295
 800628a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800628c:	68fb      	ldr	r3, [r7, #12]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr
 8006298:	20000184 	.word	0x20000184

0800629c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a2:	f3ef 8305 	mrs	r3, IPSR
 80062a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80062a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10f      	bne.n	80062ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ae:	f3ef 8310 	mrs	r3, PRIMASK
 80062b2:	607b      	str	r3, [r7, #4]
  return(result);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <osKernelStart+0x32>
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <osKernelStart+0x64>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d109      	bne.n	80062d6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062c2:	f3ef 8311 	mrs	r3, BASEPRI
 80062c6:	603b      	str	r3, [r7, #0]
  return(result);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80062ce:	f06f 0305 	mvn.w	r3, #5
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e00e      	b.n	80062f4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80062d6:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <osKernelStart+0x64>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d107      	bne.n	80062ee <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <osKernelStart+0x64>)
 80062e0:	2202      	movs	r2, #2
 80062e2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80062e4:	f001 fca4 	bl	8007c30 <vTaskStartScheduler>
      stat = osOK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e002      	b.n	80062f4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80062ee:	f04f 33ff 	mov.w	r3, #4294967295
 80062f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000184 	.word	0x20000184

08006304 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b092      	sub	sp, #72	; 0x48
 8006308:	af04      	add	r7, sp, #16
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006314:	f3ef 8305 	mrs	r3, IPSR
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 8094 	bne.w	800644a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006322:	f3ef 8310 	mrs	r3, PRIMASK
 8006326:	623b      	str	r3, [r7, #32]
  return(result);
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 808d 	bne.w	800644a <osThreadNew+0x146>
 8006330:	4b48      	ldr	r3, [pc, #288]	; (8006454 <osThreadNew+0x150>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d106      	bne.n	8006346 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006338:	f3ef 8311 	mrs	r3, BASEPRI
 800633c:	61fb      	str	r3, [r7, #28]
  return(result);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 8082 	bne.w	800644a <osThreadNew+0x146>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d07e      	beq.n	800644a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006350:	2318      	movs	r3, #24
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006354:	2300      	movs	r3, #0
 8006356:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006358:	f107 031b 	add.w	r3, r7, #27
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800635e:	f04f 33ff 	mov.w	r3, #4294967295
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d045      	beq.n	80063f6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <osThreadNew+0x74>
        name = attr->name;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <osThreadNew+0x9a>
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b38      	cmp	r3, #56	; 0x38
 8006390:	d805      	bhi.n	800639e <osThreadNew+0x9a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <osThreadNew+0x9e>
        return (NULL);
 800639e:	2300      	movs	r3, #0
 80063a0:	e054      	b.n	800644c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00e      	beq.n	80063d8 <osThreadNew+0xd4>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	2b5b      	cmp	r3, #91	; 0x5b
 80063c0:	d90a      	bls.n	80063d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d006      	beq.n	80063d8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <osThreadNew+0xd4>
        mem = 1;
 80063d2:	2301      	movs	r3, #1
 80063d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d6:	e010      	b.n	80063fa <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10c      	bne.n	80063fa <osThreadNew+0xf6>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d108      	bne.n	80063fa <osThreadNew+0xf6>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <osThreadNew+0xf6>
          mem = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f4:	e001      	b.n	80063fa <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d110      	bne.n	8006422 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006408:	9202      	str	r2, [sp, #8]
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006414:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f001 fa3e 	bl	8007898 <xTaskCreateStatic>
 800641c:	4603      	mov	r3, r0
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	e013      	b.n	800644a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	d110      	bne.n	800644a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	b29a      	uxth	r2, r3
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f001 fa88 	bl	8007950 <xTaskCreate>
 8006440:	4603      	mov	r3, r0
 8006442:	2b01      	cmp	r3, #1
 8006444:	d001      	beq.n	800644a <osThreadNew+0x146>
          hTask = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800644a:	697b      	ldr	r3, [r7, #20]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3738      	adds	r7, #56	; 0x38
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000184 	.word	0x20000184

08006458 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006460:	f3ef 8305 	mrs	r3, IPSR
 8006464:	613b      	str	r3, [r7, #16]
  return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10f      	bne.n	800648c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646c:	f3ef 8310 	mrs	r3, PRIMASK
 8006470:	60fb      	str	r3, [r7, #12]
  return(result);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <osDelay+0x34>
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <osDelay+0x58>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d109      	bne.n	8006494 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006480:	f3ef 8311 	mrs	r3, BASEPRI
 8006484:	60bb      	str	r3, [r7, #8]
  return(result);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <osDelay+0x3c>
    stat = osErrorISR;
 800648c:	f06f 0305 	mvn.w	r3, #5
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e007      	b.n	80064a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fb92 	bl	8007bc8 <vTaskDelay>
    }
  }

  return (stat);
 80064a4:	697b      	ldr	r3, [r7, #20]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000184 	.word	0x20000184

080064b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08c      	sub	sp, #48	; 0x30
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c4:	f3ef 8305 	mrs	r3, IPSR
 80064c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80064ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f040 8086 	bne.w	80065de <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d2:	f3ef 8310 	mrs	r3, PRIMASK
 80064d6:	617b      	str	r3, [r7, #20]
  return(result);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d17f      	bne.n	80065de <osSemaphoreNew+0x12a>
 80064de:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <osSemaphoreNew+0x134>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d105      	bne.n	80064f2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064e6:	f3ef 8311 	mrs	r3, BASEPRI
 80064ea:	613b      	str	r3, [r7, #16]
  return(result);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d175      	bne.n	80065de <osSemaphoreNew+0x12a>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d072      	beq.n	80065de <osSemaphoreNew+0x12a>
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d86e      	bhi.n	80065de <osSemaphoreNew+0x12a>
    mem = -1;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d015      	beq.n	8006538 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d006      	beq.n	8006522 <osSemaphoreNew+0x6e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b4f      	cmp	r3, #79	; 0x4f
 800651a:	d902      	bls.n	8006522 <osSemaphoreNew+0x6e>
        mem = 1;
 800651c:	2301      	movs	r3, #1
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	e00c      	b.n	800653c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d108      	bne.n	800653c <osSemaphoreNew+0x88>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <osSemaphoreNew+0x88>
          mem = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	623b      	str	r3, [r7, #32]
 8006536:	e001      	b.n	800653c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006542:	d04c      	beq.n	80065de <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d128      	bne.n	800659c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d10a      	bne.n	8006566 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2203      	movs	r2, #3
 8006556:	9200      	str	r2, [sp, #0]
 8006558:	2200      	movs	r2, #0
 800655a:	2100      	movs	r1, #0
 800655c:	2001      	movs	r0, #1
 800655e:	f000 fa87 	bl	8006a70 <xQueueGenericCreateStatic>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24
 8006564:	e005      	b.n	8006572 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006566:	2203      	movs	r2, #3
 8006568:	2100      	movs	r1, #0
 800656a:	2001      	movs	r0, #1
 800656c:	f000 faf7 	bl	8006b5e <xQueueGenericCreate>
 8006570:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	d022      	beq.n	80065be <osSemaphoreNew+0x10a>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01f      	beq.n	80065be <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800657e:	2300      	movs	r3, #0
 8006580:	2200      	movs	r2, #0
 8006582:	2100      	movs	r1, #0
 8006584:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006586:	f000 fbb5 	bl	8006cf4 <xQueueGenericSend>
 800658a:	4603      	mov	r3, r0
 800658c:	2b01      	cmp	r3, #1
 800658e:	d016      	beq.n	80065be <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006592:	f000 ffb1 	bl	80074f8 <vQueueDelete>
            hSemaphore = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
 800659a:	e010      	b.n	80065be <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d108      	bne.n	80065b4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	461a      	mov	r2, r3
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fb38 	bl	8006c20 <xQueueCreateCountingSemaphoreStatic>
 80065b0:	6278      	str	r0, [r7, #36]	; 0x24
 80065b2:	e004      	b.n	80065be <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fb69 	bl	8006c8e <xQueueCreateCountingSemaphore>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	e001      	b.n	80065d6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80065d6:	69f9      	ldr	r1, [r7, #28]
 80065d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065da:	f001 f8d7 	bl	800778c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3728      	adds	r7, #40	; 0x28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20000184 	.word	0x20000184

080065ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08c      	sub	sp, #48	; 0x30
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065fc:	f3ef 8305 	mrs	r3, IPSR
 8006600:	61bb      	str	r3, [r7, #24]
  return(result);
 8006602:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006604:	2b00      	cmp	r3, #0
 8006606:	d16f      	bne.n	80066e8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006608:	f3ef 8310 	mrs	r3, PRIMASK
 800660c:	617b      	str	r3, [r7, #20]
  return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d169      	bne.n	80066e8 <osMessageQueueNew+0xfc>
 8006614:	4b37      	ldr	r3, [pc, #220]	; (80066f4 <osMessageQueueNew+0x108>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d105      	bne.n	8006628 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800661c:	f3ef 8311 	mrs	r3, BASEPRI
 8006620:	613b      	str	r3, [r7, #16]
  return(result);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d15f      	bne.n	80066e8 <osMessageQueueNew+0xfc>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d05c      	beq.n	80066e8 <osMessageQueueNew+0xfc>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d059      	beq.n	80066e8 <osMessageQueueNew+0xfc>
    mem = -1;
 8006634:	f04f 33ff 	mov.w	r3, #4294967295
 8006638:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d029      	beq.n	8006694 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d012      	beq.n	800666e <osMessageQueueNew+0x82>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	2b4f      	cmp	r3, #79	; 0x4f
 800664e:	d90e      	bls.n	800666e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	695a      	ldr	r2, [r3, #20]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	429a      	cmp	r2, r3
 8006666:	d302      	bcc.n	800666e <osMessageQueueNew+0x82>
        mem = 1;
 8006668:	2301      	movs	r3, #1
 800666a:	623b      	str	r3, [r7, #32]
 800666c:	e014      	b.n	8006698 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d110      	bne.n	8006698 <osMessageQueueNew+0xac>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006682:	2b00      	cmp	r3, #0
 8006684:	d108      	bne.n	8006698 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <osMessageQueueNew+0xac>
          mem = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	e001      	b.n	8006698 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d10b      	bne.n	80066b6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2100      	movs	r1, #0
 80066a8:	9100      	str	r1, [sp, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f9df 	bl	8006a70 <xQueueGenericCreateStatic>
 80066b2:	6278      	str	r0, [r7, #36]	; 0x24
 80066b4:	e008      	b.n	80066c8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80066bc:	2200      	movs	r2, #0
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fa4c 	bl	8006b5e <xQueueGenericCreate>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00c      	beq.n	80066e8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <osMessageQueueNew+0xf0>
        name = attr->name;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e001      	b.n	80066e0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066e4:	f001 f852 	bl	800778c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3728      	adds	r7, #40	; 0x28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000184 	.word	0x20000184

080066f8 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	; 0x28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800670e:	f3ef 8305 	mrs	r3, IPSR
 8006712:	61fb      	str	r3, [r7, #28]
  return(result);
 8006714:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10f      	bne.n	800673a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671a:	f3ef 8310 	mrs	r3, PRIMASK
 800671e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <osMessageQueueGet+0x42>
 8006726:	4b2b      	ldr	r3, [pc, #172]	; (80067d4 <osMessageQueueGet+0xdc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d12e      	bne.n	800678c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800672e:	f3ef 8311 	mrs	r3, BASEPRI
 8006732:	617b      	str	r3, [r7, #20]
  return(result);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d028      	beq.n	800678c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <osMessageQueueGet+0x54>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <osMessageQueueGet+0x54>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800674c:	f06f 0303 	mvn.w	r3, #3
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006752:	e038      	b.n	80067c6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006758:	f107 0310 	add.w	r3, r7, #16
 800675c:	461a      	mov	r2, r3
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	6a38      	ldr	r0, [r7, #32]
 8006762:	f000 fe49 	bl	80073f8 <xQueueReceiveFromISR>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d003      	beq.n	8006774 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800676c:	f06f 0302 	mvn.w	r3, #2
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006772:	e028      	b.n	80067c6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d025      	beq.n	80067c6 <osMessageQueueGet+0xce>
 800677a:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <osMessageQueueGet+0xe0>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800678a:	e01c      	b.n	80067c6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <osMessageQueueGet+0xa0>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d103      	bne.n	80067a0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006798:	f06f 0303 	mvn.w	r3, #3
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
 800679e:	e013      	b.n	80067c8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	6a38      	ldr	r0, [r7, #32]
 80067a6:	f000 fc3b 	bl	8007020 <xQueueReceive>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d00b      	beq.n	80067c8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80067b6:	f06f 0301 	mvn.w	r3, #1
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
 80067bc:	e004      	b.n	80067c8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80067be:	f06f 0302 	mvn.w	r3, #2
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
 80067c4:	e000      	b.n	80067c8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3728      	adds	r7, #40	; 0x28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000184 	.word	0x20000184
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a06      	ldr	r2, [pc, #24]	; (8006804 <vApplicationGetIdleTaskMemory+0x28>)
 80067ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4a05      	ldr	r2, [pc, #20]	; (8006808 <vApplicationGetIdleTaskMemory+0x2c>)
 80067f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	601a      	str	r2, [r3, #0]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr
 8006804:	20000188 	.word	0x20000188
 8006808:	200001e4 	.word	0x200001e4

0800680c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4a07      	ldr	r2, [pc, #28]	; (8006838 <vApplicationGetTimerTaskMemory+0x2c>)
 800681c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4a06      	ldr	r2, [pc, #24]	; (800683c <vApplicationGetTimerTaskMemory+0x30>)
 8006822:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800682a:	601a      	str	r2, [r3, #0]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	200003e4 	.word	0x200003e4
 800683c:	20000440 	.word	0x20000440

08006840 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f103 0208 	add.w	r2, r3, #8
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f103 0208 	add.w	r2, r3, #8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f103 0208 	add.w	r2, r3, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr

0800687e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	601a      	str	r2, [r3, #0]
}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d103      	bne.n	80068fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e00c      	b.n	8006916 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3308      	adds	r3, #8
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e002      	b.n	800690a <vListInsert+0x2e>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	429a      	cmp	r2, r3
 8006914:	d2f6      	bcs.n	8006904 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]
}
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr

0800694c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6892      	ldr	r2, [r2, #8]
 8006962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6852      	ldr	r2, [r2, #4]
 800696c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d103      	bne.n	8006980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	1e5a      	subs	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr
	...

080069a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069ca:	f002 fd87 	bl	80094dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069da:	fb01 f303 	mul.w	r3, r1, r3
 80069de:	441a      	add	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	3b01      	subs	r3, #1
 80069fc:	68f9      	ldr	r1, [r7, #12]
 80069fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	22ff      	movs	r2, #255	; 0xff
 8006a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	22ff      	movs	r2, #255	; 0xff
 8006a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d114      	bne.n	8006a4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01a      	beq.n	8006a5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3310      	adds	r3, #16
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fb9b 	bl	8008168 <xTaskRemoveFromEventList>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d012      	beq.n	8006a5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a38:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <xQueueGenericReset+0xcc>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	e009      	b.n	8006a5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3310      	adds	r3, #16
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7ff fef6 	bl	8006840 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3324      	adds	r3, #36	; 0x24
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fef1 	bl	8006840 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a5e:	f002 fd6d 	bl	800953c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a62:	2301      	movs	r3, #1
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <xQueueGenericCreateStatic+0x52>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <xQueueGenericCreateStatic+0x56>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <xQueueGenericCreateStatic+0x58>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	623b      	str	r3, [r7, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <xQueueGenericCreateStatic+0x7e>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <xQueueGenericCreateStatic+0x82>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGenericCreateStatic+0x84>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61fb      	str	r3, [r7, #28]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b0e:	2350      	movs	r3, #80	; 0x50
 8006b10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b50      	cmp	r3, #80	; 0x50
 8006b16:	d00a      	beq.n	8006b2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	61bb      	str	r3, [r7, #24]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f843 	bl	8006bda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3730      	adds	r7, #48	; 0x30
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b08a      	sub	sp, #40	; 0x28
 8006b62:	af02      	add	r7, sp, #8
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	613b      	str	r3, [r7, #16]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	e004      	b.n	8006b9e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	fb02 f303 	mul.w	r3, r2, r3
 8006b9c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	3350      	adds	r3, #80	; 0x50
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f002 fd9a 	bl	80096dc <pvPortMalloc>
 8006ba8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00f      	beq.n	8006bd0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	3350      	adds	r3, #80	; 0x50
 8006bb4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bbe:	79fa      	ldrb	r2, [r7, #7]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f805 	bl	8006bda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
	}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e002      	b.n	8006bfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c08:	2101      	movs	r1, #1
 8006c0a:	69b8      	ldr	r0, [r7, #24]
 8006c0c:	f7ff fec8 	bl	80069a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	61bb      	str	r3, [r7, #24]
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d90a      	bls.n	8006c66 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	617b      	str	r3, [r7, #20]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c66:	2302      	movs	r3, #2
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2100      	movs	r1, #0
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fefd 	bl	8006a70 <xQueueGenericCreateStatic>
 8006c76:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c84:	69fb      	ldr	r3, [r7, #28]
	}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b086      	sub	sp, #24
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	613b      	str	r3, [r7, #16]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d90a      	bls.n	8006cd2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc0:	f383 8811 	msr	BASEPRI, r3
 8006cc4:	f3bf 8f6f 	isb	sy
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	60fb      	str	r3, [r7, #12]
}
 8006cce:	bf00      	nop
 8006cd0:	e7fe      	b.n	8006cd0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ff41 	bl	8006b5e <xQueueGenericCreate>
 8006cdc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006cea:	697b      	ldr	r3, [r7, #20]
	}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08e      	sub	sp, #56	; 0x38
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d02:	2300      	movs	r3, #0
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueGenericSend+0x32>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <xQueueGenericSend+0x40>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <xQueueGenericSend+0x44>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <xQueueGenericSend+0x46>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10a      	bne.n	8006d54 <xQueueGenericSend+0x60>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d103      	bne.n	8006d62 <xQueueGenericSend+0x6e>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <xQueueGenericSend+0x72>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueGenericSend+0x74>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	623b      	str	r3, [r7, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d82:	f001 fbb3 	bl	80084ec <xTaskGetSchedulerState>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <xQueueGenericSend+0x9e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <xQueueGenericSend+0xa2>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <xQueueGenericSend+0xa4>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	61fb      	str	r3, [r7, #28]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db2:	f002 fb93 	bl	80094dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d302      	bcc.n	8006dc8 <xQueueGenericSend+0xd4>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d129      	bne.n	8006e1c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dce:	f000 fbcd 	bl	800756c <prvCopyDataToQueue>
 8006dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	3324      	adds	r3, #36	; 0x24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 f9c1 	bl	8008168 <xTaskRemoveFromEventList>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d013      	beq.n	8006e14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dec:	4b3f      	ldr	r3, [pc, #252]	; (8006eec <xQueueGenericSend+0x1f8>)
 8006dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	e00a      	b.n	8006e14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e04:	4b39      	ldr	r3, [pc, #228]	; (8006eec <xQueueGenericSend+0x1f8>)
 8006e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e14:	f002 fb92 	bl	800953c <vPortExitCritical>
				return pdPASS;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e063      	b.n	8006ee4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e22:	f002 fb8b 	bl	800953c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e05c      	b.n	8006ee4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e30:	f107 0314 	add.w	r3, r7, #20
 8006e34:	4618      	mov	r0, r3
 8006e36:	f001 f9fb 	bl	8008230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e3e:	f002 fb7d 	bl	800953c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e42:	f000 ff5b 	bl	8007cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e46:	f002 fb49 	bl	80094dc <vPortEnterCritical>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d103      	bne.n	8006e60 <xQueueGenericSend+0x16c>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d103      	bne.n	8006e76 <xQueueGenericSend+0x182>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e76:	f002 fb61 	bl	800953c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e7a:	1d3a      	adds	r2, r7, #4
 8006e7c:	f107 0314 	add.w	r3, r7, #20
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 f9ea 	bl	800825c <xTaskCheckForTimeOut>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d124      	bne.n	8006ed8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e90:	f000 fc64 	bl	800775c <prvIsQueueFull>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d018      	beq.n	8006ecc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	3310      	adds	r3, #16
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f001 f910 	bl	80080c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eaa:	f000 fbef 	bl	800768c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eae:	f000 ff33 	bl	8007d18 <xTaskResumeAll>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f47f af7c 	bne.w	8006db2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006eba:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <xQueueGenericSend+0x1f8>)
 8006ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	e772      	b.n	8006db2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ece:	f000 fbdd 	bl	800768c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ed2:	f000 ff21 	bl	8007d18 <xTaskResumeAll>
 8006ed6:	e76c      	b.n	8006db2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eda:	f000 fbd7 	bl	800768c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ede:	f000 ff1b 	bl	8007d18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ee2:	2300      	movs	r3, #0
		}
	}
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3738      	adds	r7, #56	; 0x38
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	; 0x38
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f1a:	bf00      	nop
 8006f1c:	e7fe      	b.n	8006f1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d103      	bne.n	8006f2c <xQueueGenericSendFromISR+0x3c>
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <xQueueGenericSendFromISR+0x40>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <xQueueGenericSendFromISR+0x42>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	623b      	str	r3, [r7, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d103      	bne.n	8006f5a <xQueueGenericSendFromISR+0x6a>
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <xQueueGenericSendFromISR+0x6e>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <xQueueGenericSendFromISR+0x70>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	61fb      	str	r3, [r7, #28]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f7a:	f002 fb71 	bl	8009660 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	61ba      	str	r2, [r7, #24]
 8006f94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d302      	bcc.n	8006fac <xQueueGenericSendFromISR+0xbc>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d12c      	bne.n	8007006 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	68b9      	ldr	r1, [r7, #8]
 8006fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fbc:	f000 fad6 	bl	800756c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fc0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d112      	bne.n	8006ff0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d016      	beq.n	8007000 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	3324      	adds	r3, #36	; 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f8c6 	bl	8008168 <xTaskRemoveFromEventList>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e007      	b.n	8007000 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	b25a      	sxtb	r2, r3
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007000:	2301      	movs	r3, #1
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007004:	e001      	b.n	800700a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007014:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007018:	4618      	mov	r0, r3
 800701a:	3738      	adds	r7, #56	; 0x38
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08c      	sub	sp, #48	; 0x30
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800702c:	2300      	movs	r3, #0
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <xQueueReceive+0x30>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	623b      	str	r3, [r7, #32]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <xQueueReceive+0x3e>
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <xQueueReceive+0x42>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <xQueueReceive+0x44>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <xQueueReceive+0x5e>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	61fb      	str	r3, [r7, #28]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800707e:	f001 fa35 	bl	80084ec <xTaskGetSchedulerState>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <xQueueReceive+0x6e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <xQueueReceive+0x72>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueReceive+0x74>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <xQueueReceive+0x8e>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	61bb      	str	r3, [r7, #24]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ae:	f002 fa15 	bl	80094dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d01f      	beq.n	80070fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c2:	f000 fabd 	bl	8007640 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00f      	beq.n	80070f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	3310      	adds	r3, #16
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 f844 	bl	8008168 <xTaskRemoveFromEventList>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070e6:	4b3d      	ldr	r3, [pc, #244]	; (80071dc <xQueueReceive+0x1bc>)
 80070e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070f6:	f002 fa21 	bl	800953c <vPortExitCritical>
				return pdPASS;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e069      	b.n	80071d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007104:	f002 fa1a 	bl	800953c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007108:	2300      	movs	r3, #0
 800710a:	e062      	b.n	80071d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007112:	f107 0310 	add.w	r3, r7, #16
 8007116:	4618      	mov	r0, r3
 8007118:	f001 f88a 	bl	8008230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007120:	f002 fa0c 	bl	800953c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007124:	f000 fdea 	bl	8007cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007128:	f002 f9d8 	bl	80094dc <vPortEnterCritical>
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007132:	b25b      	sxtb	r3, r3
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d103      	bne.n	8007142 <xQueueReceive+0x122>
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007148:	b25b      	sxtb	r3, r3
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714e:	d103      	bne.n	8007158 <xQueueReceive+0x138>
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007158:	f002 f9f0 	bl	800953c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800715c:	1d3a      	adds	r2, r7, #4
 800715e:	f107 0310 	add.w	r3, r7, #16
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f001 f879 	bl	800825c <xTaskCheckForTimeOut>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d123      	bne.n	80071b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007172:	f000 fadd 	bl	8007730 <prvIsQueueEmpty>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d017      	beq.n	80071ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	3324      	adds	r3, #36	; 0x24
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	4611      	mov	r1, r2
 8007184:	4618      	mov	r0, r3
 8007186:	f000 ff9f 	bl	80080c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800718a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718c:	f000 fa7e 	bl	800768c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007190:	f000 fdc2 	bl	8007d18 <xTaskResumeAll>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d189      	bne.n	80070ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800719a:	4b10      	ldr	r3, [pc, #64]	; (80071dc <xQueueReceive+0x1bc>)
 800719c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	e780      	b.n	80070ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ae:	f000 fa6d 	bl	800768c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071b2:	f000 fdb1 	bl	8007d18 <xTaskResumeAll>
 80071b6:	e77a      	b.n	80070ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ba:	f000 fa67 	bl	800768c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071be:	f000 fdab 	bl	8007d18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c4:	f000 fab4 	bl	8007730 <prvIsQueueEmpty>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f43f af6f 	beq.w	80070ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3730      	adds	r7, #48	; 0x30
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08e      	sub	sp, #56	; 0x38
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	623b      	str	r3, [r7, #32]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	61fb      	str	r3, [r7, #28]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007230:	f001 f95c 	bl	80084ec <xTaskGetSchedulerState>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <xQueueSemaphoreTake+0x60>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <xQueueSemaphoreTake+0x64>
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <xQueueSemaphoreTake+0x66>
 8007244:	2300      	movs	r3, #0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	61bb      	str	r3, [r7, #24]
}
 800725c:	bf00      	nop
 800725e:	e7fe      	b.n	800725e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007260:	f002 f93c 	bl	80094dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	2b00      	cmp	r3, #0
 800726e:	d024      	beq.n	80072ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	1e5a      	subs	r2, r3, #1
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007280:	f001 fab4 	bl	80087ec <pvTaskIncrementMutexHeldCount>
 8007284:	4602      	mov	r2, r0
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00f      	beq.n	80072b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	3310      	adds	r3, #16
 8007296:	4618      	mov	r0, r3
 8007298:	f000 ff66 	bl	8008168 <xTaskRemoveFromEventList>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072a2:	4b54      	ldr	r3, [pc, #336]	; (80073f4 <xQueueSemaphoreTake+0x214>)
 80072a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072b2:	f002 f943 	bl	800953c <vPortExitCritical>
				return pdPASS;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e097      	b.n	80073ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d111      	bne.n	80072e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	617b      	str	r3, [r7, #20]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80072dc:	f002 f92e 	bl	800953c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072e0:	2300      	movs	r3, #0
 80072e2:	e082      	b.n	80073ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ea:	f107 030c 	add.w	r3, r7, #12
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 ff9e 	bl	8008230 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072f8:	f002 f920 	bl	800953c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072fc:	f000 fcfe 	bl	8007cfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007300:	f002 f8ec 	bl	80094dc <vPortEnterCritical>
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800730a:	b25b      	sxtb	r3, r3
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007310:	d103      	bne.n	800731a <xQueueSemaphoreTake+0x13a>
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007320:	b25b      	sxtb	r3, r3
 8007322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007326:	d103      	bne.n	8007330 <xQueueSemaphoreTake+0x150>
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007330:	f002 f904 	bl	800953c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007334:	463a      	mov	r2, r7
 8007336:	f107 030c 	add.w	r3, r7, #12
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f000 ff8d 	bl	800825c <xTaskCheckForTimeOut>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d132      	bne.n	80073ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800734a:	f000 f9f1 	bl	8007730 <prvIsQueueEmpty>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d026      	beq.n	80073a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d109      	bne.n	8007370 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800735c:	f002 f8be 	bl	80094dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	4618      	mov	r0, r3
 8007366:	f001 f8df 	bl	8008528 <xTaskPriorityInherit>
 800736a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800736c:	f002 f8e6 	bl	800953c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	3324      	adds	r3, #36	; 0x24
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	4611      	mov	r1, r2
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fea5 	bl	80080c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800737e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007380:	f000 f984 	bl	800768c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007384:	f000 fcc8 	bl	8007d18 <xTaskResumeAll>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	f47f af68 	bne.w	8007260 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007390:	4b18      	ldr	r3, [pc, #96]	; (80073f4 <xQueueSemaphoreTake+0x214>)
 8007392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	e75e      	b.n	8007260 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073a4:	f000 f972 	bl	800768c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073a8:	f000 fcb6 	bl	8007d18 <xTaskResumeAll>
 80073ac:	e758      	b.n	8007260 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073b0:	f000 f96c 	bl	800768c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073b4:	f000 fcb0 	bl	8007d18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ba:	f000 f9b9 	bl	8007730 <prvIsQueueEmpty>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f43f af4d 	beq.w	8007260 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80073cc:	f002 f886 	bl	80094dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d2:	f000 f8b4 	bl	800753e <prvGetDisinheritPriorityAfterTimeout>
 80073d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 f97e 	bl	80086e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80073e4:	f002 f8aa 	bl	800953c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3738      	adds	r7, #56	; 0x38
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08e      	sub	sp, #56	; 0x38
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	623b      	str	r3, [r7, #32]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <xQueueReceiveFromISR+0x3a>
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <xQueueReceiveFromISR+0x3e>
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <xQueueReceiveFromISR+0x40>
 8007436:	2300      	movs	r3, #0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	61fb      	str	r3, [r7, #28]
}
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007452:	f002 f905 	bl	8009660 <vPortValidateInterruptPriority>
	__asm volatile
 8007456:	f3ef 8211 	mrs	r2, BASEPRI
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	61ba      	str	r2, [r7, #24]
 800746c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800746e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d02f      	beq.n	80074de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800748c:	f000 f8d8 	bl	8007640 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	1e5a      	subs	r2, r3, #1
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a0:	d112      	bne.n	80074c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	3310      	adds	r3, #16
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fe5a 	bl	8008168 <xTaskRemoveFromEventList>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	e007      	b.n	80074d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074cc:	3301      	adds	r3, #1
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	b25a      	sxtb	r2, r3
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80074d8:	2301      	movs	r3, #1
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
 80074dc:	e001      	b.n	80074e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80074de:	2300      	movs	r3, #0
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f383 8811 	msr	BASEPRI, r3
}
 80074ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3738      	adds	r7, #56	; 0x38
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <vQueueDelete+0x28>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	60bb      	str	r3, [r7, #8]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 f95b 	bl	80077dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f002 f8e5 	bl	8009700 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800753e:	b480      	push	{r7}
 8007540:	b085      	sub	sp, #20
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d006      	beq.n	800755c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	e001      	b.n	8007560 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007560:	68fb      	ldr	r3, [r7, #12]
	}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr

0800756c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10d      	bne.n	80075a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d14d      	bne.n	800762e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	4618      	mov	r0, r3
 8007598:	f001 f834 	bl	8008604 <xTaskPriorityDisinherit>
 800759c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	e043      	b.n	800762e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d119      	bne.n	80075e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6898      	ldr	r0, [r3, #8]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b4:	461a      	mov	r2, r3
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	f002 f8ee 	bl	8009798 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	441a      	add	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d32b      	bcc.n	800762e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	609a      	str	r2, [r3, #8]
 80075de:	e026      	b.n	800762e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	68d8      	ldr	r0, [r3, #12]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	461a      	mov	r2, r3
 80075ea:	68b9      	ldr	r1, [r7, #8]
 80075ec:	f002 f8d4 	bl	8009798 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	425b      	negs	r3, r3
 80075fa:	441a      	add	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d207      	bcs.n	800761c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	425b      	negs	r3, r3
 8007616:	441a      	add	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b02      	cmp	r3, #2
 8007620:	d105      	bne.n	800762e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	3b01      	subs	r3, #1
 800762c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007636:	697b      	ldr	r3, [r7, #20]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d018      	beq.n	8007684 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	441a      	add	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d303      	bcc.n	8007674 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68d9      	ldr	r1, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767c:	461a      	mov	r2, r3
 800767e:	6838      	ldr	r0, [r7, #0]
 8007680:	f002 f88a 	bl	8009798 <memcpy>
	}
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007694:	f001 ff22 	bl	80094dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800769e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076a0:	e011      	b.n	80076c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d012      	beq.n	80076d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3324      	adds	r3, #36	; 0x24
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fd5a 	bl	8008168 <xTaskRemoveFromEventList>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076ba:	f000 fe31 	bl	8008320 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	dce9      	bgt.n	80076a2 <prvUnlockQueue+0x16>
 80076ce:	e000      	b.n	80076d2 <prvUnlockQueue+0x46>
					break;
 80076d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	22ff      	movs	r2, #255	; 0xff
 80076d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076da:	f001 ff2f 	bl	800953c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076de:	f001 fefd 	bl	80094dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ea:	e011      	b.n	8007710 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d012      	beq.n	800771a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3310      	adds	r3, #16
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fd35 	bl	8008168 <xTaskRemoveFromEventList>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007704:	f000 fe0c 	bl	8008320 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	3b01      	subs	r3, #1
 800770c:	b2db      	uxtb	r3, r3
 800770e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007714:	2b00      	cmp	r3, #0
 8007716:	dce9      	bgt.n	80076ec <prvUnlockQueue+0x60>
 8007718:	e000      	b.n	800771c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800771a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	22ff      	movs	r2, #255	; 0xff
 8007720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007724:	f001 ff0a 	bl	800953c <vPortExitCritical>
}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007738:	f001 fed0 	bl	80094dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007744:	2301      	movs	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	e001      	b.n	800774e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800774e:	f001 fef5 	bl	800953c <vPortExitCritical>

	return xReturn;
 8007752:	68fb      	ldr	r3, [r7, #12]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007764:	f001 feba 	bl	80094dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	429a      	cmp	r2, r3
 8007772:	d102      	bne.n	800777a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007774:	2301      	movs	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e001      	b.n	800777e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800777e:	f001 fedd 	bl	800953c <vPortExitCritical>

	return xReturn;
 8007782:	68fb      	ldr	r3, [r7, #12]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	e014      	b.n	80077c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800779c:	4a0e      	ldr	r2, [pc, #56]	; (80077d8 <vQueueAddToRegistry+0x4c>)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077a8:	490b      	ldr	r1, [pc, #44]	; (80077d8 <vQueueAddToRegistry+0x4c>)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077b2:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <vQueueAddToRegistry+0x4c>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	4413      	add	r3, r2
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077be:	e006      	b.n	80077ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3301      	adds	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b07      	cmp	r3, #7
 80077ca:	d9e7      	bls.n	800779c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr
 80077d8:	20001170 	.word	0x20001170

080077dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e016      	b.n	8007818 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80077ea:	4a10      	ldr	r2, [pc, #64]	; (800782c <vQueueUnregisterQueue+0x50>)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4413      	add	r3, r2
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d10b      	bne.n	8007812 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80077fa:	4a0c      	ldr	r2, [pc, #48]	; (800782c <vQueueUnregisterQueue+0x50>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2100      	movs	r1, #0
 8007800:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007804:	4a09      	ldr	r2, [pc, #36]	; (800782c <vQueueUnregisterQueue+0x50>)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	4413      	add	r3, r2
 800780c:	2200      	movs	r2, #0
 800780e:	605a      	str	r2, [r3, #4]
				break;
 8007810:	e006      	b.n	8007820 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3301      	adds	r3, #1
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b07      	cmp	r3, #7
 800781c:	d9e5      	bls.n	80077ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20001170 	.word	0x20001170

08007830 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007840:	f001 fe4c 	bl	80094dc <vPortEnterCritical>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800784a:	b25b      	sxtb	r3, r3
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d103      	bne.n	800785a <vQueueWaitForMessageRestricted+0x2a>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007860:	b25b      	sxtb	r3, r3
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007866:	d103      	bne.n	8007870 <vQueueWaitForMessageRestricted+0x40>
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007870:	f001 fe64 	bl	800953c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	2b00      	cmp	r3, #0
 800787a:	d106      	bne.n	800788a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fc43 	bl	8008110 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800788a:	6978      	ldr	r0, [r7, #20]
 800788c:	f7ff fefe 	bl	800768c <prvUnlockQueue>
	}
 8007890:	bf00      	nop
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08e      	sub	sp, #56	; 0x38
 800789c:	af04      	add	r7, sp, #16
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	623b      	str	r3, [r7, #32]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <xTaskCreateStatic+0x46>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	61fb      	str	r3, [r7, #28]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078de:	235c      	movs	r3, #92	; 0x5c
 80078e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	2b5c      	cmp	r3, #92	; 0x5c
 80078e6:	d00a      	beq.n	80078fe <xTaskCreateStatic+0x66>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	61bb      	str	r3, [r7, #24]
}
 80078fa:	bf00      	nop
 80078fc:	e7fe      	b.n	80078fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01e      	beq.n	8007942 <xTaskCreateStatic+0xaa>
 8007904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01b      	beq.n	8007942 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007912:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	2202      	movs	r2, #2
 8007918:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800791c:	2300      	movs	r3, #0
 800791e:	9303      	str	r3, [sp, #12]
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	9302      	str	r3, [sp, #8]
 8007924:	f107 0314 	add.w	r3, r7, #20
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f850 	bl	80079da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800793a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800793c:	f000 f8d4 	bl	8007ae8 <prvAddNewTaskToReadyList>
 8007940:	e001      	b.n	8007946 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007946:	697b      	ldr	r3, [r7, #20]
	}
 8007948:	4618      	mov	r0, r3
 800794a:	3728      	adds	r7, #40	; 0x28
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08c      	sub	sp, #48	; 0x30
 8007954:	af04      	add	r7, sp, #16
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	4613      	mov	r3, r2
 800795e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007960:	88fb      	ldrh	r3, [r7, #6]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4618      	mov	r0, r3
 8007966:	f001 feb9 	bl	80096dc <pvPortMalloc>
 800796a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007972:	205c      	movs	r0, #92	; 0x5c
 8007974:	f001 feb2 	bl	80096dc <pvPortMalloc>
 8007978:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
 8007986:	e005      	b.n	8007994 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007988:	6978      	ldr	r0, [r7, #20]
 800798a:	f001 feb9 	bl	8009700 <vPortFree>
 800798e:	e001      	b.n	8007994 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d017      	beq.n	80079ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	2300      	movs	r3, #0
 80079a6:	9303      	str	r3, [sp, #12]
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	9302      	str	r3, [sp, #8]
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68b9      	ldr	r1, [r7, #8]
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f80e 	bl	80079da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079be:	69f8      	ldr	r0, [r7, #28]
 80079c0:	f000 f892 	bl	8007ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079c4:	2301      	movs	r3, #1
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	e002      	b.n	80079d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079ca:	f04f 33ff 	mov.w	r3, #4294967295
 80079ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079d0:	69bb      	ldr	r3, [r7, #24]
	}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b088      	sub	sp, #32
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	461a      	mov	r2, r3
 80079f2:	21a5      	movs	r1, #165	; 0xa5
 80079f4:	f001 fede 	bl	80097b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a02:	3b01      	subs	r3, #1
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	617b      	str	r3, [r7, #20]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
 8007a36:	e012      	b.n	8007a5e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	7819      	ldrb	r1, [r3, #0]
 8007a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4413      	add	r3, r2
 8007a46:	3334      	adds	r3, #52	; 0x34
 8007a48:	460a      	mov	r2, r1
 8007a4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d006      	beq.n	8007a66 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	61fb      	str	r3, [r7, #28]
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	2b0f      	cmp	r3, #15
 8007a62:	d9e9      	bls.n	8007a38 <prvInitialiseNewTask+0x5e>
 8007a64:	e000      	b.n	8007a68 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007a66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	2b37      	cmp	r3, #55	; 0x37
 8007a74:	d901      	bls.n	8007a7a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a76:	2337      	movs	r3, #55	; 0x37
 8007a78:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	2200      	movs	r2, #0
 8007a8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fef4 	bl	800687e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	3318      	adds	r3, #24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe feef 	bl	800687e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	2200      	movs	r2, #0
 8007aba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	69b8      	ldr	r0, [r7, #24]
 8007aca:	f001 fc13 	bl	80092f4 <pxPortInitialiseStack>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ae0:	bf00      	nop
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007af0:	f001 fcf4 	bl	80094dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007af4:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <prvAddNewTaskToReadyList+0xc4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	4a2c      	ldr	r2, [pc, #176]	; (8007bac <prvAddNewTaskToReadyList+0xc4>)
 8007afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007afe:	4b2c      	ldr	r3, [pc, #176]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b06:	4a2a      	ldr	r2, [pc, #168]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b0c:	4b27      	ldr	r3, [pc, #156]	; (8007bac <prvAddNewTaskToReadyList+0xc4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d110      	bne.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b14:	f000 fc28 	bl	8008368 <prvInitialiseTaskLists>
 8007b18:	e00d      	b.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b1a:	4b26      	ldr	r3, [pc, #152]	; (8007bb4 <prvAddNewTaskToReadyList+0xcc>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d802      	bhi.n	8007b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b36:	4b20      	ldr	r3, [pc, #128]	; (8007bb8 <prvAddNewTaskToReadyList+0xd0>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <prvAddNewTaskToReadyList+0xd0>)
 8007b3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b40:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <prvAddNewTaskToReadyList+0xd0>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <prvAddNewTaskToReadyList+0xd4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d903      	bls.n	8007b5c <prvAddNewTaskToReadyList+0x74>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <prvAddNewTaskToReadyList+0xd4>)
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <prvAddNewTaskToReadyList+0xd8>)
 8007b6a:	441a      	add	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7fe fe8f 	bl	8006896 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b78:	f001 fce0 	bl	800953c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b7c:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <prvAddNewTaskToReadyList+0xcc>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00e      	beq.n	8007ba2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <prvAddNewTaskToReadyList+0xc8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d207      	bcs.n	8007ba2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <prvAddNewTaskToReadyList+0xdc>)
 8007b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000d14 	.word	0x20000d14
 8007bb0:	20000840 	.word	0x20000840
 8007bb4:	20000d20 	.word	0x20000d20
 8007bb8:	20000d30 	.word	0x20000d30
 8007bbc:	20000d1c 	.word	0x20000d1c
 8007bc0:	20000844 	.word	0x20000844
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <vTaskDelay+0x60>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <vTaskDelay+0x30>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60bb      	str	r3, [r7, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bf8:	f000 f880 	bl	8007cfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 ffbe 	bl	8008b80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c04:	f000 f888 	bl	8007d18 <xTaskResumeAll>
 8007c08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <vTaskDelay+0x64>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20000d3c 	.word	0x20000d3c
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	; 0x28
 8007c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c3e:	463a      	mov	r2, r7
 8007c40:	1d39      	adds	r1, r7, #4
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fdc8 	bl	80067dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	9202      	str	r2, [sp, #8]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	460a      	mov	r2, r1
 8007c5e:	4921      	ldr	r1, [pc, #132]	; (8007ce4 <vTaskStartScheduler+0xb4>)
 8007c60:	4821      	ldr	r0, [pc, #132]	; (8007ce8 <vTaskStartScheduler+0xb8>)
 8007c62:	f7ff fe19 	bl	8007898 <xTaskCreateStatic>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4a20      	ldr	r2, [pc, #128]	; (8007cec <vTaskStartScheduler+0xbc>)
 8007c6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c6c:	4b1f      	ldr	r3, [pc, #124]	; (8007cec <vTaskStartScheduler+0xbc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c74:	2301      	movs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e001      	b.n	8007c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d102      	bne.n	8007c8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c84:	f000 ffd0 	bl	8008c28 <xTimerCreateTimerTask>
 8007c88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d116      	bne.n	8007cbe <vTaskStartScheduler+0x8e>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	613b      	str	r3, [r7, #16]
}
 8007ca2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ca4:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <vTaskStartScheduler+0xc0>)
 8007ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8007caa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cac:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <vTaskStartScheduler+0xc4>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <vTaskStartScheduler+0xc8>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cb8:	f001 fb9e 	bl	80093f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cbc:	e00e      	b.n	8007cdc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc4:	d10a      	bne.n	8007cdc <vTaskStartScheduler+0xac>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <vTaskStartScheduler+0xaa>
}
 8007cdc:	bf00      	nop
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	0800a0f4 	.word	0x0800a0f4
 8007ce8:	08008339 	.word	0x08008339
 8007cec:	20000d38 	.word	0x20000d38
 8007cf0:	20000d34 	.word	0x20000d34
 8007cf4:	20000d20 	.word	0x20000d20
 8007cf8:	20000d18 	.word	0x20000d18

08007cfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <vTaskSuspendAll+0x18>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3301      	adds	r3, #1
 8007d06:	4a03      	ldr	r2, [pc, #12]	; (8007d14 <vTaskSuspendAll+0x18>)
 8007d08:	6013      	str	r3, [r2, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000d3c 	.word	0x20000d3c

08007d18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d26:	4b42      	ldr	r3, [pc, #264]	; (8007e30 <xTaskResumeAll+0x118>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10a      	bne.n	8007d44 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	603b      	str	r3, [r7, #0]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d44:	f001 fbca 	bl	80094dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d48:	4b39      	ldr	r3, [pc, #228]	; (8007e30 <xTaskResumeAll+0x118>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	4a38      	ldr	r2, [pc, #224]	; (8007e30 <xTaskResumeAll+0x118>)
 8007d50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d52:	4b37      	ldr	r3, [pc, #220]	; (8007e30 <xTaskResumeAll+0x118>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d162      	bne.n	8007e20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d5a:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <xTaskResumeAll+0x11c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d05e      	beq.n	8007e20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d62:	e02f      	b.n	8007dc4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d64:	4b34      	ldr	r3, [pc, #208]	; (8007e38 <xTaskResumeAll+0x120>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3318      	adds	r3, #24
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe fdeb 	bl	800694c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fde6 	bl	800694c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d84:	4b2d      	ldr	r3, [pc, #180]	; (8007e3c <xTaskResumeAll+0x124>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d903      	bls.n	8007d94 <xTaskResumeAll+0x7c>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <xTaskResumeAll+0x124>)
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4a27      	ldr	r2, [pc, #156]	; (8007e40 <xTaskResumeAll+0x128>)
 8007da2:	441a      	add	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4619      	mov	r1, r3
 8007daa:	4610      	mov	r0, r2
 8007dac:	f7fe fd73 	bl	8006896 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db4:	4b23      	ldr	r3, [pc, #140]	; (8007e44 <xTaskResumeAll+0x12c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007dbe:	4b22      	ldr	r3, [pc, #136]	; (8007e48 <xTaskResumeAll+0x130>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dc4:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <xTaskResumeAll+0x120>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1cb      	bne.n	8007d64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dd2:	f000 fb67 	bl	80084a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <xTaskResumeAll+0x134>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d010      	beq.n	8007e04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007de2:	f000 f857 	bl	8007e94 <xTaskIncrementTick>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007dec:	4b16      	ldr	r3, [pc, #88]	; (8007e48 <xTaskResumeAll+0x130>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1f1      	bne.n	8007de2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <xTaskResumeAll+0x134>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e04:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <xTaskResumeAll+0x130>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e10:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <xTaskResumeAll+0x138>)
 8007e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e20:	f001 fb8c 	bl	800953c <vPortExitCritical>

	return xAlreadyYielded;
 8007e24:	68bb      	ldr	r3, [r7, #8]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000d3c 	.word	0x20000d3c
 8007e34:	20000d14 	.word	0x20000d14
 8007e38:	20000cd4 	.word	0x20000cd4
 8007e3c:	20000d1c 	.word	0x20000d1c
 8007e40:	20000844 	.word	0x20000844
 8007e44:	20000840 	.word	0x20000840
 8007e48:	20000d28 	.word	0x20000d28
 8007e4c:	20000d24 	.word	0x20000d24
 8007e50:	e000ed04 	.word	0xe000ed04

08007e54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e5a:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <xTaskGetTickCount+0x18>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e60:	687b      	ldr	r3, [r7, #4]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	20000d18 	.word	0x20000d18

08007e70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e76:	f001 fbf3 	bl	8009660 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007e7e:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <xTaskGetTickCountFromISR+0x20>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e84:	683b      	ldr	r3, [r7, #0]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000d18 	.word	0x20000d18

08007e94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e9e:	4b51      	ldr	r3, [pc, #324]	; (8007fe4 <xTaskIncrementTick+0x150>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f040 808e 	bne.w	8007fc4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ea8:	4b4f      	ldr	r3, [pc, #316]	; (8007fe8 <xTaskIncrementTick+0x154>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007eb0:	4a4d      	ldr	r2, [pc, #308]	; (8007fe8 <xTaskIncrementTick+0x154>)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d120      	bne.n	8007efe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ebc:	4b4b      	ldr	r3, [pc, #300]	; (8007fec <xTaskIncrementTick+0x158>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <xTaskIncrementTick+0x48>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	603b      	str	r3, [r7, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <xTaskIncrementTick+0x46>
 8007edc:	4b43      	ldr	r3, [pc, #268]	; (8007fec <xTaskIncrementTick+0x158>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	4b43      	ldr	r3, [pc, #268]	; (8007ff0 <xTaskIncrementTick+0x15c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a41      	ldr	r2, [pc, #260]	; (8007fec <xTaskIncrementTick+0x158>)
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	4a41      	ldr	r2, [pc, #260]	; (8007ff0 <xTaskIncrementTick+0x15c>)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	4b40      	ldr	r3, [pc, #256]	; (8007ff4 <xTaskIncrementTick+0x160>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	4a3f      	ldr	r2, [pc, #252]	; (8007ff4 <xTaskIncrementTick+0x160>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	f000 fad3 	bl	80084a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007efe:	4b3e      	ldr	r3, [pc, #248]	; (8007ff8 <xTaskIncrementTick+0x164>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d34e      	bcc.n	8007fa6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f08:	4b38      	ldr	r3, [pc, #224]	; (8007fec <xTaskIncrementTick+0x158>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <xTaskIncrementTick+0x82>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e000      	b.n	8007f18 <xTaskIncrementTick+0x84>
 8007f16:	2300      	movs	r3, #0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f1c:	4b36      	ldr	r3, [pc, #216]	; (8007ff8 <xTaskIncrementTick+0x164>)
 8007f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f22:	601a      	str	r2, [r3, #0]
					break;
 8007f24:	e03f      	b.n	8007fa6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f26:	4b31      	ldr	r3, [pc, #196]	; (8007fec <xTaskIncrementTick+0x158>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d203      	bcs.n	8007f46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f3e:	4a2e      	ldr	r2, [pc, #184]	; (8007ff8 <xTaskIncrementTick+0x164>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6013      	str	r3, [r2, #0]
						break;
 8007f44:	e02f      	b.n	8007fa6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fcfe 	bl	800694c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe fcf5 	bl	800694c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f66:	4b25      	ldr	r3, [pc, #148]	; (8007ffc <xTaskIncrementTick+0x168>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d903      	bls.n	8007f76 <xTaskIncrementTick+0xe2>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	4a22      	ldr	r2, [pc, #136]	; (8007ffc <xTaskIncrementTick+0x168>)
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4a1f      	ldr	r2, [pc, #124]	; (8008000 <xTaskIncrementTick+0x16c>)
 8007f84:	441a      	add	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f7fe fc82 	bl	8006896 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f96:	4b1b      	ldr	r3, [pc, #108]	; (8008004 <xTaskIncrementTick+0x170>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d3b3      	bcc.n	8007f08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fa4:	e7b0      	b.n	8007f08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fa6:	4b17      	ldr	r3, [pc, #92]	; (8008004 <xTaskIncrementTick+0x170>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	4914      	ldr	r1, [pc, #80]	; (8008000 <xTaskIncrementTick+0x16c>)
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d907      	bls.n	8007fce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	e004      	b.n	8007fce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007fc4:	4b10      	ldr	r3, [pc, #64]	; (8008008 <xTaskIncrementTick+0x174>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	4a0f      	ldr	r2, [pc, #60]	; (8008008 <xTaskIncrementTick+0x174>)
 8007fcc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <xTaskIncrementTick+0x178>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007fda:	697b      	ldr	r3, [r7, #20]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20000d3c 	.word	0x20000d3c
 8007fe8:	20000d18 	.word	0x20000d18
 8007fec:	20000ccc 	.word	0x20000ccc
 8007ff0:	20000cd0 	.word	0x20000cd0
 8007ff4:	20000d2c 	.word	0x20000d2c
 8007ff8:	20000d34 	.word	0x20000d34
 8007ffc:	20000d1c 	.word	0x20000d1c
 8008000:	20000844 	.word	0x20000844
 8008004:	20000840 	.word	0x20000840
 8008008:	20000d24 	.word	0x20000d24
 800800c:	20000d28 	.word	0x20000d28

08008010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008016:	4b27      	ldr	r3, [pc, #156]	; (80080b4 <vTaskSwitchContext+0xa4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800801e:	4b26      	ldr	r3, [pc, #152]	; (80080b8 <vTaskSwitchContext+0xa8>)
 8008020:	2201      	movs	r2, #1
 8008022:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008024:	e041      	b.n	80080aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008026:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <vTaskSwitchContext+0xa8>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800802c:	4b23      	ldr	r3, [pc, #140]	; (80080bc <vTaskSwitchContext+0xac>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e010      	b.n	8008056 <vTaskSwitchContext+0x46>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <vTaskSwitchContext+0x40>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	607b      	str	r3, [r7, #4]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <vTaskSwitchContext+0x3e>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3b01      	subs	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	491a      	ldr	r1, [pc, #104]	; (80080c0 <vTaskSwitchContext+0xb0>)
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4613      	mov	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	440b      	add	r3, r1
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0e4      	beq.n	8008034 <vTaskSwitchContext+0x24>
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4613      	mov	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4a12      	ldr	r2, [pc, #72]	; (80080c0 <vTaskSwitchContext+0xb0>)
 8008076:	4413      	add	r3, r2
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	605a      	str	r2, [r3, #4]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	3308      	adds	r3, #8
 800808c:	429a      	cmp	r2, r3
 800808e:	d104      	bne.n	800809a <vTaskSwitchContext+0x8a>
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	4a08      	ldr	r2, [pc, #32]	; (80080c4 <vTaskSwitchContext+0xb4>)
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	4a05      	ldr	r2, [pc, #20]	; (80080bc <vTaskSwitchContext+0xac>)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6013      	str	r3, [r2, #0]
}
 80080aa:	bf00      	nop
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bc80      	pop	{r7}
 80080b2:	4770      	bx	lr
 80080b4:	20000d3c 	.word	0x20000d3c
 80080b8:	20000d28 	.word	0x20000d28
 80080bc:	20000d1c 	.word	0x20000d1c
 80080c0:	20000844 	.word	0x20000844
 80080c4:	20000840 	.word	0x20000840

080080c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	60fb      	str	r3, [r7, #12]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080ee:	4b07      	ldr	r3, [pc, #28]	; (800810c <vTaskPlaceOnEventList+0x44>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3318      	adds	r3, #24
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fe fbf0 	bl	80068dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080fc:	2101      	movs	r1, #1
 80080fe:	6838      	ldr	r0, [r7, #0]
 8008100:	f000 fd3e 	bl	8008b80 <prvAddCurrentTaskToDelayedList>
}
 8008104:	bf00      	nop
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20000840 	.word	0x20000840

08008110 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	617b      	str	r3, [r7, #20]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008138:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <vTaskPlaceOnEventListRestricted+0x54>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3318      	adds	r3, #24
 800813e:	4619      	mov	r1, r3
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7fe fba8 	bl	8006896 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295
 8008150:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	68b8      	ldr	r0, [r7, #8]
 8008156:	f000 fd13 	bl	8008b80 <prvAddCurrentTaskToDelayedList>
	}
 800815a:	bf00      	nop
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000840 	.word	0x20000840

08008168 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	60fb      	str	r3, [r7, #12]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	3318      	adds	r3, #24
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fbd7 	bl	800694c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800819e:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <xTaskRemoveFromEventList+0xb0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d11d      	bne.n	80081e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fbce 	bl	800694c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b4:	4b19      	ldr	r3, [pc, #100]	; (800821c <xTaskRemoveFromEventList+0xb4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d903      	bls.n	80081c4 <xTaskRemoveFromEventList+0x5c>
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	4a16      	ldr	r2, [pc, #88]	; (800821c <xTaskRemoveFromEventList+0xb4>)
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4a13      	ldr	r2, [pc, #76]	; (8008220 <xTaskRemoveFromEventList+0xb8>)
 80081d2:	441a      	add	r2, r3
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f7fe fb5b 	bl	8006896 <vListInsertEnd>
 80081e0:	e005      	b.n	80081ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	3318      	adds	r3, #24
 80081e6:	4619      	mov	r1, r3
 80081e8:	480e      	ldr	r0, [pc, #56]	; (8008224 <xTaskRemoveFromEventList+0xbc>)
 80081ea:	f7fe fb54 	bl	8006896 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f2:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <xTaskRemoveFromEventList+0xc0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d905      	bls.n	8008208 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <xTaskRemoveFromEventList+0xc4>)
 8008202:	2201      	movs	r2, #1
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e001      	b.n	800820c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800820c:	697b      	ldr	r3, [r7, #20]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000d3c 	.word	0x20000d3c
 800821c:	20000d1c 	.word	0x20000d1c
 8008220:	20000844 	.word	0x20000844
 8008224:	20000cd4 	.word	0x20000cd4
 8008228:	20000840 	.word	0x20000840
 800822c:	20000d28 	.word	0x20000d28

08008230 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008238:	4b06      	ldr	r3, [pc, #24]	; (8008254 <vTaskInternalSetTimeOutState+0x24>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <vTaskInternalSetTimeOutState+0x28>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	605a      	str	r2, [r3, #4]
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	bc80      	pop	{r7}
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20000d2c 	.word	0x20000d2c
 8008258:	20000d18 	.word	0x20000d18

0800825c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	613b      	str	r3, [r7, #16]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	60fb      	str	r3, [r7, #12]
}
 800829a:	bf00      	nop
 800829c:	e7fe      	b.n	800829c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800829e:	f001 f91d 	bl	80094dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082a2:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <xTaskCheckForTimeOut+0xbc>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d102      	bne.n	80082c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80082bc:	2300      	movs	r3, #0
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	e023      	b.n	800830a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b15      	ldr	r3, [pc, #84]	; (800831c <xTaskCheckForTimeOut+0xc0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d007      	beq.n	80082de <xTaskCheckForTimeOut+0x82>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d302      	bcc.n	80082de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	61fb      	str	r3, [r7, #28]
 80082dc:	e015      	b.n	800830a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d20b      	bcs.n	8008300 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	1ad2      	subs	r2, r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff ff9b 	bl	8008230 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61fb      	str	r3, [r7, #28]
 80082fe:	e004      	b.n	800830a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008306:	2301      	movs	r3, #1
 8008308:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800830a:	f001 f917 	bl	800953c <vPortExitCritical>

	return xReturn;
 800830e:	69fb      	ldr	r3, [r7, #28]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3720      	adds	r7, #32
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000d18 	.word	0x20000d18
 800831c:	20000d2c 	.word	0x20000d2c

08008320 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008320:	b480      	push	{r7}
 8008322:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008324:	4b03      	ldr	r3, [pc, #12]	; (8008334 <vTaskMissedYield+0x14>)
 8008326:	2201      	movs	r2, #1
 8008328:	601a      	str	r2, [r3, #0]
}
 800832a:	bf00      	nop
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20000d28 	.word	0x20000d28

08008338 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008340:	f000 f852 	bl	80083e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008344:	4b06      	ldr	r3, [pc, #24]	; (8008360 <prvIdleTask+0x28>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d9f9      	bls.n	8008340 <prvIdleTask+0x8>
			{
				taskYIELD();
 800834c:	4b05      	ldr	r3, [pc, #20]	; (8008364 <prvIdleTask+0x2c>)
 800834e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800835c:	e7f0      	b.n	8008340 <prvIdleTask+0x8>
 800835e:	bf00      	nop
 8008360:	20000844 	.word	0x20000844
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
 8008372:	e00c      	b.n	800838e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4a12      	ldr	r2, [pc, #72]	; (80083c8 <prvInitialiseTaskLists+0x60>)
 8008380:	4413      	add	r3, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fa5c 	bl	8006840 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3301      	adds	r3, #1
 800838c:	607b      	str	r3, [r7, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b37      	cmp	r3, #55	; 0x37
 8008392:	d9ef      	bls.n	8008374 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008394:	480d      	ldr	r0, [pc, #52]	; (80083cc <prvInitialiseTaskLists+0x64>)
 8008396:	f7fe fa53 	bl	8006840 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800839a:	480d      	ldr	r0, [pc, #52]	; (80083d0 <prvInitialiseTaskLists+0x68>)
 800839c:	f7fe fa50 	bl	8006840 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083a0:	480c      	ldr	r0, [pc, #48]	; (80083d4 <prvInitialiseTaskLists+0x6c>)
 80083a2:	f7fe fa4d 	bl	8006840 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083a6:	480c      	ldr	r0, [pc, #48]	; (80083d8 <prvInitialiseTaskLists+0x70>)
 80083a8:	f7fe fa4a 	bl	8006840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083ac:	480b      	ldr	r0, [pc, #44]	; (80083dc <prvInitialiseTaskLists+0x74>)
 80083ae:	f7fe fa47 	bl	8006840 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083b2:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <prvInitialiseTaskLists+0x78>)
 80083b4:	4a05      	ldr	r2, [pc, #20]	; (80083cc <prvInitialiseTaskLists+0x64>)
 80083b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <prvInitialiseTaskLists+0x7c>)
 80083ba:	4a05      	ldr	r2, [pc, #20]	; (80083d0 <prvInitialiseTaskLists+0x68>)
 80083bc:	601a      	str	r2, [r3, #0]
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20000844 	.word	0x20000844
 80083cc:	20000ca4 	.word	0x20000ca4
 80083d0:	20000cb8 	.word	0x20000cb8
 80083d4:	20000cd4 	.word	0x20000cd4
 80083d8:	20000ce8 	.word	0x20000ce8
 80083dc:	20000d00 	.word	0x20000d00
 80083e0:	20000ccc 	.word	0x20000ccc
 80083e4:	20000cd0 	.word	0x20000cd0

080083e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ee:	e019      	b.n	8008424 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083f0:	f001 f874 	bl	80094dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80083f4:	4b10      	ldr	r3, [pc, #64]	; (8008438 <prvCheckTasksWaitingTermination+0x50>)
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3304      	adds	r3, #4
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe faa3 	bl	800694c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008406:	4b0d      	ldr	r3, [pc, #52]	; (800843c <prvCheckTasksWaitingTermination+0x54>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3b01      	subs	r3, #1
 800840c:	4a0b      	ldr	r2, [pc, #44]	; (800843c <prvCheckTasksWaitingTermination+0x54>)
 800840e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008410:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <prvCheckTasksWaitingTermination+0x58>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3b01      	subs	r3, #1
 8008416:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <prvCheckTasksWaitingTermination+0x58>)
 8008418:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800841a:	f001 f88f 	bl	800953c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f810 	bl	8008444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008424:	4b06      	ldr	r3, [pc, #24]	; (8008440 <prvCheckTasksWaitingTermination+0x58>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e1      	bne.n	80083f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000ce8 	.word	0x20000ce8
 800843c:	20000d14 	.word	0x20000d14
 8008440:	20000cfc 	.word	0x20000cfc

08008444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008452:	2b00      	cmp	r3, #0
 8008454:	d108      	bne.n	8008468 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	4618      	mov	r0, r3
 800845c:	f001 f950 	bl	8009700 <vPortFree>
				vPortFree( pxTCB );
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f94d 	bl	8009700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008466:	e018      	b.n	800849a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800846e:	2b01      	cmp	r3, #1
 8008470:	d103      	bne.n	800847a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f001 f944 	bl	8009700 <vPortFree>
	}
 8008478:	e00f      	b.n	800849a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008480:	2b02      	cmp	r3, #2
 8008482:	d00a      	beq.n	800849a <prvDeleteTCB+0x56>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	60fb      	str	r3, [r7, #12]
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <prvDeleteTCB+0x54>
	}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084aa:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <prvResetNextTaskUnblockTime+0x40>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <prvResetNextTaskUnblockTime+0x14>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <prvResetNextTaskUnblockTime+0x16>
 80084b8:	2300      	movs	r3, #0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084be:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <prvResetNextTaskUnblockTime+0x44>)
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295
 80084c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084c6:	e008      	b.n	80084da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80084c8:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <prvResetNextTaskUnblockTime+0x40>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	4a04      	ldr	r2, [pc, #16]	; (80084e8 <prvResetNextTaskUnblockTime+0x44>)
 80084d8:	6013      	str	r3, [r2, #0]
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr
 80084e4:	20000ccc 	.word	0x20000ccc
 80084e8:	20000d34 	.word	0x20000d34

080084ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084f2:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <xTaskGetSchedulerState+0x34>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d102      	bne.n	8008500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084fa:	2301      	movs	r3, #1
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	e008      	b.n	8008512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008500:	4b08      	ldr	r3, [pc, #32]	; (8008524 <xTaskGetSchedulerState+0x38>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d102      	bne.n	800850e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008508:	2302      	movs	r3, #2
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	e001      	b.n	8008512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008512:	687b      	ldr	r3, [r7, #4]
	}
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	bc80      	pop	{r7}
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000d20 	.word	0x20000d20
 8008524:	20000d3c 	.word	0x20000d3c

08008528 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d056      	beq.n	80085ec <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008542:	4b2d      	ldr	r3, [pc, #180]	; (80085f8 <xTaskPriorityInherit+0xd0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	429a      	cmp	r2, r3
 800854a:	d246      	bcs.n	80085da <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	db06      	blt.n	8008562 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008554:	4b28      	ldr	r3, [pc, #160]	; (80085f8 <xTaskPriorityInherit+0xd0>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6959      	ldr	r1, [r3, #20]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4a22      	ldr	r2, [pc, #136]	; (80085fc <xTaskPriorityInherit+0xd4>)
 8008574:	4413      	add	r3, r2
 8008576:	4299      	cmp	r1, r3
 8008578:	d101      	bne.n	800857e <xTaskPriorityInherit+0x56>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <xTaskPriorityInherit+0x58>
 800857e:	2300      	movs	r3, #0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d022      	beq.n	80085ca <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	3304      	adds	r3, #4
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe f9df 	bl	800694c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800858e:	4b1a      	ldr	r3, [pc, #104]	; (80085f8 <xTaskPriorityInherit+0xd0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	4b18      	ldr	r3, [pc, #96]	; (8008600 <xTaskPriorityInherit+0xd8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d903      	bls.n	80085ac <xTaskPriorityInherit+0x84>
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	4a15      	ldr	r2, [pc, #84]	; (8008600 <xTaskPriorityInherit+0xd8>)
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4a10      	ldr	r2, [pc, #64]	; (80085fc <xTaskPriorityInherit+0xd4>)
 80085ba:	441a      	add	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	3304      	adds	r3, #4
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f7fe f967 	bl	8006896 <vListInsertEnd>
 80085c8:	e004      	b.n	80085d4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <xTaskPriorityInherit+0xd0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e008      	b.n	80085ec <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085de:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <xTaskPriorityInherit+0xd0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d201      	bcs.n	80085ec <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085e8:	2301      	movs	r3, #1
 80085ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085ec:	68fb      	ldr	r3, [r7, #12]
	}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20000840 	.word	0x20000840
 80085fc:	20000844 	.word	0x20000844
 8008600:	20000d1c 	.word	0x20000d1c

08008604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d056      	beq.n	80086c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800861a:	4b2e      	ldr	r3, [pc, #184]	; (80086d4 <xTaskPriorityDisinherit+0xd0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	429a      	cmp	r2, r3
 8008622:	d00a      	beq.n	800863a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60bb      	str	r3, [r7, #8]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866a:	429a      	cmp	r2, r3
 800866c:	d02c      	beq.n	80086c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008672:	2b00      	cmp	r3, #0
 8008674:	d128      	bne.n	80086c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3304      	adds	r3, #4
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe f966 	bl	800694c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <xTaskPriorityDisinherit+0xd4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d903      	bls.n	80086a8 <xTaskPriorityDisinherit+0xa4>
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	4a0c      	ldr	r2, [pc, #48]	; (80086d8 <xTaskPriorityDisinherit+0xd4>)
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4a09      	ldr	r2, [pc, #36]	; (80086dc <xTaskPriorityDisinherit+0xd8>)
 80086b6:	441a      	add	r2, r3
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f7fe f8e9 	bl	8006896 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086c4:	2301      	movs	r3, #1
 80086c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086c8:	697b      	ldr	r3, [r7, #20]
	}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000840 	.word	0x20000840
 80086d8:	20000d1c 	.word	0x20000d1c
 80086dc:	20000844 	.word	0x20000844

080086e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086ee:	2301      	movs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d06f      	beq.n	80087d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60fb      	str	r3, [r7, #12]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d902      	bls.n	8008726 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	61fb      	str	r3, [r7, #28]
 8008724:	e002      	b.n	800872c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	69fa      	ldr	r2, [r7, #28]
 8008732:	429a      	cmp	r2, r3
 8008734:	d050      	beq.n	80087d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873a:	697a      	ldr	r2, [r7, #20]
 800873c:	429a      	cmp	r2, r3
 800873e:	d14b      	bne.n	80087d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008740:	4b27      	ldr	r3, [pc, #156]	; (80087e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	429a      	cmp	r2, r3
 8008748:	d10a      	bne.n	8008760 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	60bb      	str	r3, [r7, #8]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	db04      	blt.n	800877e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	6959      	ldr	r1, [r3, #20]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800878e:	4413      	add	r3, r2
 8008790:	4299      	cmp	r1, r3
 8008792:	d101      	bne.n	8008798 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008798:	2300      	movs	r3, #0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d01c      	beq.n	80087d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe f8d2 	bl	800694c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d903      	bls.n	80087bc <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	4a0b      	ldr	r2, [pc, #44]	; (80087e8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4a06      	ldr	r2, [pc, #24]	; (80087e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80087ca:	441a      	add	r2, r3
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f7fe f85f 	bl	8006896 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087d8:	bf00      	nop
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20000840 	.word	0x20000840
 80087e4:	20000844 	.word	0x20000844
 80087e8:	20000d1c 	.word	0x20000d1c

080087ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087f0:	4b07      	ldr	r3, [pc, #28]	; (8008810 <pvTaskIncrementMutexHeldCount+0x24>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d004      	beq.n	8008802 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80087f8:	4b05      	ldr	r3, [pc, #20]	; (8008810 <pvTaskIncrementMutexHeldCount+0x24>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087fe:	3201      	adds	r2, #1
 8008800:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008802:	4b03      	ldr	r3, [pc, #12]	; (8008810 <pvTaskIncrementMutexHeldCount+0x24>)
 8008804:	681b      	ldr	r3, [r3, #0]
	}
 8008806:	4618      	mov	r0, r3
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000840 	.word	0x20000840

08008814 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800881e:	f000 fe5d 	bl	80094dc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008822:	4b1e      	ldr	r3, [pc, #120]	; (800889c <ulTaskNotifyTake+0x88>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008828:	2b00      	cmp	r3, #0
 800882a:	d113      	bne.n	8008854 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800882c:	4b1b      	ldr	r3, [pc, #108]	; (800889c <ulTaskNotifyTake+0x88>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800883c:	2101      	movs	r1, #1
 800883e:	6838      	ldr	r0, [r7, #0]
 8008840:	f000 f99e 	bl	8008b80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008844:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <ulTaskNotifyTake+0x8c>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008854:	f000 fe72 	bl	800953c <vPortExitCritical>

		taskENTER_CRITICAL();
 8008858:	f000 fe40 	bl	80094dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800885c:	4b0f      	ldr	r3, [pc, #60]	; (800889c <ulTaskNotifyTake+0x88>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008862:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00c      	beq.n	8008884 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <ulTaskNotifyTake+0x88>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2200      	movs	r2, #0
 8008876:	655a      	str	r2, [r3, #84]	; 0x54
 8008878:	e004      	b.n	8008884 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800887a:	4b08      	ldr	r3, [pc, #32]	; (800889c <ulTaskNotifyTake+0x88>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	3a01      	subs	r2, #1
 8008882:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <ulTaskNotifyTake+0x88>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800888e:	f000 fe55 	bl	800953c <vPortExitCritical>

		return ulReturn;
 8008892:	68fb      	ldr	r3, [r7, #12]
	}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20000840 	.word	0x20000840
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b08a      	sub	sp, #40	; 0x28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	4613      	mov	r3, r2
 80088b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80088b4:	2301      	movs	r3, #1
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <xTaskGenericNotify+0x30>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	61bb      	str	r3, [r7, #24]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80088d8:	f000 fe00 	bl	80094dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80088f0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	2202      	movs	r2, #2
 80088f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d828      	bhi.n	8008952 <xTaskGenericNotify+0xae>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <xTaskGenericNotify+0x64>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008953 	.word	0x08008953
 800890c:	0800891d 	.word	0x0800891d
 8008910:	0800892b 	.word	0x0800892b
 8008914:	08008937 	.word	0x08008937
 8008918:	0800893f 	.word	0x0800893f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	431a      	orrs	r2, r3
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008928:	e013      	b.n	8008952 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008934:	e00d      	b.n	8008952 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800893c:	e009      	b.n	8008952 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800893e:	7ffb      	ldrb	r3, [r7, #31]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d003      	beq.n	800894c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800894a:	e001      	b.n	8008950 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800894c:	2300      	movs	r3, #0
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008950:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008952:	7ffb      	ldrb	r3, [r7, #31]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d13a      	bne.n	80089ce <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	3304      	adds	r3, #4
 800895c:	4618      	mov	r0, r3
 800895e:	f7fd fff5 	bl	800694c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008966:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <xTaskGenericNotify+0x138>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d903      	bls.n	8008976 <xTaskGenericNotify+0xd2>
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	4a1a      	ldr	r2, [pc, #104]	; (80089dc <xTaskGenericNotify+0x138>)
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897a:	4613      	mov	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4413      	add	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4a17      	ldr	r2, [pc, #92]	; (80089e0 <xTaskGenericNotify+0x13c>)
 8008984:	441a      	add	r2, r3
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	3304      	adds	r3, #4
 800898a:	4619      	mov	r1, r3
 800898c:	4610      	mov	r0, r2
 800898e:	f7fd ff82 	bl	8006896 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <xTaskGenericNotify+0x10c>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	617b      	str	r3, [r7, #20]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <xTaskGenericNotify+0x140>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d907      	bls.n	80089ce <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80089be:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <xTaskGenericNotify+0x144>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80089ce:	f000 fdb5 	bl	800953c <vPortExitCritical>

		return xReturn;
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3728      	adds	r7, #40	; 0x28
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000d1c 	.word	0x20000d1c
 80089e0:	20000844 	.word	0x20000844
 80089e4:	20000840 	.word	0x20000840
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08e      	sub	sp, #56	; 0x38
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	4613      	mov	r3, r2
 80089fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80089fc:	2301      	movs	r3, #1
 80089fe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10a      	bne.n	8008a1c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a1c:	f000 fe20 	bl	8009660 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008a24:	f3ef 8211 	mrs	r2, BASEPRI
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	623a      	str	r2, [r7, #32]
 8008a3a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008a3c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008a60:	79fb      	ldrb	r3, [r7, #7]
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d828      	bhi.n	8008ab8 <xTaskGenericNotifyFromISR+0xcc>
 8008a66:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <xTaskGenericNotifyFromISR+0x80>)
 8008a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6c:	08008ab9 	.word	0x08008ab9
 8008a70:	08008a81 	.word	0x08008a81
 8008a74:	08008a8f 	.word	0x08008a8f
 8008a78:	08008a9b 	.word	0x08008a9b
 8008a7c:	08008aa3 	.word	0x08008aa3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008a8c:	e014      	b.n	8008ab8 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008a98:	e00e      	b.n	8008ab8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008aa0:	e00a      	b.n	8008ab8 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d003      	beq.n	8008ab2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008ab0:	e001      	b.n	8008ab6 <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008ab6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d147      	bne.n	8008b50 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00a      	beq.n	8008ade <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	61bb      	str	r3, [r7, #24]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ade:	4b22      	ldr	r3, [pc, #136]	; (8008b68 <xTaskGenericNotifyFromISR+0x17c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d11d      	bne.n	8008b22 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fd ff2e 	bl	800694c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <xTaskGenericNotifyFromISR+0x180>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d903      	bls.n	8008b04 <xTaskGenericNotifyFromISR+0x118>
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	4a1a      	ldr	r2, [pc, #104]	; (8008b6c <xTaskGenericNotifyFromISR+0x180>)
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4a17      	ldr	r2, [pc, #92]	; (8008b70 <xTaskGenericNotifyFromISR+0x184>)
 8008b12:	441a      	add	r2, r3
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f7fd febb 	bl	8006896 <vListInsertEnd>
 8008b20:	e005      	b.n	8008b2e <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	3318      	adds	r3, #24
 8008b26:	4619      	mov	r1, r3
 8008b28:	4812      	ldr	r0, [pc, #72]	; (8008b74 <xTaskGenericNotifyFromISR+0x188>)
 8008b2a:	f7fd feb4 	bl	8006896 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b32:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <xTaskGenericNotifyFromISR+0x18c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d909      	bls.n	8008b50 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b44:	2201      	movs	r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	e002      	b.n	8008b50 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008b4a:	4b0c      	ldr	r3, [pc, #48]	; (8008b7c <xTaskGenericNotifyFromISR+0x190>)
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f383 8811 	msr	BASEPRI, r3
}
 8008b5a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3738      	adds	r7, #56	; 0x38
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000d3c 	.word	0x20000d3c
 8008b6c:	20000d1c 	.word	0x20000d1c
 8008b70:	20000844 	.word	0x20000844
 8008b74:	20000cd4 	.word	0x20000cd4
 8008b78:	20000840 	.word	0x20000840
 8008b7c:	20000d28 	.word	0x20000d28

08008b80 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b8a:	4b21      	ldr	r3, [pc, #132]	; (8008c10 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b90:	4b20      	ldr	r3, [pc, #128]	; (8008c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3304      	adds	r3, #4
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fd fed8 	bl	800694c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba2:	d10a      	bne.n	8008bba <prvAddCurrentTaskToDelayedList+0x3a>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008baa:	4b1a      	ldr	r3, [pc, #104]	; (8008c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4819      	ldr	r0, [pc, #100]	; (8008c18 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bb4:	f7fd fe6f 	bl	8006896 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bb8:	e026      	b.n	8008c08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bc2:	4b14      	ldr	r3, [pc, #80]	; (8008c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d209      	bcs.n	8008be6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7fd fe7c 	bl	80068dc <vListInsert>
}
 8008be4:	e010      	b.n	8008c08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fd fe72 	bl	80068dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d202      	bcs.n	8008c08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c02:	4a08      	ldr	r2, [pc, #32]	; (8008c24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	6013      	str	r3, [r2, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000d18 	.word	0x20000d18
 8008c14:	20000840 	.word	0x20000840
 8008c18:	20000d00 	.word	0x20000d00
 8008c1c:	20000cd0 	.word	0x20000cd0
 8008c20:	20000ccc 	.word	0x20000ccc
 8008c24:	20000d34 	.word	0x20000d34

08008c28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c32:	f000 fb1f 	bl	8009274 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c36:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <xTimerCreateTimerTask+0x80>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d021      	beq.n	8008c82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c46:	1d3a      	adds	r2, r7, #4
 8008c48:	f107 0108 	add.w	r1, r7, #8
 8008c4c:	f107 030c 	add.w	r3, r7, #12
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fd fddb 	bl	800680c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	9202      	str	r2, [sp, #8]
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	2302      	movs	r3, #2
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	2300      	movs	r3, #0
 8008c66:	460a      	mov	r2, r1
 8008c68:	4910      	ldr	r1, [pc, #64]	; (8008cac <xTimerCreateTimerTask+0x84>)
 8008c6a:	4811      	ldr	r0, [pc, #68]	; (8008cb0 <xTimerCreateTimerTask+0x88>)
 8008c6c:	f7fe fe14 	bl	8007898 <xTaskCreateStatic>
 8008c70:	4603      	mov	r3, r0
 8008c72:	4a10      	ldr	r2, [pc, #64]	; (8008cb4 <xTimerCreateTimerTask+0x8c>)
 8008c74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c76:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <xTimerCreateTimerTask+0x8c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d001      	beq.n	8008c82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10a      	bne.n	8008c9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	613b      	str	r3, [r7, #16]
}
 8008c9a:	bf00      	nop
 8008c9c:	e7fe      	b.n	8008c9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c9e:	697b      	ldr	r3, [r7, #20]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20000d70 	.word	0x20000d70
 8008cac:	0800a0fc 	.word	0x0800a0fc
 8008cb0:	08008e7d 	.word	0x08008e7d
 8008cb4:	20000d74 	.word	0x20000d74

08008cb8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008cc6:	2030      	movs	r0, #48	; 0x30
 8008cc8:	f000 fd08 	bl	80096dc <pvPortMalloc>
 8008ccc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00d      	beq.n	8008cf0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 f809 	bl	8008cfa <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008cf0:	697b      	ldr	r3, [r7, #20]
	}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b086      	sub	sp, #24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
 8008d06:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10a      	bne.n	8008d24 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	617b      	str	r3, [r7, #20]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d015      	beq.n	8008d56 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008d2a:	f000 faa3 	bl	8009274 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	6a3a      	ldr	r2, [r7, #32]
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fd fd94 	bl	800687e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008d56:	bf00      	nop
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08a      	sub	sp, #40	; 0x28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	623b      	str	r3, [r7, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d8e:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <xTimerGenericCommand+0x98>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d02a      	beq.n	8008dec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b05      	cmp	r3, #5
 8008da6:	dc18      	bgt.n	8008dda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008da8:	f7ff fba0 	bl	80084ec <xTaskGetSchedulerState>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d109      	bne.n	8008dc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008db2:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <xTimerGenericCommand+0x98>)
 8008db4:	6818      	ldr	r0, [r3, #0]
 8008db6:	f107 0110 	add.w	r1, r7, #16
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dbe:	f7fd ff99 	bl	8006cf4 <xQueueGenericSend>
 8008dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8008dc4:	e012      	b.n	8008dec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <xTimerGenericCommand+0x98>)
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	f107 0110 	add.w	r1, r7, #16
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7fd ff8f 	bl	8006cf4 <xQueueGenericSend>
 8008dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8008dd8:	e008      	b.n	8008dec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008dda:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <xTimerGenericCommand+0x98>)
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	f107 0110 	add.w	r1, r7, #16
 8008de2:	2300      	movs	r3, #0
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	f7fe f883 	bl	8006ef0 <xQueueGenericSendFromISR>
 8008dea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000d70 	.word	0x20000d70

08008dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af02      	add	r7, sp, #8
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e06:	4b1c      	ldr	r3, [pc, #112]	; (8008e78 <prvProcessExpiredTimer+0x7c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fd fd99 	bl	800694c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d122      	bne.n	8008e68 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	699a      	ldr	r2, [r3, #24]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	18d1      	adds	r1, r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	6978      	ldr	r0, [r7, #20]
 8008e30:	f000 f8c8 	bl	8008fc4 <prvInsertTimerInActiveList>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d016      	beq.n	8008e68 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	2100      	movs	r1, #0
 8008e44:	6978      	ldr	r0, [r7, #20]
 8008e46:	f7ff ff8b 	bl	8008d60 <xTimerGenericCommand>
 8008e4a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60fb      	str	r3, [r7, #12]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	6978      	ldr	r0, [r7, #20]
 8008e6e:	4798      	blx	r3
}
 8008e70:	bf00      	nop
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20000d68 	.word	0x20000d68

08008e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e84:	f107 0308 	add.w	r3, r7, #8
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 f857 	bl	8008f3c <prvGetNextExpireTime>
 8008e8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	4619      	mov	r1, r3
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f803 	bl	8008ea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e9a:	f000 f8d5 	bl	8009048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e9e:	e7f1      	b.n	8008e84 <prvTimerTask+0x8>

08008ea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008eaa:	f7fe ff27 	bl	8007cfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f866 	bl	8008f84 <prvSampleTimeNow>
 8008eb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d130      	bne.n	8008f22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <prvProcessTimerOrBlockTask+0x3c>
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d806      	bhi.n	8008edc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ece:	f7fe ff23 	bl	8007d18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ed2:	68f9      	ldr	r1, [r7, #12]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff ff91 	bl	8008dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008eda:	e024      	b.n	8008f26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d008      	beq.n	8008ef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ee2:	4b13      	ldr	r3, [pc, #76]	; (8008f30 <prvProcessTimerOrBlockTask+0x90>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bf0c      	ite	eq
 8008eec:	2301      	moveq	r3, #1
 8008eee:	2300      	movne	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <prvProcessTimerOrBlockTask+0x94>)
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	4619      	mov	r1, r3
 8008f02:	f7fe fc95 	bl	8007830 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f06:	f7fe ff07 	bl	8007d18 <xTaskResumeAll>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f10:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <prvProcessTimerOrBlockTask+0x98>)
 8008f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	f3bf 8f6f 	isb	sy
}
 8008f20:	e001      	b.n	8008f26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f22:	f7fe fef9 	bl	8007d18 <xTaskResumeAll>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000d6c 	.word	0x20000d6c
 8008f34:	20000d70 	.word	0x20000d70
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f44:	4b0e      	ldr	r3, [pc, #56]	; (8008f80 <prvGetNextExpireTime+0x44>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	bf0c      	ite	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	2300      	movne	r3, #0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	461a      	mov	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d105      	bne.n	8008f6e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f62:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <prvGetNextExpireTime+0x44>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e001      	b.n	8008f72 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f72:	68fb      	ldr	r3, [r7, #12]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	20000d68 	.word	0x20000d68

08008f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f8c:	f7fe ff62 	bl	8007e54 <xTaskGetTickCount>
 8008f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <prvSampleTimeNow+0x3c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d205      	bcs.n	8008fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f9c:	f000 f908 	bl	80091b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	e002      	b.n	8008fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008fae:	4a04      	ldr	r2, [pc, #16]	; (8008fc0 <prvSampleTimeNow+0x3c>)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000d78 	.word	0x20000d78

08008fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d812      	bhi.n	8009010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	1ad2      	subs	r2, r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d302      	bcc.n	8008ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e01b      	b.n	8009036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <prvInsertTimerInActiveList+0x7c>)
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3304      	adds	r3, #4
 8009006:	4619      	mov	r1, r3
 8009008:	4610      	mov	r0, r2
 800900a:	f7fd fc67 	bl	80068dc <vListInsert>
 800900e:	e012      	b.n	8009036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d206      	bcs.n	8009026 <prvInsertTimerInActiveList+0x62>
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	d302      	bcc.n	8009026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009020:	2301      	movs	r3, #1
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	e007      	b.n	8009036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009026:	4b07      	ldr	r3, [pc, #28]	; (8009044 <prvInsertTimerInActiveList+0x80>)
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3304      	adds	r3, #4
 800902e:	4619      	mov	r1, r3
 8009030:	4610      	mov	r0, r2
 8009032:	f7fd fc53 	bl	80068dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009036:	697b      	ldr	r3, [r7, #20]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20000d6c 	.word	0x20000d6c
 8009044:	20000d68 	.word	0x20000d68

08009048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b08e      	sub	sp, #56	; 0x38
 800904c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800904e:	e09d      	b.n	800918c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	da18      	bge.n	8009088 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	3304      	adds	r3, #4
 800905a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	61fb      	str	r3, [r7, #28]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800907e:	6850      	ldr	r0, [r2, #4]
 8009080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009082:	6892      	ldr	r2, [r2, #8]
 8009084:	4611      	mov	r1, r2
 8009086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	db7d      	blt.n	800918a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d004      	beq.n	80090a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	3304      	adds	r3, #4
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fd fc54 	bl	800694c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090a4:	463b      	mov	r3, r7
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ff6c 	bl	8008f84 <prvSampleTimeNow>
 80090ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b09      	cmp	r3, #9
 80090b2:	d86b      	bhi.n	800918c <prvProcessReceivedCommands+0x144>
 80090b4:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <prvProcessReceivedCommands+0x74>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	080090e5 	.word	0x080090e5
 80090c0:	080090e5 	.word	0x080090e5
 80090c4:	080090e5 	.word	0x080090e5
 80090c8:	0800918d 	.word	0x0800918d
 80090cc:	08009141 	.word	0x08009141
 80090d0:	08009179 	.word	0x08009179
 80090d4:	080090e5 	.word	0x080090e5
 80090d8:	080090e5 	.word	0x080090e5
 80090dc:	0800918d 	.word	0x0800918d
 80090e0:	08009141 	.word	0x08009141
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	18d1      	adds	r1, r2, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f2:	f7ff ff67 	bl	8008fc4 <prvInsertTimerInActiveList>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d047      	beq.n	800918c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009102:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d13f      	bne.n	800918c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	441a      	add	r2, r3
 8009114:	2300      	movs	r3, #0
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	2300      	movs	r3, #0
 800911a:	2100      	movs	r1, #0
 800911c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800911e:	f7ff fe1f 	bl	8008d60 <xTimerGenericCommand>
 8009122:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d130      	bne.n	800918c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	61bb      	str	r3, [r7, #24]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	617b      	str	r3, [r7, #20]
}
 8009160:	bf00      	nop
 8009162:	e7fe      	b.n	8009162 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	699a      	ldr	r2, [r3, #24]
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	18d1      	adds	r1, r2, r3
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009172:	f7ff ff27 	bl	8008fc4 <prvInsertTimerInActiveList>
					break;
 8009176:	e009      	b.n	800918c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009184:	f000 fabc 	bl	8009700 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009188:	e000      	b.n	800918c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800918a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800918c:	4b07      	ldr	r3, [pc, #28]	; (80091ac <prvProcessReceivedCommands+0x164>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	1d39      	adds	r1, r7, #4
 8009192:	2200      	movs	r2, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f7fd ff43 	bl	8007020 <xQueueReceive>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	f47f af57 	bne.w	8009050 <prvProcessReceivedCommands+0x8>
	}
}
 80091a2:	bf00      	nop
 80091a4:	bf00      	nop
 80091a6:	3730      	adds	r7, #48	; 0x30
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	20000d70 	.word	0x20000d70

080091b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091b6:	e045      	b.n	8009244 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091b8:	4b2c      	ldr	r3, [pc, #176]	; (800926c <prvSwitchTimerLists+0xbc>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091c2:	4b2a      	ldr	r3, [pc, #168]	; (800926c <prvSwitchTimerLists+0xbc>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fd fbbb 	bl	800694c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d12e      	bne.n	8009244 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4413      	add	r3, r2
 80091ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d90e      	bls.n	8009216 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <prvSwitchTimerLists+0xbc>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3304      	adds	r3, #4
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7fd fb64 	bl	80068dc <vListInsert>
 8009214:	e016      	b.n	8009244 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009216:	2300      	movs	r3, #0
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	2100      	movs	r1, #0
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f7ff fd9d 	bl	8008d60 <xTimerGenericCommand>
 8009226:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10a      	bne.n	8009244 <prvSwitchTimerLists+0x94>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	603b      	str	r3, [r7, #0]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009244:	4b09      	ldr	r3, [pc, #36]	; (800926c <prvSwitchTimerLists+0xbc>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1b4      	bne.n	80091b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800924e:	4b07      	ldr	r3, [pc, #28]	; (800926c <prvSwitchTimerLists+0xbc>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <prvSwitchTimerLists+0xc0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a04      	ldr	r2, [pc, #16]	; (800926c <prvSwitchTimerLists+0xbc>)
 800925a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800925c:	4a04      	ldr	r2, [pc, #16]	; (8009270 <prvSwitchTimerLists+0xc0>)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6013      	str	r3, [r2, #0]
}
 8009262:	bf00      	nop
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000d68 	.word	0x20000d68
 8009270:	20000d6c 	.word	0x20000d6c

08009274 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800927a:	f000 f92f 	bl	80094dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800927e:	4b15      	ldr	r3, [pc, #84]	; (80092d4 <prvCheckForValidListAndQueue+0x60>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d120      	bne.n	80092c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009286:	4814      	ldr	r0, [pc, #80]	; (80092d8 <prvCheckForValidListAndQueue+0x64>)
 8009288:	f7fd fada 	bl	8006840 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800928c:	4813      	ldr	r0, [pc, #76]	; (80092dc <prvCheckForValidListAndQueue+0x68>)
 800928e:	f7fd fad7 	bl	8006840 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009292:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <prvCheckForValidListAndQueue+0x6c>)
 8009294:	4a10      	ldr	r2, [pc, #64]	; (80092d8 <prvCheckForValidListAndQueue+0x64>)
 8009296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009298:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <prvCheckForValidListAndQueue+0x70>)
 800929a:	4a10      	ldr	r2, [pc, #64]	; (80092dc <prvCheckForValidListAndQueue+0x68>)
 800929c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800929e:	2300      	movs	r3, #0
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <prvCheckForValidListAndQueue+0x74>)
 80092a4:	4a11      	ldr	r2, [pc, #68]	; (80092ec <prvCheckForValidListAndQueue+0x78>)
 80092a6:	2110      	movs	r1, #16
 80092a8:	200a      	movs	r0, #10
 80092aa:	f7fd fbe1 	bl	8006a70 <xQueueGenericCreateStatic>
 80092ae:	4603      	mov	r3, r0
 80092b0:	4a08      	ldr	r2, [pc, #32]	; (80092d4 <prvCheckForValidListAndQueue+0x60>)
 80092b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092b4:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <prvCheckForValidListAndQueue+0x60>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092bc:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <prvCheckForValidListAndQueue+0x60>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	490b      	ldr	r1, [pc, #44]	; (80092f0 <prvCheckForValidListAndQueue+0x7c>)
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fa62 	bl	800778c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092c8:	f000 f938 	bl	800953c <vPortExitCritical>
}
 80092cc:	bf00      	nop
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20000d70 	.word	0x20000d70
 80092d8:	20000d40 	.word	0x20000d40
 80092dc:	20000d54 	.word	0x20000d54
 80092e0:	20000d68 	.word	0x20000d68
 80092e4:	20000d6c 	.word	0x20000d6c
 80092e8:	20000e1c 	.word	0x20000e1c
 80092ec:	20000d7c 	.word	0x20000d7c
 80092f0:	0800a104 	.word	0x0800a104

080092f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3b04      	subs	r3, #4
 8009304:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800930c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	3b04      	subs	r3, #4
 8009312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f023 0201 	bic.w	r2, r3, #1
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3b04      	subs	r3, #4
 8009322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009324:	4a08      	ldr	r2, [pc, #32]	; (8009348 <pxPortInitialiseStack+0x54>)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	3b14      	subs	r3, #20
 800932e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3b20      	subs	r3, #32
 800933a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800933c:	68fb      	ldr	r3, [r7, #12]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	bc80      	pop	{r7}
 8009346:	4770      	bx	lr
 8009348:	0800934d 	.word	0x0800934d

0800934c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009352:	2300      	movs	r3, #0
 8009354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009356:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <prvTaskExitError+0x54>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935e:	d00a      	beq.n	8009376 <prvTaskExitError+0x2a>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	60fb      	str	r3, [r7, #12]
}
 8009372:	bf00      	nop
 8009374:	e7fe      	b.n	8009374 <prvTaskExitError+0x28>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	60bb      	str	r3, [r7, #8]
}
 8009388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800938a:	bf00      	nop
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0fc      	beq.n	800938c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009392:	bf00      	nop
 8009394:	bf00      	nop
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	20000038 	.word	0x20000038
	...

080093b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <pxCurrentTCBConst2>)
 80093b2:	6819      	ldr	r1, [r3, #0]
 80093b4:	6808      	ldr	r0, [r1, #0]
 80093b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093ba:	f380 8809 	msr	PSP, r0
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8811 	msr	BASEPRI, r0
 80093ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80093ce:	4770      	bx	lr

080093d0 <pxCurrentTCBConst2>:
 80093d0:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop

080093d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80093d8:	4806      	ldr	r0, [pc, #24]	; (80093f4 <prvPortStartFirstTask+0x1c>)
 80093da:	6800      	ldr	r0, [r0, #0]
 80093dc:	6800      	ldr	r0, [r0, #0]
 80093de:	f380 8808 	msr	MSP, r0
 80093e2:	b662      	cpsie	i
 80093e4:	b661      	cpsie	f
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	df00      	svc	0
 80093f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093f2:	bf00      	nop
 80093f4:	e000ed08 	.word	0xe000ed08

080093f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093fe:	4b32      	ldr	r3, [pc, #200]	; (80094c8 <xPortStartScheduler+0xd0>)
 8009400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	22ff      	movs	r2, #255	; 0xff
 800940e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009420:	b2da      	uxtb	r2, r3
 8009422:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <xPortStartScheduler+0xd4>)
 8009424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009426:	4b2a      	ldr	r3, [pc, #168]	; (80094d0 <xPortStartScheduler+0xd8>)
 8009428:	2207      	movs	r2, #7
 800942a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800942c:	e009      	b.n	8009442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800942e:	4b28      	ldr	r3, [pc, #160]	; (80094d0 <xPortStartScheduler+0xd8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3b01      	subs	r3, #1
 8009434:	4a26      	ldr	r2, [pc, #152]	; (80094d0 <xPortStartScheduler+0xd8>)
 8009436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	b2db      	uxtb	r3, r3
 8009440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944a:	2b80      	cmp	r3, #128	; 0x80
 800944c:	d0ef      	beq.n	800942e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800944e:	4b20      	ldr	r3, [pc, #128]	; (80094d0 <xPortStartScheduler+0xd8>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f1c3 0307 	rsb	r3, r3, #7
 8009456:	2b04      	cmp	r3, #4
 8009458:	d00a      	beq.n	8009470 <xPortStartScheduler+0x78>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	60bb      	str	r3, [r7, #8]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009470:	4b17      	ldr	r3, [pc, #92]	; (80094d0 <xPortStartScheduler+0xd8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	4a16      	ldr	r2, [pc, #88]	; (80094d0 <xPortStartScheduler+0xd8>)
 8009478:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800947a:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <xPortStartScheduler+0xd8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009482:	4a13      	ldr	r2, [pc, #76]	; (80094d0 <xPortStartScheduler+0xd8>)
 8009484:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800948e:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <xPortStartScheduler+0xdc>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <xPortStartScheduler+0xdc>)
 8009494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800949a:	4b0e      	ldr	r3, [pc, #56]	; (80094d4 <xPortStartScheduler+0xdc>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <xPortStartScheduler+0xdc>)
 80094a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094a6:	f000 f8b9 	bl	800961c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094aa:	4b0b      	ldr	r3, [pc, #44]	; (80094d8 <xPortStartScheduler+0xe0>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094b0:	f7ff ff92 	bl	80093d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094b4:	f7fe fdac 	bl	8008010 <vTaskSwitchContext>
	prvTaskExitError();
 80094b8:	f7ff ff48 	bl	800934c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	e000e400 	.word	0xe000e400
 80094cc:	20000e6c 	.word	0x20000e6c
 80094d0:	20000e70 	.word	0x20000e70
 80094d4:	e000ed20 	.word	0xe000ed20
 80094d8:	20000038 	.word	0x20000038

080094dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	607b      	str	r3, [r7, #4]
}
 80094f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094f6:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <vPortEnterCritical+0x58>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3301      	adds	r3, #1
 80094fc:	4a0d      	ldr	r2, [pc, #52]	; (8009534 <vPortEnterCritical+0x58>)
 80094fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <vPortEnterCritical+0x58>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d10f      	bne.n	8009528 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009508:	4b0b      	ldr	r3, [pc, #44]	; (8009538 <vPortEnterCritical+0x5c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <vPortEnterCritical+0x4c>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	603b      	str	r3, [r7, #0]
}
 8009524:	bf00      	nop
 8009526:	e7fe      	b.n	8009526 <vPortEnterCritical+0x4a>
	}
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	20000038 	.word	0x20000038
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009542:	4b11      	ldr	r3, [pc, #68]	; (8009588 <vPortExitCritical+0x4c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <vPortExitCritical+0x24>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	607b      	str	r3, [r7, #4]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009560:	4b09      	ldr	r3, [pc, #36]	; (8009588 <vPortExitCritical+0x4c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3b01      	subs	r3, #1
 8009566:	4a08      	ldr	r2, [pc, #32]	; (8009588 <vPortExitCritical+0x4c>)
 8009568:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <vPortExitCritical+0x4c>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d105      	bne.n	800957e <vPortExitCritical+0x42>
 8009572:	2300      	movs	r3, #0
 8009574:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f383 8811 	msr	BASEPRI, r3
}
 800957c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800957e:	bf00      	nop
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	bc80      	pop	{r7}
 8009586:	4770      	bx	lr
 8009588:	20000038 	.word	0x20000038
 800958c:	00000000 	.word	0x00000000

08009590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009590:	f3ef 8009 	mrs	r0, PSP
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	4b0d      	ldr	r3, [pc, #52]	; (80095d0 <pxCurrentTCBConst>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095a0:	6010      	str	r0, [r2, #0]
 80095a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80095a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095aa:	f380 8811 	msr	BASEPRI, r0
 80095ae:	f7fe fd2f 	bl	8008010 <vTaskSwitchContext>
 80095b2:	f04f 0000 	mov.w	r0, #0
 80095b6:	f380 8811 	msr	BASEPRI, r0
 80095ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80095be:	6819      	ldr	r1, [r3, #0]
 80095c0:	6808      	ldr	r0, [r1, #0]
 80095c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095c6:	f380 8809 	msr	PSP, r0
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	4770      	bx	lr

080095d0 <pxCurrentTCBConst>:
 80095d0:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop

080095d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	607b      	str	r3, [r7, #4]
}
 80095f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095f2:	f7fe fc4f 	bl	8007e94 <xTaskIncrementTick>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <SysTick_Handler+0x40>)
 80095fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f383 8811 	msr	BASEPRI, r3
}
 800960e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009620:	4b0a      	ldr	r3, [pc, #40]	; (800964c <vPortSetupTimerInterrupt+0x30>)
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009626:	4b0a      	ldr	r3, [pc, #40]	; (8009650 <vPortSetupTimerInterrupt+0x34>)
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <vPortSetupTimerInterrupt+0x38>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a09      	ldr	r2, [pc, #36]	; (8009658 <vPortSetupTimerInterrupt+0x3c>)
 8009632:	fba2 2303 	umull	r2, r3, r2, r3
 8009636:	099b      	lsrs	r3, r3, #6
 8009638:	4a08      	ldr	r2, [pc, #32]	; (800965c <vPortSetupTimerInterrupt+0x40>)
 800963a:	3b01      	subs	r3, #1
 800963c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800963e:	4b03      	ldr	r3, [pc, #12]	; (800964c <vPortSetupTimerInterrupt+0x30>)
 8009640:	2207      	movs	r2, #7
 8009642:	601a      	str	r2, [r3, #0]
}
 8009644:	bf00      	nop
 8009646:	46bd      	mov	sp, r7
 8009648:	bc80      	pop	{r7}
 800964a:	4770      	bx	lr
 800964c:	e000e010 	.word	0xe000e010
 8009650:	e000e018 	.word	0xe000e018
 8009654:	2000002c 	.word	0x2000002c
 8009658:	10624dd3 	.word	0x10624dd3
 800965c:	e000e014 	.word	0xe000e014

08009660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009666:	f3ef 8305 	mrs	r3, IPSR
 800966a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b0f      	cmp	r3, #15
 8009670:	d914      	bls.n	800969c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009672:	4a16      	ldr	r2, [pc, #88]	; (80096cc <vPortValidateInterruptPriority+0x6c>)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4413      	add	r3, r2
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800967c:	4b14      	ldr	r3, [pc, #80]	; (80096d0 <vPortValidateInterruptPriority+0x70>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	7afa      	ldrb	r2, [r7, #11]
 8009682:	429a      	cmp	r2, r3
 8009684:	d20a      	bcs.n	800969c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	607b      	str	r3, [r7, #4]
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800969c:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <vPortValidateInterruptPriority+0x74>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096a4:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <vPortValidateInterruptPriority+0x78>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d90a      	bls.n	80096c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	603b      	str	r3, [r7, #0]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <vPortValidateInterruptPriority+0x60>
	}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc80      	pop	{r7}
 80096ca:	4770      	bx	lr
 80096cc:	e000e3f0 	.word	0xe000e3f0
 80096d0:	20000e6c 	.word	0x20000e6c
 80096d4:	e000ed0c 	.word	0xe000ed0c
 80096d8:	20000e70 	.word	0x20000e70

080096dc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80096e4:	f7fe fb0a 	bl	8007cfc <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f845 	bl	8009778 <malloc>
 80096ee:	4603      	mov	r3, r0
 80096f0:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096f2:	f7fe fb11 	bl	8007d18 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80096f6:	68fb      	ldr	r3, [r7, #12]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
	if( pv )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d006      	beq.n	800971c <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800970e:	f7fe faf5 	bl	8007cfc <vTaskSuspendAll>
		{
			free( pv );
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f838 	bl	8009788 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8009718:	f7fe fafe 	bl	8007d18 <xTaskResumeAll>
	}
}
 800971c:	bf00      	nop
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <__errno>:
 8009724:	4b01      	ldr	r3, [pc, #4]	; (800972c <__errno+0x8>)
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	2000003c 	.word	0x2000003c

08009730 <__libc_init_array>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	2600      	movs	r6, #0
 8009734:	4d0c      	ldr	r5, [pc, #48]	; (8009768 <__libc_init_array+0x38>)
 8009736:	4c0d      	ldr	r4, [pc, #52]	; (800976c <__libc_init_array+0x3c>)
 8009738:	1b64      	subs	r4, r4, r5
 800973a:	10a4      	asrs	r4, r4, #2
 800973c:	42a6      	cmp	r6, r4
 800973e:	d109      	bne.n	8009754 <__libc_init_array+0x24>
 8009740:	f000 fc6c 	bl	800a01c <_init>
 8009744:	2600      	movs	r6, #0
 8009746:	4d0a      	ldr	r5, [pc, #40]	; (8009770 <__libc_init_array+0x40>)
 8009748:	4c0a      	ldr	r4, [pc, #40]	; (8009774 <__libc_init_array+0x44>)
 800974a:	1b64      	subs	r4, r4, r5
 800974c:	10a4      	asrs	r4, r4, #2
 800974e:	42a6      	cmp	r6, r4
 8009750:	d105      	bne.n	800975e <__libc_init_array+0x2e>
 8009752:	bd70      	pop	{r4, r5, r6, pc}
 8009754:	f855 3b04 	ldr.w	r3, [r5], #4
 8009758:	4798      	blx	r3
 800975a:	3601      	adds	r6, #1
 800975c:	e7ee      	b.n	800973c <__libc_init_array+0xc>
 800975e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009762:	4798      	blx	r3
 8009764:	3601      	adds	r6, #1
 8009766:	e7f2      	b.n	800974e <__libc_init_array+0x1e>
 8009768:	0800a278 	.word	0x0800a278
 800976c:	0800a278 	.word	0x0800a278
 8009770:	0800a278 	.word	0x0800a278
 8009774:	0800a27c 	.word	0x0800a27c

08009778 <malloc>:
 8009778:	4b02      	ldr	r3, [pc, #8]	; (8009784 <malloc+0xc>)
 800977a:	4601      	mov	r1, r0
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	f000 b86d 	b.w	800985c <_malloc_r>
 8009782:	bf00      	nop
 8009784:	2000003c 	.word	0x2000003c

08009788 <free>:
 8009788:	4b02      	ldr	r3, [pc, #8]	; (8009794 <free+0xc>)
 800978a:	4601      	mov	r1, r0
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	f000 b819 	b.w	80097c4 <_free_r>
 8009792:	bf00      	nop
 8009794:	2000003c 	.word	0x2000003c

08009798 <memcpy>:
 8009798:	440a      	add	r2, r1
 800979a:	4291      	cmp	r1, r2
 800979c:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a0:	d100      	bne.n	80097a4 <memcpy+0xc>
 80097a2:	4770      	bx	lr
 80097a4:	b510      	push	{r4, lr}
 80097a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097aa:	4291      	cmp	r1, r2
 80097ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b0:	d1f9      	bne.n	80097a6 <memcpy+0xe>
 80097b2:	bd10      	pop	{r4, pc}

080097b4 <memset>:
 80097b4:	4603      	mov	r3, r0
 80097b6:	4402      	add	r2, r0
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d100      	bne.n	80097be <memset+0xa>
 80097bc:	4770      	bx	lr
 80097be:	f803 1b01 	strb.w	r1, [r3], #1
 80097c2:	e7f9      	b.n	80097b8 <memset+0x4>

080097c4 <_free_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4605      	mov	r5, r0
 80097c8:	2900      	cmp	r1, #0
 80097ca:	d043      	beq.n	8009854 <_free_r+0x90>
 80097cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d0:	1f0c      	subs	r4, r1, #4
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bfb8      	it	lt
 80097d6:	18e4      	addlt	r4, r4, r3
 80097d8:	f000 f8ca 	bl	8009970 <__malloc_lock>
 80097dc:	4a1e      	ldr	r2, [pc, #120]	; (8009858 <_free_r+0x94>)
 80097de:	6813      	ldr	r3, [r2, #0]
 80097e0:	4610      	mov	r0, r2
 80097e2:	b933      	cbnz	r3, 80097f2 <_free_r+0x2e>
 80097e4:	6063      	str	r3, [r4, #4]
 80097e6:	6014      	str	r4, [r2, #0]
 80097e8:	4628      	mov	r0, r5
 80097ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097ee:	f000 b8c5 	b.w	800997c <__malloc_unlock>
 80097f2:	42a3      	cmp	r3, r4
 80097f4:	d90a      	bls.n	800980c <_free_r+0x48>
 80097f6:	6821      	ldr	r1, [r4, #0]
 80097f8:	1862      	adds	r2, r4, r1
 80097fa:	4293      	cmp	r3, r2
 80097fc:	bf01      	itttt	eq
 80097fe:	681a      	ldreq	r2, [r3, #0]
 8009800:	685b      	ldreq	r3, [r3, #4]
 8009802:	1852      	addeq	r2, r2, r1
 8009804:	6022      	streq	r2, [r4, #0]
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	6004      	str	r4, [r0, #0]
 800980a:	e7ed      	b.n	80097e8 <_free_r+0x24>
 800980c:	461a      	mov	r2, r3
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	b10b      	cbz	r3, 8009816 <_free_r+0x52>
 8009812:	42a3      	cmp	r3, r4
 8009814:	d9fa      	bls.n	800980c <_free_r+0x48>
 8009816:	6811      	ldr	r1, [r2, #0]
 8009818:	1850      	adds	r0, r2, r1
 800981a:	42a0      	cmp	r0, r4
 800981c:	d10b      	bne.n	8009836 <_free_r+0x72>
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	4401      	add	r1, r0
 8009822:	1850      	adds	r0, r2, r1
 8009824:	4283      	cmp	r3, r0
 8009826:	6011      	str	r1, [r2, #0]
 8009828:	d1de      	bne.n	80097e8 <_free_r+0x24>
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	4401      	add	r1, r0
 8009830:	6011      	str	r1, [r2, #0]
 8009832:	6053      	str	r3, [r2, #4]
 8009834:	e7d8      	b.n	80097e8 <_free_r+0x24>
 8009836:	d902      	bls.n	800983e <_free_r+0x7a>
 8009838:	230c      	movs	r3, #12
 800983a:	602b      	str	r3, [r5, #0]
 800983c:	e7d4      	b.n	80097e8 <_free_r+0x24>
 800983e:	6820      	ldr	r0, [r4, #0]
 8009840:	1821      	adds	r1, r4, r0
 8009842:	428b      	cmp	r3, r1
 8009844:	bf01      	itttt	eq
 8009846:	6819      	ldreq	r1, [r3, #0]
 8009848:	685b      	ldreq	r3, [r3, #4]
 800984a:	1809      	addeq	r1, r1, r0
 800984c:	6021      	streq	r1, [r4, #0]
 800984e:	6063      	str	r3, [r4, #4]
 8009850:	6054      	str	r4, [r2, #4]
 8009852:	e7c9      	b.n	80097e8 <_free_r+0x24>
 8009854:	bd38      	pop	{r3, r4, r5, pc}
 8009856:	bf00      	nop
 8009858:	20000e74 	.word	0x20000e74

0800985c <_malloc_r>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	1ccd      	adds	r5, r1, #3
 8009860:	f025 0503 	bic.w	r5, r5, #3
 8009864:	3508      	adds	r5, #8
 8009866:	2d0c      	cmp	r5, #12
 8009868:	bf38      	it	cc
 800986a:	250c      	movcc	r5, #12
 800986c:	2d00      	cmp	r5, #0
 800986e:	4606      	mov	r6, r0
 8009870:	db01      	blt.n	8009876 <_malloc_r+0x1a>
 8009872:	42a9      	cmp	r1, r5
 8009874:	d903      	bls.n	800987e <_malloc_r+0x22>
 8009876:	230c      	movs	r3, #12
 8009878:	6033      	str	r3, [r6, #0]
 800987a:	2000      	movs	r0, #0
 800987c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800987e:	f000 f877 	bl	8009970 <__malloc_lock>
 8009882:	4921      	ldr	r1, [pc, #132]	; (8009908 <_malloc_r+0xac>)
 8009884:	680a      	ldr	r2, [r1, #0]
 8009886:	4614      	mov	r4, r2
 8009888:	b99c      	cbnz	r4, 80098b2 <_malloc_r+0x56>
 800988a:	4f20      	ldr	r7, [pc, #128]	; (800990c <_malloc_r+0xb0>)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	b923      	cbnz	r3, 800989a <_malloc_r+0x3e>
 8009890:	4621      	mov	r1, r4
 8009892:	4630      	mov	r0, r6
 8009894:	f000 f83c 	bl	8009910 <_sbrk_r>
 8009898:	6038      	str	r0, [r7, #0]
 800989a:	4629      	mov	r1, r5
 800989c:	4630      	mov	r0, r6
 800989e:	f000 f837 	bl	8009910 <_sbrk_r>
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d123      	bne.n	80098ee <_malloc_r+0x92>
 80098a6:	230c      	movs	r3, #12
 80098a8:	4630      	mov	r0, r6
 80098aa:	6033      	str	r3, [r6, #0]
 80098ac:	f000 f866 	bl	800997c <__malloc_unlock>
 80098b0:	e7e3      	b.n	800987a <_malloc_r+0x1e>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	1b5b      	subs	r3, r3, r5
 80098b6:	d417      	bmi.n	80098e8 <_malloc_r+0x8c>
 80098b8:	2b0b      	cmp	r3, #11
 80098ba:	d903      	bls.n	80098c4 <_malloc_r+0x68>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	441c      	add	r4, r3
 80098c0:	6025      	str	r5, [r4, #0]
 80098c2:	e004      	b.n	80098ce <_malloc_r+0x72>
 80098c4:	6863      	ldr	r3, [r4, #4]
 80098c6:	42a2      	cmp	r2, r4
 80098c8:	bf0c      	ite	eq
 80098ca:	600b      	streq	r3, [r1, #0]
 80098cc:	6053      	strne	r3, [r2, #4]
 80098ce:	4630      	mov	r0, r6
 80098d0:	f000 f854 	bl	800997c <__malloc_unlock>
 80098d4:	f104 000b 	add.w	r0, r4, #11
 80098d8:	1d23      	adds	r3, r4, #4
 80098da:	f020 0007 	bic.w	r0, r0, #7
 80098de:	1ac2      	subs	r2, r0, r3
 80098e0:	d0cc      	beq.n	800987c <_malloc_r+0x20>
 80098e2:	1a1b      	subs	r3, r3, r0
 80098e4:	50a3      	str	r3, [r4, r2]
 80098e6:	e7c9      	b.n	800987c <_malloc_r+0x20>
 80098e8:	4622      	mov	r2, r4
 80098ea:	6864      	ldr	r4, [r4, #4]
 80098ec:	e7cc      	b.n	8009888 <_malloc_r+0x2c>
 80098ee:	1cc4      	adds	r4, r0, #3
 80098f0:	f024 0403 	bic.w	r4, r4, #3
 80098f4:	42a0      	cmp	r0, r4
 80098f6:	d0e3      	beq.n	80098c0 <_malloc_r+0x64>
 80098f8:	1a21      	subs	r1, r4, r0
 80098fa:	4630      	mov	r0, r6
 80098fc:	f000 f808 	bl	8009910 <_sbrk_r>
 8009900:	3001      	adds	r0, #1
 8009902:	d1dd      	bne.n	80098c0 <_malloc_r+0x64>
 8009904:	e7cf      	b.n	80098a6 <_malloc_r+0x4a>
 8009906:	bf00      	nop
 8009908:	20000e74 	.word	0x20000e74
 800990c:	20000e78 	.word	0x20000e78

08009910 <_sbrk_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	2300      	movs	r3, #0
 8009914:	4d05      	ldr	r5, [pc, #20]	; (800992c <_sbrk_r+0x1c>)
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	602b      	str	r3, [r5, #0]
 800991c:	f7f9 f9f6 	bl	8002d0c <_sbrk>
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	d102      	bne.n	800992a <_sbrk_r+0x1a>
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	b103      	cbz	r3, 800992a <_sbrk_r+0x1a>
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	bd38      	pop	{r3, r4, r5, pc}
 800992c:	200011b0 	.word	0x200011b0

08009930 <siprintf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009936:	b500      	push	{lr}
 8009938:	b09c      	sub	sp, #112	; 0x70
 800993a:	ab1d      	add	r3, sp, #116	; 0x74
 800993c:	9002      	str	r0, [sp, #8]
 800993e:	9006      	str	r0, [sp, #24]
 8009940:	9107      	str	r1, [sp, #28]
 8009942:	9104      	str	r1, [sp, #16]
 8009944:	4808      	ldr	r0, [pc, #32]	; (8009968 <siprintf+0x38>)
 8009946:	4909      	ldr	r1, [pc, #36]	; (800996c <siprintf+0x3c>)
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	6800      	ldr	r0, [r0, #0]
 8009950:	a902      	add	r1, sp, #8
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	f000 f874 	bl	8009a40 <_svfiprintf_r>
 8009958:	2200      	movs	r2, #0
 800995a:	9b02      	ldr	r3, [sp, #8]
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	b01c      	add	sp, #112	; 0x70
 8009960:	f85d eb04 	ldr.w	lr, [sp], #4
 8009964:	b003      	add	sp, #12
 8009966:	4770      	bx	lr
 8009968:	2000003c 	.word	0x2000003c
 800996c:	ffff0208 	.word	0xffff0208

08009970 <__malloc_lock>:
 8009970:	4801      	ldr	r0, [pc, #4]	; (8009978 <__malloc_lock+0x8>)
 8009972:	f000 bafb 	b.w	8009f6c <__retarget_lock_acquire_recursive>
 8009976:	bf00      	nop
 8009978:	200011b8 	.word	0x200011b8

0800997c <__malloc_unlock>:
 800997c:	4801      	ldr	r0, [pc, #4]	; (8009984 <__malloc_unlock+0x8>)
 800997e:	f000 baf6 	b.w	8009f6e <__retarget_lock_release_recursive>
 8009982:	bf00      	nop
 8009984:	200011b8 	.word	0x200011b8

08009988 <__ssputs_r>:
 8009988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998c:	688e      	ldr	r6, [r1, #8]
 800998e:	4682      	mov	sl, r0
 8009990:	429e      	cmp	r6, r3
 8009992:	460c      	mov	r4, r1
 8009994:	4690      	mov	r8, r2
 8009996:	461f      	mov	r7, r3
 8009998:	d838      	bhi.n	8009a0c <__ssputs_r+0x84>
 800999a:	898a      	ldrh	r2, [r1, #12]
 800999c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099a0:	d032      	beq.n	8009a08 <__ssputs_r+0x80>
 80099a2:	6825      	ldr	r5, [r4, #0]
 80099a4:	6909      	ldr	r1, [r1, #16]
 80099a6:	3301      	adds	r3, #1
 80099a8:	eba5 0901 	sub.w	r9, r5, r1
 80099ac:	6965      	ldr	r5, [r4, #20]
 80099ae:	444b      	add	r3, r9
 80099b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099b8:	106d      	asrs	r5, r5, #1
 80099ba:	429d      	cmp	r5, r3
 80099bc:	bf38      	it	cc
 80099be:	461d      	movcc	r5, r3
 80099c0:	0553      	lsls	r3, r2, #21
 80099c2:	d531      	bpl.n	8009a28 <__ssputs_r+0xa0>
 80099c4:	4629      	mov	r1, r5
 80099c6:	f7ff ff49 	bl	800985c <_malloc_r>
 80099ca:	4606      	mov	r6, r0
 80099cc:	b950      	cbnz	r0, 80099e4 <__ssputs_r+0x5c>
 80099ce:	230c      	movs	r3, #12
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	f8ca 3000 	str.w	r3, [sl]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099e4:	464a      	mov	r2, r9
 80099e6:	6921      	ldr	r1, [r4, #16]
 80099e8:	f7ff fed6 	bl	8009798 <memcpy>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	6126      	str	r6, [r4, #16]
 80099fa:	444e      	add	r6, r9
 80099fc:	6026      	str	r6, [r4, #0]
 80099fe:	463e      	mov	r6, r7
 8009a00:	6165      	str	r5, [r4, #20]
 8009a02:	eba5 0509 	sub.w	r5, r5, r9
 8009a06:	60a5      	str	r5, [r4, #8]
 8009a08:	42be      	cmp	r6, r7
 8009a0a:	d900      	bls.n	8009a0e <__ssputs_r+0x86>
 8009a0c:	463e      	mov	r6, r7
 8009a0e:	4632      	mov	r2, r6
 8009a10:	4641      	mov	r1, r8
 8009a12:	6820      	ldr	r0, [r4, #0]
 8009a14:	f000 faba 	bl	8009f8c <memmove>
 8009a18:	68a3      	ldr	r3, [r4, #8]
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	1b9b      	subs	r3, r3, r6
 8009a1e:	4432      	add	r2, r6
 8009a20:	2000      	movs	r0, #0
 8009a22:	60a3      	str	r3, [r4, #8]
 8009a24:	6022      	str	r2, [r4, #0]
 8009a26:	e7db      	b.n	80099e0 <__ssputs_r+0x58>
 8009a28:	462a      	mov	r2, r5
 8009a2a:	f000 fac9 	bl	8009fc0 <_realloc_r>
 8009a2e:	4606      	mov	r6, r0
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d1e1      	bne.n	80099f8 <__ssputs_r+0x70>
 8009a34:	4650      	mov	r0, sl
 8009a36:	6921      	ldr	r1, [r4, #16]
 8009a38:	f7ff fec4 	bl	80097c4 <_free_r>
 8009a3c:	e7c7      	b.n	80099ce <__ssputs_r+0x46>
	...

08009a40 <_svfiprintf_r>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	4698      	mov	r8, r3
 8009a46:	898b      	ldrh	r3, [r1, #12]
 8009a48:	4607      	mov	r7, r0
 8009a4a:	061b      	lsls	r3, r3, #24
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	4614      	mov	r4, r2
 8009a50:	b09d      	sub	sp, #116	; 0x74
 8009a52:	d50e      	bpl.n	8009a72 <_svfiprintf_r+0x32>
 8009a54:	690b      	ldr	r3, [r1, #16]
 8009a56:	b963      	cbnz	r3, 8009a72 <_svfiprintf_r+0x32>
 8009a58:	2140      	movs	r1, #64	; 0x40
 8009a5a:	f7ff feff 	bl	800985c <_malloc_r>
 8009a5e:	6028      	str	r0, [r5, #0]
 8009a60:	6128      	str	r0, [r5, #16]
 8009a62:	b920      	cbnz	r0, 8009a6e <_svfiprintf_r+0x2e>
 8009a64:	230c      	movs	r3, #12
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6c:	e0d1      	b.n	8009c12 <_svfiprintf_r+0x1d2>
 8009a6e:	2340      	movs	r3, #64	; 0x40
 8009a70:	616b      	str	r3, [r5, #20]
 8009a72:	2300      	movs	r3, #0
 8009a74:	9309      	str	r3, [sp, #36]	; 0x24
 8009a76:	2320      	movs	r3, #32
 8009a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a7c:	2330      	movs	r3, #48	; 0x30
 8009a7e:	f04f 0901 	mov.w	r9, #1
 8009a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c2c <_svfiprintf_r+0x1ec>
 8009a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a8e:	4623      	mov	r3, r4
 8009a90:	469a      	mov	sl, r3
 8009a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a96:	b10a      	cbz	r2, 8009a9c <_svfiprintf_r+0x5c>
 8009a98:	2a25      	cmp	r2, #37	; 0x25
 8009a9a:	d1f9      	bne.n	8009a90 <_svfiprintf_r+0x50>
 8009a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa0:	d00b      	beq.n	8009aba <_svfiprintf_r+0x7a>
 8009aa2:	465b      	mov	r3, fp
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7ff ff6d 	bl	8009988 <__ssputs_r>
 8009aae:	3001      	adds	r0, #1
 8009ab0:	f000 80aa 	beq.w	8009c08 <_svfiprintf_r+0x1c8>
 8009ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab6:	445a      	add	r2, fp
 8009ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8009aba:	f89a 3000 	ldrb.w	r3, [sl]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80a2 	beq.w	8009c08 <_svfiprintf_r+0x1c8>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ace:	f10a 0a01 	add.w	sl, sl, #1
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	9307      	str	r3, [sp, #28]
 8009ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ada:	931a      	str	r3, [sp, #104]	; 0x68
 8009adc:	4654      	mov	r4, sl
 8009ade:	2205      	movs	r2, #5
 8009ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae4:	4851      	ldr	r0, [pc, #324]	; (8009c2c <_svfiprintf_r+0x1ec>)
 8009ae6:	f000 fa43 	bl	8009f70 <memchr>
 8009aea:	9a04      	ldr	r2, [sp, #16]
 8009aec:	b9d8      	cbnz	r0, 8009b26 <_svfiprintf_r+0xe6>
 8009aee:	06d0      	lsls	r0, r2, #27
 8009af0:	bf44      	itt	mi
 8009af2:	2320      	movmi	r3, #32
 8009af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009af8:	0711      	lsls	r1, r2, #28
 8009afa:	bf44      	itt	mi
 8009afc:	232b      	movmi	r3, #43	; 0x2b
 8009afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b02:	f89a 3000 	ldrb.w	r3, [sl]
 8009b06:	2b2a      	cmp	r3, #42	; 0x2a
 8009b08:	d015      	beq.n	8009b36 <_svfiprintf_r+0xf6>
 8009b0a:	4654      	mov	r4, sl
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f04f 0c0a 	mov.w	ip, #10
 8009b12:	9a07      	ldr	r2, [sp, #28]
 8009b14:	4621      	mov	r1, r4
 8009b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b1a:	3b30      	subs	r3, #48	; 0x30
 8009b1c:	2b09      	cmp	r3, #9
 8009b1e:	d94e      	bls.n	8009bbe <_svfiprintf_r+0x17e>
 8009b20:	b1b0      	cbz	r0, 8009b50 <_svfiprintf_r+0x110>
 8009b22:	9207      	str	r2, [sp, #28]
 8009b24:	e014      	b.n	8009b50 <_svfiprintf_r+0x110>
 8009b26:	eba0 0308 	sub.w	r3, r0, r8
 8009b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	46a2      	mov	sl, r4
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	e7d2      	b.n	8009adc <_svfiprintf_r+0x9c>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	1d19      	adds	r1, r3, #4
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	9103      	str	r1, [sp, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfbb      	ittet	lt
 8009b42:	425b      	neglt	r3, r3
 8009b44:	f042 0202 	orrlt.w	r2, r2, #2
 8009b48:	9307      	strge	r3, [sp, #28]
 8009b4a:	9307      	strlt	r3, [sp, #28]
 8009b4c:	bfb8      	it	lt
 8009b4e:	9204      	strlt	r2, [sp, #16]
 8009b50:	7823      	ldrb	r3, [r4, #0]
 8009b52:	2b2e      	cmp	r3, #46	; 0x2e
 8009b54:	d10c      	bne.n	8009b70 <_svfiprintf_r+0x130>
 8009b56:	7863      	ldrb	r3, [r4, #1]
 8009b58:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5a:	d135      	bne.n	8009bc8 <_svfiprintf_r+0x188>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	3402      	adds	r4, #2
 8009b60:	1d1a      	adds	r2, r3, #4
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	9203      	str	r2, [sp, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfb8      	it	lt
 8009b6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c3c <_svfiprintf_r+0x1fc>
 8009b74:	2203      	movs	r2, #3
 8009b76:	4650      	mov	r0, sl
 8009b78:	7821      	ldrb	r1, [r4, #0]
 8009b7a:	f000 f9f9 	bl	8009f70 <memchr>
 8009b7e:	b140      	cbz	r0, 8009b92 <_svfiprintf_r+0x152>
 8009b80:	2340      	movs	r3, #64	; 0x40
 8009b82:	eba0 000a 	sub.w	r0, r0, sl
 8009b86:	fa03 f000 	lsl.w	r0, r3, r0
 8009b8a:	9b04      	ldr	r3, [sp, #16]
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	4303      	orrs	r3, r0
 8009b90:	9304      	str	r3, [sp, #16]
 8009b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b96:	2206      	movs	r2, #6
 8009b98:	4825      	ldr	r0, [pc, #148]	; (8009c30 <_svfiprintf_r+0x1f0>)
 8009b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b9e:	f000 f9e7 	bl	8009f70 <memchr>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d038      	beq.n	8009c18 <_svfiprintf_r+0x1d8>
 8009ba6:	4b23      	ldr	r3, [pc, #140]	; (8009c34 <_svfiprintf_r+0x1f4>)
 8009ba8:	bb1b      	cbnz	r3, 8009bf2 <_svfiprintf_r+0x1b2>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	3307      	adds	r3, #7
 8009bae:	f023 0307 	bic.w	r3, r3, #7
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	9303      	str	r3, [sp, #12]
 8009bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb8:	4433      	add	r3, r6
 8009bba:	9309      	str	r3, [sp, #36]	; 0x24
 8009bbc:	e767      	b.n	8009a8e <_svfiprintf_r+0x4e>
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc6:	e7a5      	b.n	8009b14 <_svfiprintf_r+0xd4>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f04f 0c0a 	mov.w	ip, #10
 8009bce:	4619      	mov	r1, r3
 8009bd0:	3401      	adds	r4, #1
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bda:	3a30      	subs	r2, #48	; 0x30
 8009bdc:	2a09      	cmp	r2, #9
 8009bde:	d903      	bls.n	8009be8 <_svfiprintf_r+0x1a8>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d0c5      	beq.n	8009b70 <_svfiprintf_r+0x130>
 8009be4:	9105      	str	r1, [sp, #20]
 8009be6:	e7c3      	b.n	8009b70 <_svfiprintf_r+0x130>
 8009be8:	4604      	mov	r4, r0
 8009bea:	2301      	movs	r3, #1
 8009bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf0:	e7f0      	b.n	8009bd4 <_svfiprintf_r+0x194>
 8009bf2:	ab03      	add	r3, sp, #12
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	462a      	mov	r2, r5
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <_svfiprintf_r+0x1f8>)
 8009bfc:	a904      	add	r1, sp, #16
 8009bfe:	f3af 8000 	nop.w
 8009c02:	1c42      	adds	r2, r0, #1
 8009c04:	4606      	mov	r6, r0
 8009c06:	d1d6      	bne.n	8009bb6 <_svfiprintf_r+0x176>
 8009c08:	89ab      	ldrh	r3, [r5, #12]
 8009c0a:	065b      	lsls	r3, r3, #25
 8009c0c:	f53f af2c 	bmi.w	8009a68 <_svfiprintf_r+0x28>
 8009c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c12:	b01d      	add	sp, #116	; 0x74
 8009c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	ab03      	add	r3, sp, #12
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	462a      	mov	r2, r5
 8009c1e:	4638      	mov	r0, r7
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <_svfiprintf_r+0x1f8>)
 8009c22:	a904      	add	r1, sp, #16
 8009c24:	f000 f87c 	bl	8009d20 <_printf_i>
 8009c28:	e7eb      	b.n	8009c02 <_svfiprintf_r+0x1c2>
 8009c2a:	bf00      	nop
 8009c2c:	0800a244 	.word	0x0800a244
 8009c30:	0800a24e 	.word	0x0800a24e
 8009c34:	00000000 	.word	0x00000000
 8009c38:	08009989 	.word	0x08009989
 8009c3c:	0800a24a 	.word	0x0800a24a

08009c40 <_printf_common>:
 8009c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c44:	4616      	mov	r6, r2
 8009c46:	4699      	mov	r9, r3
 8009c48:	688a      	ldr	r2, [r1, #8]
 8009c4a:	690b      	ldr	r3, [r1, #16]
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	bfb8      	it	lt
 8009c52:	4613      	movlt	r3, r2
 8009c54:	6033      	str	r3, [r6, #0]
 8009c56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c60:	b10a      	cbz	r2, 8009c66 <_printf_common+0x26>
 8009c62:	3301      	adds	r3, #1
 8009c64:	6033      	str	r3, [r6, #0]
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	0699      	lsls	r1, r3, #26
 8009c6a:	bf42      	ittt	mi
 8009c6c:	6833      	ldrmi	r3, [r6, #0]
 8009c6e:	3302      	addmi	r3, #2
 8009c70:	6033      	strmi	r3, [r6, #0]
 8009c72:	6825      	ldr	r5, [r4, #0]
 8009c74:	f015 0506 	ands.w	r5, r5, #6
 8009c78:	d106      	bne.n	8009c88 <_printf_common+0x48>
 8009c7a:	f104 0a19 	add.w	sl, r4, #25
 8009c7e:	68e3      	ldr	r3, [r4, #12]
 8009c80:	6832      	ldr	r2, [r6, #0]
 8009c82:	1a9b      	subs	r3, r3, r2
 8009c84:	42ab      	cmp	r3, r5
 8009c86:	dc28      	bgt.n	8009cda <_printf_common+0x9a>
 8009c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c8c:	1e13      	subs	r3, r2, #0
 8009c8e:	6822      	ldr	r2, [r4, #0]
 8009c90:	bf18      	it	ne
 8009c92:	2301      	movne	r3, #1
 8009c94:	0692      	lsls	r2, r2, #26
 8009c96:	d42d      	bmi.n	8009cf4 <_printf_common+0xb4>
 8009c98:	4649      	mov	r1, r9
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca0:	47c0      	blx	r8
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d020      	beq.n	8009ce8 <_printf_common+0xa8>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	68e5      	ldr	r5, [r4, #12]
 8009caa:	f003 0306 	and.w	r3, r3, #6
 8009cae:	2b04      	cmp	r3, #4
 8009cb0:	bf18      	it	ne
 8009cb2:	2500      	movne	r5, #0
 8009cb4:	6832      	ldr	r2, [r6, #0]
 8009cb6:	f04f 0600 	mov.w	r6, #0
 8009cba:	68a3      	ldr	r3, [r4, #8]
 8009cbc:	bf08      	it	eq
 8009cbe:	1aad      	subeq	r5, r5, r2
 8009cc0:	6922      	ldr	r2, [r4, #16]
 8009cc2:	bf08      	it	eq
 8009cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	bfc4      	itt	gt
 8009ccc:	1a9b      	subgt	r3, r3, r2
 8009cce:	18ed      	addgt	r5, r5, r3
 8009cd0:	341a      	adds	r4, #26
 8009cd2:	42b5      	cmp	r5, r6
 8009cd4:	d11a      	bne.n	8009d0c <_printf_common+0xcc>
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	e008      	b.n	8009cec <_printf_common+0xac>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4652      	mov	r2, sl
 8009cde:	4649      	mov	r1, r9
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	47c0      	blx	r8
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d103      	bne.n	8009cf0 <_printf_common+0xb0>
 8009ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf0:	3501      	adds	r5, #1
 8009cf2:	e7c4      	b.n	8009c7e <_printf_common+0x3e>
 8009cf4:	2030      	movs	r0, #48	; 0x30
 8009cf6:	18e1      	adds	r1, r4, r3
 8009cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cfc:	1c5a      	adds	r2, r3, #1
 8009cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d02:	4422      	add	r2, r4
 8009d04:	3302      	adds	r3, #2
 8009d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d0a:	e7c5      	b.n	8009c98 <_printf_common+0x58>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	4622      	mov	r2, r4
 8009d10:	4649      	mov	r1, r9
 8009d12:	4638      	mov	r0, r7
 8009d14:	47c0      	blx	r8
 8009d16:	3001      	adds	r0, #1
 8009d18:	d0e6      	beq.n	8009ce8 <_printf_common+0xa8>
 8009d1a:	3601      	adds	r6, #1
 8009d1c:	e7d9      	b.n	8009cd2 <_printf_common+0x92>
	...

08009d20 <_printf_i>:
 8009d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	460c      	mov	r4, r1
 8009d26:	7e27      	ldrb	r7, [r4, #24]
 8009d28:	4691      	mov	r9, r2
 8009d2a:	2f78      	cmp	r7, #120	; 0x78
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	469a      	mov	sl, r3
 8009d30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d36:	d807      	bhi.n	8009d48 <_printf_i+0x28>
 8009d38:	2f62      	cmp	r7, #98	; 0x62
 8009d3a:	d80a      	bhi.n	8009d52 <_printf_i+0x32>
 8009d3c:	2f00      	cmp	r7, #0
 8009d3e:	f000 80d9 	beq.w	8009ef4 <_printf_i+0x1d4>
 8009d42:	2f58      	cmp	r7, #88	; 0x58
 8009d44:	f000 80a4 	beq.w	8009e90 <_printf_i+0x170>
 8009d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d50:	e03a      	b.n	8009dc8 <_printf_i+0xa8>
 8009d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d56:	2b15      	cmp	r3, #21
 8009d58:	d8f6      	bhi.n	8009d48 <_printf_i+0x28>
 8009d5a:	a001      	add	r0, pc, #4	; (adr r0, 8009d60 <_printf_i+0x40>)
 8009d5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009d60:	08009db9 	.word	0x08009db9
 8009d64:	08009dcd 	.word	0x08009dcd
 8009d68:	08009d49 	.word	0x08009d49
 8009d6c:	08009d49 	.word	0x08009d49
 8009d70:	08009d49 	.word	0x08009d49
 8009d74:	08009d49 	.word	0x08009d49
 8009d78:	08009dcd 	.word	0x08009dcd
 8009d7c:	08009d49 	.word	0x08009d49
 8009d80:	08009d49 	.word	0x08009d49
 8009d84:	08009d49 	.word	0x08009d49
 8009d88:	08009d49 	.word	0x08009d49
 8009d8c:	08009edb 	.word	0x08009edb
 8009d90:	08009dfd 	.word	0x08009dfd
 8009d94:	08009ebd 	.word	0x08009ebd
 8009d98:	08009d49 	.word	0x08009d49
 8009d9c:	08009d49 	.word	0x08009d49
 8009da0:	08009efd 	.word	0x08009efd
 8009da4:	08009d49 	.word	0x08009d49
 8009da8:	08009dfd 	.word	0x08009dfd
 8009dac:	08009d49 	.word	0x08009d49
 8009db0:	08009d49 	.word	0x08009d49
 8009db4:	08009ec5 	.word	0x08009ec5
 8009db8:	680b      	ldr	r3, [r1, #0]
 8009dba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dbe:	1d1a      	adds	r2, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	600a      	str	r2, [r1, #0]
 8009dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e0a4      	b.n	8009f16 <_printf_i+0x1f6>
 8009dcc:	6825      	ldr	r5, [r4, #0]
 8009dce:	6808      	ldr	r0, [r1, #0]
 8009dd0:	062e      	lsls	r6, r5, #24
 8009dd2:	f100 0304 	add.w	r3, r0, #4
 8009dd6:	d50a      	bpl.n	8009dee <_printf_i+0xce>
 8009dd8:	6805      	ldr	r5, [r0, #0]
 8009dda:	600b      	str	r3, [r1, #0]
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	da03      	bge.n	8009de8 <_printf_i+0xc8>
 8009de0:	232d      	movs	r3, #45	; 0x2d
 8009de2:	426d      	negs	r5, r5
 8009de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de8:	230a      	movs	r3, #10
 8009dea:	485e      	ldr	r0, [pc, #376]	; (8009f64 <_printf_i+0x244>)
 8009dec:	e019      	b.n	8009e22 <_printf_i+0x102>
 8009dee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009df2:	6805      	ldr	r5, [r0, #0]
 8009df4:	600b      	str	r3, [r1, #0]
 8009df6:	bf18      	it	ne
 8009df8:	b22d      	sxthne	r5, r5
 8009dfa:	e7ef      	b.n	8009ddc <_printf_i+0xbc>
 8009dfc:	680b      	ldr	r3, [r1, #0]
 8009dfe:	6825      	ldr	r5, [r4, #0]
 8009e00:	1d18      	adds	r0, r3, #4
 8009e02:	6008      	str	r0, [r1, #0]
 8009e04:	0628      	lsls	r0, r5, #24
 8009e06:	d501      	bpl.n	8009e0c <_printf_i+0xec>
 8009e08:	681d      	ldr	r5, [r3, #0]
 8009e0a:	e002      	b.n	8009e12 <_printf_i+0xf2>
 8009e0c:	0669      	lsls	r1, r5, #25
 8009e0e:	d5fb      	bpl.n	8009e08 <_printf_i+0xe8>
 8009e10:	881d      	ldrh	r5, [r3, #0]
 8009e12:	2f6f      	cmp	r7, #111	; 0x6f
 8009e14:	bf0c      	ite	eq
 8009e16:	2308      	moveq	r3, #8
 8009e18:	230a      	movne	r3, #10
 8009e1a:	4852      	ldr	r0, [pc, #328]	; (8009f64 <_printf_i+0x244>)
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e22:	6866      	ldr	r6, [r4, #4]
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	bfa8      	it	ge
 8009e28:	6821      	ldrge	r1, [r4, #0]
 8009e2a:	60a6      	str	r6, [r4, #8]
 8009e2c:	bfa4      	itt	ge
 8009e2e:	f021 0104 	bicge.w	r1, r1, #4
 8009e32:	6021      	strge	r1, [r4, #0]
 8009e34:	b90d      	cbnz	r5, 8009e3a <_printf_i+0x11a>
 8009e36:	2e00      	cmp	r6, #0
 8009e38:	d04d      	beq.n	8009ed6 <_printf_i+0x1b6>
 8009e3a:	4616      	mov	r6, r2
 8009e3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e40:	fb03 5711 	mls	r7, r3, r1, r5
 8009e44:	5dc7      	ldrb	r7, [r0, r7]
 8009e46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e4a:	462f      	mov	r7, r5
 8009e4c:	42bb      	cmp	r3, r7
 8009e4e:	460d      	mov	r5, r1
 8009e50:	d9f4      	bls.n	8009e3c <_printf_i+0x11c>
 8009e52:	2b08      	cmp	r3, #8
 8009e54:	d10b      	bne.n	8009e6e <_printf_i+0x14e>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	07df      	lsls	r7, r3, #31
 8009e5a:	d508      	bpl.n	8009e6e <_printf_i+0x14e>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	6861      	ldr	r1, [r4, #4]
 8009e60:	4299      	cmp	r1, r3
 8009e62:	bfde      	ittt	le
 8009e64:	2330      	movle	r3, #48	; 0x30
 8009e66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e6e:	1b92      	subs	r2, r2, r6
 8009e70:	6122      	str	r2, [r4, #16]
 8009e72:	464b      	mov	r3, r9
 8009e74:	4621      	mov	r1, r4
 8009e76:	4640      	mov	r0, r8
 8009e78:	f8cd a000 	str.w	sl, [sp]
 8009e7c:	aa03      	add	r2, sp, #12
 8009e7e:	f7ff fedf 	bl	8009c40 <_printf_common>
 8009e82:	3001      	adds	r0, #1
 8009e84:	d14c      	bne.n	8009f20 <_printf_i+0x200>
 8009e86:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8a:	b004      	add	sp, #16
 8009e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e90:	4834      	ldr	r0, [pc, #208]	; (8009f64 <_printf_i+0x244>)
 8009e92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e96:	680e      	ldr	r6, [r1, #0]
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009e9e:	061f      	lsls	r7, r3, #24
 8009ea0:	600e      	str	r6, [r1, #0]
 8009ea2:	d514      	bpl.n	8009ece <_printf_i+0x1ae>
 8009ea4:	07d9      	lsls	r1, r3, #31
 8009ea6:	bf44      	itt	mi
 8009ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8009eac:	6023      	strmi	r3, [r4, #0]
 8009eae:	b91d      	cbnz	r5, 8009eb8 <_printf_i+0x198>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	f023 0320 	bic.w	r3, r3, #32
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	2310      	movs	r3, #16
 8009eba:	e7af      	b.n	8009e1c <_printf_i+0xfc>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	f043 0320 	orr.w	r3, r3, #32
 8009ec2:	6023      	str	r3, [r4, #0]
 8009ec4:	2378      	movs	r3, #120	; 0x78
 8009ec6:	4828      	ldr	r0, [pc, #160]	; (8009f68 <_printf_i+0x248>)
 8009ec8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ecc:	e7e3      	b.n	8009e96 <_printf_i+0x176>
 8009ece:	065e      	lsls	r6, r3, #25
 8009ed0:	bf48      	it	mi
 8009ed2:	b2ad      	uxthmi	r5, r5
 8009ed4:	e7e6      	b.n	8009ea4 <_printf_i+0x184>
 8009ed6:	4616      	mov	r6, r2
 8009ed8:	e7bb      	b.n	8009e52 <_printf_i+0x132>
 8009eda:	680b      	ldr	r3, [r1, #0]
 8009edc:	6826      	ldr	r6, [r4, #0]
 8009ede:	1d1d      	adds	r5, r3, #4
 8009ee0:	6960      	ldr	r0, [r4, #20]
 8009ee2:	600d      	str	r5, [r1, #0]
 8009ee4:	0635      	lsls	r5, r6, #24
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	d501      	bpl.n	8009eee <_printf_i+0x1ce>
 8009eea:	6018      	str	r0, [r3, #0]
 8009eec:	e002      	b.n	8009ef4 <_printf_i+0x1d4>
 8009eee:	0671      	lsls	r1, r6, #25
 8009ef0:	d5fb      	bpl.n	8009eea <_printf_i+0x1ca>
 8009ef2:	8018      	strh	r0, [r3, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4616      	mov	r6, r2
 8009ef8:	6123      	str	r3, [r4, #16]
 8009efa:	e7ba      	b.n	8009e72 <_printf_i+0x152>
 8009efc:	680b      	ldr	r3, [r1, #0]
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	600a      	str	r2, [r1, #0]
 8009f02:	681e      	ldr	r6, [r3, #0]
 8009f04:	2100      	movs	r1, #0
 8009f06:	4630      	mov	r0, r6
 8009f08:	6862      	ldr	r2, [r4, #4]
 8009f0a:	f000 f831 	bl	8009f70 <memchr>
 8009f0e:	b108      	cbz	r0, 8009f14 <_printf_i+0x1f4>
 8009f10:	1b80      	subs	r0, r0, r6
 8009f12:	6060      	str	r0, [r4, #4]
 8009f14:	6863      	ldr	r3, [r4, #4]
 8009f16:	6123      	str	r3, [r4, #16]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1e:	e7a8      	b.n	8009e72 <_printf_i+0x152>
 8009f20:	4632      	mov	r2, r6
 8009f22:	4649      	mov	r1, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	47d0      	blx	sl
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d0ab      	beq.n	8009e86 <_printf_i+0x166>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	079b      	lsls	r3, r3, #30
 8009f32:	d413      	bmi.n	8009f5c <_printf_i+0x23c>
 8009f34:	68e0      	ldr	r0, [r4, #12]
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	4298      	cmp	r0, r3
 8009f3a:	bfb8      	it	lt
 8009f3c:	4618      	movlt	r0, r3
 8009f3e:	e7a4      	b.n	8009e8a <_printf_i+0x16a>
 8009f40:	2301      	movs	r3, #1
 8009f42:	4632      	mov	r2, r6
 8009f44:	4649      	mov	r1, r9
 8009f46:	4640      	mov	r0, r8
 8009f48:	47d0      	blx	sl
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d09b      	beq.n	8009e86 <_printf_i+0x166>
 8009f4e:	3501      	adds	r5, #1
 8009f50:	68e3      	ldr	r3, [r4, #12]
 8009f52:	9903      	ldr	r1, [sp, #12]
 8009f54:	1a5b      	subs	r3, r3, r1
 8009f56:	42ab      	cmp	r3, r5
 8009f58:	dcf2      	bgt.n	8009f40 <_printf_i+0x220>
 8009f5a:	e7eb      	b.n	8009f34 <_printf_i+0x214>
 8009f5c:	2500      	movs	r5, #0
 8009f5e:	f104 0619 	add.w	r6, r4, #25
 8009f62:	e7f5      	b.n	8009f50 <_printf_i+0x230>
 8009f64:	0800a255 	.word	0x0800a255
 8009f68:	0800a266 	.word	0x0800a266

08009f6c <__retarget_lock_acquire_recursive>:
 8009f6c:	4770      	bx	lr

08009f6e <__retarget_lock_release_recursive>:
 8009f6e:	4770      	bx	lr

08009f70 <memchr>:
 8009f70:	4603      	mov	r3, r0
 8009f72:	b510      	push	{r4, lr}
 8009f74:	b2c9      	uxtb	r1, r1
 8009f76:	4402      	add	r2, r0
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	d101      	bne.n	8009f82 <memchr+0x12>
 8009f7e:	2000      	movs	r0, #0
 8009f80:	e003      	b.n	8009f8a <memchr+0x1a>
 8009f82:	7804      	ldrb	r4, [r0, #0]
 8009f84:	3301      	adds	r3, #1
 8009f86:	428c      	cmp	r4, r1
 8009f88:	d1f6      	bne.n	8009f78 <memchr+0x8>
 8009f8a:	bd10      	pop	{r4, pc}

08009f8c <memmove>:
 8009f8c:	4288      	cmp	r0, r1
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	eb01 0402 	add.w	r4, r1, r2
 8009f94:	d902      	bls.n	8009f9c <memmove+0x10>
 8009f96:	4284      	cmp	r4, r0
 8009f98:	4623      	mov	r3, r4
 8009f9a:	d807      	bhi.n	8009fac <memmove+0x20>
 8009f9c:	1e43      	subs	r3, r0, #1
 8009f9e:	42a1      	cmp	r1, r4
 8009fa0:	d008      	beq.n	8009fb4 <memmove+0x28>
 8009fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009faa:	e7f8      	b.n	8009f9e <memmove+0x12>
 8009fac:	4601      	mov	r1, r0
 8009fae:	4402      	add	r2, r0
 8009fb0:	428a      	cmp	r2, r1
 8009fb2:	d100      	bne.n	8009fb6 <memmove+0x2a>
 8009fb4:	bd10      	pop	{r4, pc}
 8009fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fbe:	e7f7      	b.n	8009fb0 <memmove+0x24>

08009fc0 <_realloc_r>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	4607      	mov	r7, r0
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	b921      	cbnz	r1, 8009fd4 <_realloc_r+0x14>
 8009fca:	4611      	mov	r1, r2
 8009fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fd0:	f7ff bc44 	b.w	800985c <_malloc_r>
 8009fd4:	b922      	cbnz	r2, 8009fe0 <_realloc_r+0x20>
 8009fd6:	f7ff fbf5 	bl	80097c4 <_free_r>
 8009fda:	4625      	mov	r5, r4
 8009fdc:	4628      	mov	r0, r5
 8009fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fe0:	f000 f814 	bl	800a00c <_malloc_usable_size_r>
 8009fe4:	42a0      	cmp	r0, r4
 8009fe6:	d20f      	bcs.n	800a008 <_realloc_r+0x48>
 8009fe8:	4621      	mov	r1, r4
 8009fea:	4638      	mov	r0, r7
 8009fec:	f7ff fc36 	bl	800985c <_malloc_r>
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d0f2      	beq.n	8009fdc <_realloc_r+0x1c>
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4622      	mov	r2, r4
 8009ffa:	f7ff fbcd 	bl	8009798 <memcpy>
 8009ffe:	4631      	mov	r1, r6
 800a000:	4638      	mov	r0, r7
 800a002:	f7ff fbdf 	bl	80097c4 <_free_r>
 800a006:	e7e9      	b.n	8009fdc <_realloc_r+0x1c>
 800a008:	4635      	mov	r5, r6
 800a00a:	e7e7      	b.n	8009fdc <_realloc_r+0x1c>

0800a00c <_malloc_usable_size_r>:
 800a00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a010:	1f18      	subs	r0, r3, #4
 800a012:	2b00      	cmp	r3, #0
 800a014:	bfbc      	itt	lt
 800a016:	580b      	ldrlt	r3, [r1, r0]
 800a018:	18c0      	addlt	r0, r0, r3
 800a01a:	4770      	bx	lr

0800a01c <_init>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr

0800a028 <_fini>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr
