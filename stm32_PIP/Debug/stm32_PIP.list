
stm32_PIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f84  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2d8  0800a2d8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2d8  0800a2d8  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2d8  0800a2d8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d8  0800a2d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2dc  0800a2dc  0001a2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800a2e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000107c  200000a0  0800a380  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000111c  0800a380  0002111c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d958  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e23  00000000  00000000  0003da21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  00041848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  00042ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1fc  00000000  00000000  00044408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019279  00000000  00000000  0005f604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b650  00000000  00000000  0007887d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000636c  00000000  00000000  00113f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a07c 	.word	0x0800a07c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	0800a07c 	.word	0x0800a07c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800070a:	4619      	mov	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	78fa      	ldrb	r2, [r7, #3]
 8000710:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000718:	3301      	adds	r3, #1
 800071a:	425a      	negs	r2, r3
 800071c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000720:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000724:	bf58      	it	pl
 8000726:	4253      	negpl	r3, r2
 8000728:	b2da      	uxtb	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000736:	2b80      	cmp	r3, #128	; 0x80
 8000738:	d113      	bne.n	8000762 <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2201      	movs	r2, #1
 800073e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000748:	3301      	adds	r3, #1
 800074a:	425a      	negs	r2, r3
 800074c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000754:	bf58      	it	pl
 8000756:	4253      	negpl	r3, r2
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8000760:	e00b      	b.n	800077a <RingAdd+0x82>
		xRingBuffer->overflow = false;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000770:	3301      	adds	r3, #1
 8000772:	b2da      	uxtb	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000794:	461a      	mov	r2, r3
 8000796:	6839      	ldr	r1, [r7, #0]
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f805 	bl	80007a8 <RingGetNBytes>
 800079e:	4603      	mov	r3, r0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	4613      	mov	r3, r2
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d002      	beq.n	80007c6 <RingGetNBytes+0x1e>
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <RingGetNBytes+0x22>
 80007c6:	2300      	movs	r3, #0
 80007c8:	e03e      	b.n	8000848 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b80      	cmp	r3, #128	; 0x80
 80007ce:	d901      	bls.n	80007d4 <RingGetNBytes+0x2c>
 80007d0:	2300      	movs	r3, #0
 80007d2:	e039      	b.n	8000848 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	75fb      	strb	r3, [r7, #23]
 80007d8:	e01b      	b.n	8000812 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80007e0:	4619      	mov	r1, r3
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	4413      	add	r3, r2
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	5c52      	ldrb	r2, [r2, r1]
 80007ec:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80007f4:	3301      	adds	r3, #1
 80007f6:	425a      	negs	r2, r3
 80007f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000800:	bf58      	it	pl
 8000802:	4253      	negpl	r3, r2
 8000804:	b2da      	uxtb	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800080c:	7dfb      	ldrb	r3, [r7, #23]
 800080e:	3301      	adds	r3, #1
 8000810:	75fb      	strb	r3, [r7, #23]
 8000812:	7dfa      	ldrb	r2, [r7, #23]
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	429a      	cmp	r2, r3
 8000818:	d205      	bcs.n	8000826 <RingGetNBytes+0x7e>
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000820:	7dfa      	ldrb	r2, [r7, #23]
 8000822:	429a      	cmp	r2, r3
 8000824:	d3d9      	bcc.n	80007da <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b2da      	uxtb	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	f000 f805 	bl	8000850 <RingClear>

	return uCounter;
 8000846:	7dfb      	ldrb	r3, [r7, #23]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af02      	add	r7, sp, #8
 800088a:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 800088c:	4b42      	ldr	r3, [pc, #264]	; (8000998 <ModbusInit+0x114>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d87d      	bhi.n	8000990 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	33bc      	adds	r3, #188	; 0xbc
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ffd9 	bl	8000850 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	d109      	bne.n	80008ba <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80008a6:	4a3d      	ldr	r2, [pc, #244]	; (800099c <ModbusInit+0x118>)
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	483d      	ldr	r0, [pc, #244]	; (80009a0 <ModbusInit+0x11c>)
 80008ac:	f005 fd5c 	bl	8006368 <osThreadNew>
 80008b0:	4602      	mov	r2, r0
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80008b8:	e033      	b.n	8000922 <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d12e      	bne.n	8000920 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 80008c2:	4a38      	ldr	r2, [pc, #224]	; (80009a4 <ModbusInit+0x120>)
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4838      	ldr	r0, [pc, #224]	; (80009a8 <ModbusInit+0x124>)
 80008c8:	f005 fd4e 	bl	8006368 <osThreadNew>
 80008cc:	4602      	mov	r2, r0
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80008da:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80008e2:	4a32      	ldr	r2, [pc, #200]	; (80009ac <ModbusInit+0x128>)
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	4831      	ldr	r0, [pc, #196]	; (80009b0 <ModbusInit+0x12c>)
 80008ea:	f008 fa17 	bl	8008d1c <xTimerCreate>
 80008ee:	4602      	mov	r2, r0
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8000900:	e7fe      	b.n	8000900 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8000902:	4a2c      	ldr	r2, [pc, #176]	; (80009b4 <ModbusInit+0x130>)
 8000904:	2110      	movs	r1, #16
 8000906:	2002      	movs	r0, #2
 8000908:	f005 fea2 	bl	8006650 <osMessageQueueNew>
 800090c:	4602      	mov	r2, r0
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800091e:	e7fe      	b.n	800091e <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8000920:	e7fe      	b.n	8000920 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000928:	2b00      	cmp	r3, #0
 800092a:	d100      	bne.n	800092e <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800092c:	e7fe      	b.n	800092c <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8000934:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <ModbusInit+0x134>)
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2200      	movs	r2, #0
 800093a:	2105      	movs	r1, #5
 800093c:	481f      	ldr	r0, [pc, #124]	; (80009bc <ModbusInit+0x138>)
 800093e:	f008 f9ed 	bl	8008d1c <xTimerCreate>
 8000942:	4602      	mov	r2, r0
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d100      	bne.n	8000956 <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8000954:	e7fe      	b.n	8000954 <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8000956:	4a1a      	ldr	r2, [pc, #104]	; (80009c0 <ModbusInit+0x13c>)
 8000958:	2101      	movs	r1, #1
 800095a:	2001      	movs	r0, #1
 800095c:	f005 fddc 	bl	8006518 <osSemaphoreNew>
 8000960:	4602      	mov	r2, r0
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d100      	bne.n	8000974 <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8000972:	e7fe      	b.n	8000972 <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <ModbusInit+0x114>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <ModbusInit+0x140>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <ModbusInit+0x114>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <ModbusInit+0x114>)
 800098c:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800098e:	e000      	b.n	8000992 <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 8000990:	e7fe      	b.n	8000990 <ModbusInit+0x10c>
}
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200000bc 	.word	0x200000bc
 800099c:	0800a184 	.word	0x0800a184
 80009a0:	08000bb1 	.word	0x08000bb1
 80009a4:	0800a1a8 	.word	0x0800a1a8
 80009a8:	08001025 	.word	0x08001025
 80009ac:	08000b55 	.word	0x08000b55
 80009b0:	0800a0d8 	.word	0x0800a0d8
 80009b4:	0800a16c 	.word	0x0800a16c
 80009b8:	08000ad1 	.word	0x08000ad1
 80009bc:	0800a0e8 	.word	0x0800a0e8
 80009c0:	0800a1cc 	.word	0x0800a1cc
 80009c4:	20000dd8 	.word	0x20000dd8

080009c8 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d00f      	beq.n	80009fa <ModbusStart+0x32>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d00a      	beq.n	80009fa <ModbusStart+0x32>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d005      	beq.n	80009fa <ModbusStart+0x32>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d000      	beq.n	80009fa <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 80009f8:	e7fe      	b.n	80009f8 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d100      	bne.n	8000a06 <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8000a04:	e7fe      	b.n	8000a04 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d004      	beq.n	8000a1a <ModbusStart+0x52>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d13c      	bne.n	8000a94 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d007      	beq.n	8000a32 <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68d8      	ldr	r0, [r3, #12]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	8a1b      	ldrh	r3, [r3, #16]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f003 f9b1 	bl	8003d94 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d105      	bne.n	8000a46 <ModbusStart+0x7e>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d100      	bne.n	8000a46 <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8000a44:	e7fe      	b.n	8000a44 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8000a46:	bf00      	nop
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f005 f9d8 	bl	8005e02 <HAL_UART_GetState>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b20      	cmp	r3, #32
 8000a56:	d1f7      	bne.n	8000a48 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6858      	ldr	r0, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	33a6      	adds	r3, #166	; 0xa6
 8000a60:	2201      	movs	r2, #1
 8000a62:	4619      	mov	r1, r3
 8000a64:	f004 ff06 	bl	8005874 <HAL_UART_Receive_IT>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d000      	beq.n	8000a70 <ModbusStart+0xa8>
          {
                while(1)
 8000a6e:	e7fe      	b.n	8000a6e <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7a1b      	ldrb	r3, [r3, #8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <ModbusStart+0xba>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d100      	bne.n	8000a82 <ModbusStart+0xba>
          {
        	  while(1)
 8000a80:	e7fe      	b.n	8000a80 <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7a1b      	ldrb	r3, [r3, #8]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d104      	bne.n	8000a94 <ModbusStart+0xcc>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d100      	bne.n	8000a94 <ModbusStart+0xcc>
          {
             	  while(1)
 8000a92:	e7fe      	b.n	8000a92 <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	e02a      	b.n	8000b34 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8000ade:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <vTimerCallbackT35+0x7c>)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d11e      	bne.n	8000b2e <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8000af0:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <vTimerCallbackT35+0x7c>)
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d10c      	bne.n	8000b18 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <vTimerCallbackT35+0x7c>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2200      	movs	r2, #0
 8000b12:	2103      	movs	r1, #3
 8000b14:	f008 f956 	bl	8008dc4 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8000b18:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <vTimerCallbackT35+0x7c>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8000b24:	2300      	movs	r3, #0
 8000b26:	2203      	movs	r2, #3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f007 feed 	bl	8008908 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <vTimerCallbackT35+0x80>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	dbce      	blt.n	8000ade <vTimerCallbackT35+0xe>
		}

	}
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000dd8 	.word	0x20000dd8
 8000b50:	200000bc 	.word	0x200000bc

08000b54 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	e017      	b.n	8000b92 <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8000b62:	4a11      	ldr	r2, [pc, #68]	; (8000ba8 <vTimerCallbackTimeout+0x54>)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d10b      	bne.n	8000b8c <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <vTimerCallbackTimeout+0x54>)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8000b80:	2300      	movs	r3, #0
 8000b82:	2203      	movs	r2, #3
 8000b84:	f06f 0107 	mvn.w	r1, #7
 8000b88:	f007 febe 	bl	8008908 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <vTimerCallbackTimeout+0x58>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	dbe1      	blt.n	8000b62 <vTimerCallbackTimeout+0xe>
		}

	}

}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000dd8 	.word	0x20000dd8
 8000bac:	200000bc 	.word	0x200000bc

08000bb0 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d004      	beq.n	8000bd6 <StartTaskModbusSlave+0x26>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d117      	bne.n	8000c06 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8000bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f007 fe4c 	bl	8008878 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f000 fbe9 	bl	80013b8 <getRxBuffer>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f113 0f03 	cmn.w	r3, #3
 8000bec:	d10b      	bne.n	8000c06 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	22fd      	movs	r2, #253	; 0xfd
 8000bf2:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8000c04:	e0a1      	b.n	8000d4a <StartTaskModbusSlave+0x19a>
	  }
	   //modH->u8BufferSize = RingCountBytes(&modH->xBufferRX);
   }

   if (modH->u8BufferSize < 7)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000c0c:	2b06      	cmp	r3, #6
 8000c0e:	d80b      	bhi.n	8000c28 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	22fa      	movs	r2, #250	; 0xfa
 8000c14:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	  {
		  netconn_close(modH->newconn);
		  netconn_delete(modH->newconn);
	  }
  #endif
	  continue;
 8000c26:	e090      	b.n	8000d4a <StartTaskModbusSlave+0x19a>
    }

		// check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)   //for Modbus TCP this is not validated, user should modify accordingly if needed
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	7cda      	ldrb	r2, [r3, #19]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	7a1b      	ldrb	r3, [r3, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8089 	bne.w	8000d48 <StartTaskModbusSlave+0x198>
        #endif
		continue;
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f000 fc08 	bl	800144c <validateRequest>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00c      	beq.n	8000c60 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8000c46:	7afb      	ldrb	r3, [r7, #11]
 8000c48:	68f9      	ldr	r1, [r7, #12]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fda0 	bl	8001790 <buildException>
			sendTxBuffer(modH);
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 fdbb 	bl	80017cc <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8000c56:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	749a      	strb	r2, [r3, #18]
		{
		    netconn_close(modH->newconn);
		  	netconn_delete(modH->newconn);
		}
        #endif
		continue;
 8000c5e:	e074      	b.n	8000d4a <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2200      	movs	r2, #0
 8000c64:	749a      	strb	r2, [r3, #18]
	 xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	4618      	mov	r0, r3
 8000c72:	f006 fae7 	bl	8007244 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	7d1b      	ldrb	r3, [r3, #20]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d859      	bhi.n	8000d34 <StartTaskModbusSlave+0x184>
 8000c80:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <StartTaskModbusSlave+0xd8>)
 8000c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c86:	bf00      	nop
 8000c88:	08000cc9 	.word	0x08000cc9
 8000c8c:	08000cc9 	.word	0x08000cc9
 8000c90:	08000cdb 	.word	0x08000cdb
 8000c94:	08000cdb 	.word	0x08000cdb
 8000c98:	08000ced 	.word	0x08000ced
 8000c9c:	08000cff 	.word	0x08000cff
 8000ca0:	08000d35 	.word	0x08000d35
 8000ca4:	08000d35 	.word	0x08000d35
 8000ca8:	08000d35 	.word	0x08000d35
 8000cac:	08000d35 	.word	0x08000d35
 8000cb0:	08000d35 	.word	0x08000d35
 8000cb4:	08000d35 	.word	0x08000d35
 8000cb8:	08000d35 	.word	0x08000d35
 8000cbc:	08000d35 	.word	0x08000d35
 8000cc0:	08000d11 	.word	0x08000d11
 8000cc4:	08000d23 	.word	0x08000d23
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 fe0f 	bl	80018ec <process_FC1>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000cd8:	e02d      	b.n	8000d36 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f000 febb 	bl	8001a56 <process_FC3>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000cea:	e024      	b.n	8000d36 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f000 ff1d 	bl	8001b2c <process_FC5>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000cfc:	e01b      	b.n	8000d36 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 ff6d 	bl	8001bde <process_FC6>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000d0e:	e012      	b.n	8000d36 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f000 ff96 	bl	8001c42 <process_FC15>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000d20:	e009      	b.n	8000d36 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f001 f81b 	bl	8001d5e <process_FC16>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000d32:	e000      	b.n	8000d36 <StartTaskModbusSlave+0x186>
			default:
				break;
 8000d34:	bf00      	nop
	    netconn_close(modH->newconn);
	  	netconn_delete(modH->newconn);
	 }
   #endif

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	f006 f809 	bl	8006d58 <xQueueGenericSend>

	 continue;
 8000d46:	e000      	b.n	8000d4a <StartTaskModbusSlave+0x19a>
		continue;
 8000d48:	bf00      	nop
  {
 8000d4a:	e737      	b.n	8000bbc <StartTaskModbusSlave+0xc>

08000d4c <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	f107 001c 	add.w	r0, r7, #28
 8000d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f006 fa69 	bl	8007244 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7a1b      	ldrb	r3, [r3, #8]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SendQuery+0x32>
 8000d7a:	23ff      	movs	r3, #255	; 0xff
 8000d7c:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SendQuery+0x40>
 8000d88:	23fe      	movs	r3, #254	; 0xfe
 8000d8a:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8000d8c:	7f3b      	ldrb	r3, [r7, #28]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <SendQuery+0x4c>
 8000d92:	7f3b      	ldrb	r3, [r7, #28]
 8000d94:	2bf7      	cmp	r3, #247	; 0xf7
 8000d96:	d901      	bls.n	8000d9c <SendQuery+0x50>
 8000d98:	23f7      	movs	r3, #247	; 0xf7
 8000d9a:	73bb      	strb	r3, [r7, #14]

	if(error)
 8000d9c:	7bbb      	ldrb	r3, [r7, #14]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00e      	beq.n	8000dc0 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 8000da2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	f005 ffcf 	bl	8006d58 <xQueueGenericSend>
		 return error;
 8000dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbe:	e129      	b.n	8001014 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8000dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8000dc8:	7f3a      	ldrb	r2, [r7, #28]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8000dce:	7f7a      	ldrb	r2, [r7, #29]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8000dd4:	8bfb      	ldrh	r3, [r7, #30]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8000de0:	8bfb      	ldrh	r3, [r7, #30]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8000de8:	7f7b      	ldrb	r3, [r7, #29]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	f200 80fe 	bhi.w	8000fee <SendQuery+0x2a2>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <SendQuery+0xac>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000e39 	.word	0x08000e39
 8000dfc:	08000e39 	.word	0x08000e39
 8000e00:	08000e39 	.word	0x08000e39
 8000e04:	08000e39 	.word	0x08000e39
 8000e08:	08000e57 	.word	0x08000e57
 8000e0c:	08000e79 	.word	0x08000e79
 8000e10:	08000fef 	.word	0x08000fef
 8000e14:	08000fef 	.word	0x08000fef
 8000e18:	08000fef 	.word	0x08000fef
 8000e1c:	08000fef 	.word	0x08000fef
 8000e20:	08000fef 	.word	0x08000fef
 8000e24:	08000fef 	.word	0x08000fef
 8000e28:	08000fef 	.word	0x08000fef
 8000e2c:	08000fef 	.word	0x08000fef
 8000e30:	08000e9b 	.word	0x08000e9b
 8000e34:	08000f59 	.word	0x08000f59
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000e38:	8c3b      	ldrh	r3, [r7, #32]
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000e44:	8c3b      	ldrh	r3, [r7, #32]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2206      	movs	r2, #6
 8000e50:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000e54:	e0cb      	b.n	8000fee <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SendQuery+0x116>
 8000e5e:	22ff      	movs	r2, #255	; 0xff
 8000e60:	e000      	b.n	8000e64 <SendQuery+0x118>
 8000e62:	2200      	movs	r2, #0
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2206      	movs	r2, #6
 8000e72:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000e76:	e0ba      	b.n	8000fee <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2206      	movs	r2, #6
 8000e94:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000e98:	e0a9      	b.n	8000fee <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8000e9a:	8c3b      	ldrh	r3, [r7, #32]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 8000ea2:	7a7b      	ldrb	r3, [r7, #9]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000ea8:	8c3b      	ldrh	r3, [r7, #32]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <SendQuery+0x174>
	    {
	        u8bytesno++;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8000eba:	7a7b      	ldrb	r3, [r7, #9]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000ec0:	8c3b      	ldrh	r3, [r7, #32]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000ecc:	8c3b      	ldrh	r3, [r7, #32]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	81bb      	strh	r3, [r7, #12]
 8000ee6:	e031      	b.n	8000f4c <SendQuery+0x200>
	    {
	        if(i%2)
 8000ee8:	89bb      	ldrh	r3, [r7, #12]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00f      	beq.n	8000f14 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 8000ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef6:	89bb      	ldrh	r3, [r7, #12]
 8000ef8:	085b      	lsrs	r3, r3, #1
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f08:	4619      	mov	r1, r3
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	440b      	add	r3, r1
 8000f10:	74da      	strb	r2, [r3, #19]
 8000f12:	e010      	b.n	8000f36 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 8000f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	085b      	lsrs	r3, r3, #1
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	440b      	add	r3, r1
 8000f34:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000f46:	89bb      	ldrh	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	81bb      	strh	r3, [r7, #12]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	89ba      	ldrh	r2, [r7, #12]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d3c8      	bcc.n	8000ee8 <SendQuery+0x19c>
	    }
	    break;
 8000f56:	e04a      	b.n	8000fee <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000f58:	8c3b      	ldrh	r3, [r7, #32]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000f64:	8c3b      	ldrh	r3, [r7, #32]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8000f6c:	8c3b      	ldrh	r3, [r7, #32]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	817b      	strh	r3, [r7, #10]
 8000f84:	e02e      	b.n	8000fe4 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8000f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f88:	897b      	ldrh	r3, [r7, #10]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8000fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb6:	897b      	ldrh	r3, [r7, #10]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	440b      	add	r3, r1
 8000fcc:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000fde:	897b      	ldrh	r3, [r7, #10]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	817b      	strh	r3, [r7, #10]
 8000fe4:	8c3b      	ldrh	r3, [r7, #32]
 8000fe6:	897a      	ldrh	r2, [r7, #10]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3cc      	bcc.n	8000f86 <SendQuery+0x23a>
	    }
	    break;
 8000fec:	bf00      	nop
	}

	sendTxBuffer(modH);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fbec 	bl	80017cc <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	f005 feaa 	bl	8006d58 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	749a      	strb	r2, [r3, #18]
	return 0;
 8001012:	2300      	movs	r3, #0


}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101e:	b004      	add	sp, #16
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001036:	f107 010c 	add.w	r1, r7, #12
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	4618      	mov	r0, r3
 8001040:	f006 f820 	bl	8007084 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001050:	f7ff fe7c 	bl	8000d4c <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	2001      	movs	r0, #1
 800105a:	f007 fc0d 	bl	8008878 <ulTaskNotifyTake>
 800105e:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	2200      	movs	r2, #0
 8001064:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d018      	beq.n	800109e <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	22f8      	movs	r2, #248	; 0xf8
 8001078:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001080:	3301      	adds	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 800108a:	69b8      	ldr	r0, [r7, #24]
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001092:	4619      	mov	r1, r3
 8001094:	2300      	movs	r3, #0
 8001096:	2203      	movs	r2, #3
 8001098:	f007 fc36 	bl	8008908 <xTaskGenericNotify>
    	  continue;
 800109c:	e097      	b.n	80011ce <StartTaskModbusMaster+0x1aa>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 800109e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010a0:	f000 f98a 	bl	80013b8 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d818      	bhi.n	80010e0 <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	22fa      	movs	r2, #250	; 0xfa
 80010ba:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80010c2:	3301      	adds	r3, #1
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80010cc:	69b8      	ldr	r0, [r7, #24]
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80010d4:	4619      	mov	r1, r3
 80010d6:	2300      	movs	r3, #0
 80010d8:	2203      	movs	r2, #3
 80010da:	f007 fc15 	bl	8008908 <xTaskGenericNotify>
		  continue;
 80010de:	e076      	b.n	80011ce <StartTaskModbusMaster+0x1aa>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80010e6:	2300      	movs	r3, #0
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2300      	movs	r3, #0
 80010ec:	2200      	movs	r2, #0
 80010ee:	2103      	movs	r1, #3
 80010f0:	f007 fe68 	bl	8008dc4 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 80010f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010f6:	f000 f8f1 	bl	80012dc <validateAnswer>
 80010fa:	4603      	mov	r3, r0
 80010fc:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 80010fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d010      	beq.n	8001128 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	2200      	movs	r2, #0
 800110a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	7ffa      	ldrb	r2, [r7, #31]
 8001112:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8001114:	69b8      	ldr	r0, [r7, #24]
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	f993 3012 	ldrsb.w	r3, [r3, #18]
 800111c:	4619      	mov	r1, r3
 800111e:	2300      	movs	r3, #0
 8001120:	2203      	movs	r2, #3
 8001122:	f007 fbf1 	bl	8008908 <xTaskGenericNotify>
	     continue;
 8001126:	e052      	b.n	80011ce <StartTaskModbusMaster+0x1aa>
	  }

	  modH->i8lastError = u8exception;
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	7ffa      	ldrb	r2, [r7, #31]
 800112c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	4618      	mov	r0, r3
 800113a:	f006 f883 	bl	8007244 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	7d1b      	ldrb	r3, [r3, #20]
 8001142:	3b01      	subs	r3, #1
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d82b      	bhi.n	80011a0 <StartTaskModbusMaster+0x17c>
 8001148:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <StartTaskModbusMaster+0x12c>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001191 	.word	0x08001191
 8001154:	08001191 	.word	0x08001191
 8001158:	08001199 	.word	0x08001199
 800115c:	08001199 	.word	0x08001199
 8001160:	080011a1 	.word	0x080011a1
 8001164:	080011a1 	.word	0x080011a1
 8001168:	080011a1 	.word	0x080011a1
 800116c:	080011a1 	.word	0x080011a1
 8001170:	080011a1 	.word	0x080011a1
 8001174:	080011a1 	.word	0x080011a1
 8001178:	080011a1 	.word	0x080011a1
 800117c:	080011a1 	.word	0x080011a1
 8001180:	080011a1 	.word	0x080011a1
 8001184:	080011a1 	.word	0x080011a1
 8001188:	080011a1 	.word	0x080011a1
 800118c:	080011a1 	.word	0x080011a1
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8001190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001192:	f000 f81d 	bl	80011d0 <get_FC1>
	      break;
 8001196:	e004      	b.n	80011a2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8001198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119a:	f000 f870 	bl	800127e <get_FC3>
	      break;
 800119e:	e000      	b.n	80011a2 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 80011a0:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80011b0:	2300      	movs	r3, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	f005 fdcf 	bl	8006d58 <xQueueGenericSend>
	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 80011ba:	69b8      	ldr	r0, [r7, #24]
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80011c2:	4619      	mov	r1, r3
 80011c4:	2300      	movs	r3, #0
 80011c6:	2203      	movs	r2, #3
 80011c8:	f007 fb9e 	bl	8008908 <xTaskGenericNotify>
	  continue;
 80011cc:	bf00      	nop
  {
 80011ce:	e72f      	b.n	8001030 <StartTaskModbusMaster+0xc>

080011d0 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80011d8:	2303      	movs	r3, #3
 80011da:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
 80011e0:	e043      	b.n	800126a <get_FC1+0x9a>

        if(i%2)
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d01c      	beq.n	8001228 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	4413      	add	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	7cd8      	ldrb	r0, [r3, #19]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	085b      	lsrs	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	085b      	lsrs	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	18d4      	adds	r4, r2, r3
 800121e:	f000 fa5f 	bl	80016e0 <word>
 8001222:	4603      	mov	r3, r0
 8001224:	8023      	strh	r3, [r4, #0]
 8001226:	e01d      	b.n	8001264 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b29b      	uxth	r3, r3
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	4413      	add	r3, r2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	7cd9      	ldrb	r1, [r3, #19]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	085b      	lsrs	r3, r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	18d4      	adds	r4, r2, r3
 800125c:	f000 fa40 	bl	80016e0 <word>
 8001260:	4603      	mov	r3, r0
 8001262:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	3301      	adds	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7d5b      	ldrb	r3, [r3, #21]
 800126e:	7bfa      	ldrb	r2, [r7, #15]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3b6      	bcc.n	80011e2 <get_FC1+0x12>
        }

     }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}

0800127e <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8001286:	2303      	movs	r3, #3
 8001288:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	73bb      	strb	r3, [r7, #14]
 800128e:	e018      	b.n	80012c2 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	7cd8      	ldrb	r0, [r3, #19]
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	3301      	adds	r3, #1
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	7cd9      	ldrb	r1, [r3, #19]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	18d4      	adds	r4, r2, r3
 80012ae:	f000 fa17 	bl	80016e0 <word>
 80012b2:	4603      	mov	r3, r0
 80012b4:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	3302      	adds	r3, #2
 80012ba:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	3301      	adds	r3, #1
 80012c0:	73bb      	strb	r3, [r7, #14]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7d5b      	ldrb	r3, [r3, #21]
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	7bba      	ldrb	r2, [r7, #14]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3df      	bcc.n	8001290 <get_FC3+0x12>
    }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd90      	pop	{r4, r7, pc}
	...

080012dc <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012ea:	3b02      	subs	r3, #2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	7cdb      	ldrb	r3, [r3, #19]
 80012f2:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012fc:	3b01      	subs	r3, #1
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	440b      	add	r3, r1
 8001302:	7cdb      	ldrb	r3, [r3, #19]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 800130a:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f103 0213 	add.w	r2, r3, #19
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001318:	3b02      	subs	r3, #2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f000 f9f0 	bl	8001704 <calcCRC>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	89bb      	ldrh	r3, [r7, #12]
 800132a:	4293      	cmp	r3, r2
 800132c:	d009      	beq.n	8001342 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001334:	3301      	adds	r3, #1
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 800133e:	23fc      	movs	r3, #252	; 0xfc
 8001340:	e034      	b.n	80013ac <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7d1b      	ldrb	r3, [r3, #20]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	da09      	bge.n	8001360 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8001352:	3301      	adds	r3, #1
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 800135c:	23fb      	movs	r3, #251	; 0xfb
 800135e:	e025      	b.n	80013ac <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8001364:	2300      	movs	r3, #0
 8001366:	73bb      	strb	r3, [r7, #14]
 8001368:	e00c      	b.n	8001384 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <validateAnswer+0xd8>)
 800136e:	5cd2      	ldrb	r2, [r2, r3]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7d1b      	ldrb	r3, [r3, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	d102      	bne.n	800137e <validateAnswer+0xa2>
        {
            isSupported = 1;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
            break;
 800137c:	e005      	b.n	800138a <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	3301      	adds	r3, #1
 8001382:	73bb      	strb	r3, [r7, #14]
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	2b07      	cmp	r3, #7
 8001388:	d9ef      	bls.n	800136a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800139c:	3301      	adds	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800a1dc 	.word	0x0800a1dc

080013b8 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d104      	bne.n	80013d4 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 fa80 	bl	80058d4 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	33bc      	adds	r3, #188	; 0xbc
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fa34 	bl	8000850 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 80013e8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80013ec:	81fb      	strh	r3, [r7, #14]
 80013ee:	e019      	b.n	8001424 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3313      	adds	r3, #19
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f7ff f9c1 	bl	8000784 <RingGetAllBytes>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001412:	3301      	adds	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001422:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6858      	ldr	r0, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	33a6      	adds	r3, #166	; 0xa6
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	f004 fa1b 	bl	8005874 <HAL_UART_Receive_IT>
	}

    return i16result;
 800143e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800145a:	3b02      	subs	r3, #2
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	4413      	add	r3, r2
 8001460:	7cdb      	ldrb	r3, [r3, #19]
 8001462:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800146c:	3b01      	subs	r3, #1
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	440b      	add	r3, r1
 8001472:	7cdb      	ldrb	r3, [r3, #19]
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800147a:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f103 0213 	add.w	r2, r3, #19
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001488:	3b02      	subs	r3, #2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f000 f938 	bl	8001704 <calcCRC>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	893b      	ldrh	r3, [r7, #8]
 800149a:	4293      	cmp	r3, r2
 800149c:	d009      	beq.n	80014b2 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 80014ae:	23fc      	movs	r3, #252	; 0xfc
 80014b0:	e10f      	b.n	80016d2 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	73bb      	strb	r3, [r7, #14]
 80014ba:	e00c      	b.n	80014d6 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	4a87      	ldr	r2, [pc, #540]	; (80016dc <validateRequest+0x290>)
 80014c0:	5cd2      	ldrb	r2, [r2, r3]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7d1b      	ldrb	r3, [r3, #20]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d102      	bne.n	80014d0 <validateRequest+0x84>
	        {
	            isSupported = 1;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
	            break;
 80014ce:	e005      	b.n	80014dc <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	3301      	adds	r3, #1
 80014d4:	73bb      	strb	r3, [r7, #14]
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	2b07      	cmp	r3, #7
 80014da:	d9ef      	bls.n	80014bc <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d009      	beq.n	80014fc <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80014ee:	3301      	adds	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0ea      	b.n	80016d2 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7d1b      	ldrb	r3, [r3, #20]
 8001508:	3b01      	subs	r3, #1
 800150a:	2b0f      	cmp	r3, #15
 800150c:	f200 80e0 	bhi.w	80016d0 <validateRequest+0x284>
 8001510:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <validateRequest+0xcc>)
 8001512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001516:	bf00      	nop
 8001518:	08001559 	.word	0x08001559
 800151c:	08001559 	.word	0x08001559
 8001520:	08001671 	.word	0x08001671
 8001524:	08001671 	.word	0x08001671
 8001528:	08001605 	.word	0x08001605
 800152c:	0800164d 	.word	0x0800164d
 8001530:	080016d1 	.word	0x080016d1
 8001534:	080016d1 	.word	0x080016d1
 8001538:	080016d1 	.word	0x080016d1
 800153c:	080016d1 	.word	0x080016d1
 8001540:	080016d1 	.word	0x080016d1
 8001544:	080016d1 	.word	0x080016d1
 8001548:	080016d1 	.word	0x080016d1
 800154c:	080016d1 	.word	0x080016d1
 8001550:	08001559 	.word	0x08001559
 8001554:	08001671 	.word	0x08001671
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7d5a      	ldrb	r2, [r3, #21]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d9b      	ldrb	r3, [r3, #22]
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f000 f8bc 	bl	80016e0 <word>
 8001568:	4603      	mov	r3, r0
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7dda      	ldrb	r2, [r3, #23]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7e1b      	ldrb	r3, [r3, #24]
 8001576:	4619      	mov	r1, r3
 8001578:	4610      	mov	r0, r2
 800157a:	f000 f8b1 	bl	80016e0 <word>
 800157e:	4603      	mov	r3, r0
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7dda      	ldrb	r2, [r3, #23]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7e1b      	ldrb	r3, [r3, #24]
 800158c:	4619      	mov	r1, r3
 800158e:	4610      	mov	r0, r2
 8001590:	f000 f8a6 	bl	80016e0 <word>
 8001594:	4603      	mov	r3, r0
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <validateRequest+0x15a>
 80015a0:	897b      	ldrh	r3, [r7, #10]
 80015a2:	3301      	adds	r3, #1
 80015a4:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 80015a6:	89ba      	ldrh	r2, [r7, #12]
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	4413      	add	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 80015b2:	4293      	cmp	r3, r2
 80015b4:	dd01      	ble.n	80015ba <validateRequest+0x16e>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e08b      	b.n	80016d2 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7dda      	ldrb	r2, [r3, #23]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7e1b      	ldrb	r3, [r3, #24]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4610      	mov	r0, r2
 80015c6:	f000 f88b 	bl	80016e0 <word>
 80015ca:	4603      	mov	r3, r0
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7dda      	ldrb	r2, [r3, #23]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e1b      	ldrb	r3, [r3, #24]
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f000 f880 	bl	80016e0 <word>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <validateRequest+0x1a6>
 80015ec:	897b      	ldrh	r3, [r7, #10]
 80015ee:	3301      	adds	r3, #1
 80015f0:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 80015f2:	897b      	ldrh	r3, [r7, #10]
 80015f4:	3305      	adds	r3, #5
 80015f6:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015fe:	d960      	bls.n	80016c2 <validateRequest+0x276>
 8001600:	2303      	movs	r3, #3
 8001602:	e066      	b.n	80016d2 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7d5a      	ldrb	r2, [r3, #21]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7d9b      	ldrb	r3, [r3, #22]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f000 f866 	bl	80016e0 <word>
 8001614:	4603      	mov	r3, r0
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7d5a      	ldrb	r2, [r3, #21]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7d9b      	ldrb	r3, [r3, #22]
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f000 f85b 	bl	80016e0 <word>
 800162a:	4603      	mov	r3, r0
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	b29b      	uxth	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <validateRequest+0x1f0>
 8001636:	89bb      	ldrh	r3, [r7, #12]
 8001638:	3301      	adds	r3, #1
 800163a:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001642:	89ba      	ldrh	r2, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d93e      	bls.n	80016c6 <validateRequest+0x27a>
 8001648:	2302      	movs	r3, #2
 800164a:	e042      	b.n	80016d2 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7d5a      	ldrb	r2, [r3, #21]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7d9b      	ldrb	r3, [r3, #22]
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f000 f842 	bl	80016e0 <word>
 800165c:	4603      	mov	r3, r0
 800165e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001666:	89ba      	ldrh	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d92e      	bls.n	80016ca <validateRequest+0x27e>
 800166c:	2302      	movs	r3, #2
 800166e:	e030      	b.n	80016d2 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7d5a      	ldrb	r2, [r3, #21]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7d9b      	ldrb	r3, [r3, #22]
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f000 f830 	bl	80016e0 <word>
 8001680:	4603      	mov	r3, r0
 8001682:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7dda      	ldrb	r2, [r3, #23]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7e1b      	ldrb	r3, [r3, #24]
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f000 f826 	bl	80016e0 <word>
 8001694:	4603      	mov	r3, r0
 8001696:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8001698:	89ba      	ldrh	r2, [r7, #12]
 800169a:	897b      	ldrh	r3, [r7, #10]
 800169c:	4413      	add	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 80016a4:	4293      	cmp	r3, r2
 80016a6:	dd01      	ble.n	80016ac <validateRequest+0x260>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e012      	b.n	80016d2 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 80016ac:	897b      	ldrh	r3, [r7, #10]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3305      	adds	r3, #5
 80016b4:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 80016b6:	897b      	ldrh	r3, [r7, #10]
 80016b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016bc:	d907      	bls.n	80016ce <validateRequest+0x282>
 80016be:	2303      	movs	r3, #3
 80016c0:	e007      	b.n	80016d2 <validateRequest+0x286>
	        break;
 80016c2:	bf00      	nop
 80016c4:	e004      	b.n	80016d0 <validateRequest+0x284>
	        break;
 80016c6:	bf00      	nop
 80016c8:	e002      	b.n	80016d0 <validateRequest+0x284>
	        break;
 80016ca:	bf00      	nop
 80016cc:	e000      	b.n	80016d0 <validateRequest+0x284>
	        break;
 80016ce:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 80016d0:	2300      	movs	r3, #0

}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	0800a1dc 	.word	0x0800a1dc

080016e0 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 80016f8:	89bb      	ldrh	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8001710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001714:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	74fb      	strb	r3, [r7, #19]
 800171a:	e023      	b.n	8001764 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	4053      	eors	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800172c:	2301      	movs	r3, #1
 800172e:	74bb      	strb	r3, [r7, #18]
 8001730:	e012      	b.n	8001758 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	617b      	str	r3, [r7, #20]
            if (flag)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <calcCRC+0x4e>
                temp ^= 0xA001;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 800174c:	f083 0301 	eor.w	r3, r3, #1
 8001750:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001752:	7cbb      	ldrb	r3, [r7, #18]
 8001754:	3301      	adds	r3, #1
 8001756:	74bb      	strb	r3, [r7, #18]
 8001758:	7cbb      	ldrb	r3, [r7, #18]
 800175a:	2b08      	cmp	r3, #8
 800175c:	d9e9      	bls.n	8001732 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800175e:	7cfb      	ldrb	r3, [r7, #19]
 8001760:	3301      	adds	r3, #1
 8001762:	74fb      	strb	r3, [r7, #19]
 8001764:	7cfa      	ldrb	r2, [r7, #19]
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3d7      	bcc.n	800171c <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	b29b      	uxth	r3, r3
 8001780:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	b29b      	uxth	r3, r3

}
 8001786:	4618      	mov	r0, r3
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7d1b      	ldrb	r3, [r3, #20]
 80017a0:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	7a1a      	ldrb	r2, [r3, #8]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	3b80      	subs	r3, #128	; 0x80
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f103 0213 	add.w	r2, r3, #19
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f7ff ff8e 	bl	8001704 <calcCRC>
 80017e8:	4603      	mov	r3, r0
 80017ea:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80017ec:	89fb      	ldrh	r3, [r7, #14]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017f8:	4619      	mov	r1, r3
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	440b      	add	r3, r1
 8001800:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001818:	4619      	mov	r1, r3
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	440b      	add	r3, r1
 8001822:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00c      	beq.n	8001856 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f004 fa78 	bl	8005d36 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68d8      	ldr	r0, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	8a1b      	ldrh	r3, [r3, #16]
 800184e:	2201      	movs	r2, #1
 8001850:	4619      	mov	r1, r3
 8001852:	f002 fa9f 	bl	8003d94 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6858      	ldr	r0, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f103 0113 	add.w	r1, r3, #19
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	f003 ffbf 	bl	80057ec <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 800186e:	21fa      	movs	r1, #250	; 0xfa
 8001870:	2001      	movs	r0, #1
 8001872:	f007 f801 	bl	8008878 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8001876:	bf00      	nop
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f7      	beq.n	8001878 <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00c      	beq.n	80018aa <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68d8      	ldr	r0, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	8a1b      	ldrh	r3, [r3, #16]
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	f002 fa7a 	bl	8003d94 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 fa79 	bl	8005d9c <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d10c      	bne.n	80018cc <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80018b8:	f006 fafe 	bl	8007eb8 <xTaskGetTickCount>
 80018bc:	4602      	mov	r2, r0
 80018be:	2300      	movs	r3, #0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2102      	movs	r1, #2
 80018c6:	4620      	mov	r0, r4
 80018c8:	f007 fa7c 	bl	8008dc4 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80018da:	3301      	adds	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7d5a      	ldrb	r2, [r3, #21]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7d9b      	ldrb	r3, [r3, #22]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f7ff feee 	bl	80016e0 <word>
 8001904:	4603      	mov	r3, r0
 8001906:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7dda      	ldrb	r2, [r3, #23]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7e1b      	ldrb	r3, [r3, #24]
 8001910:	4619      	mov	r1, r3
 8001912:	4610      	mov	r0, r2
 8001914:	f7ff fee4 	bl	80016e0 <word>
 8001918:	4603      	mov	r3, r0
 800191a:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 800191c:	8a3b      	ldrh	r3, [r7, #16]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	b29b      	uxth	r3, r3
 8001922:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8001924:	8a3b      	ldrh	r3, [r7, #16]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <process_FC1+0x4a>
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	3301      	adds	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7dfa      	ldrb	r2, [r7, #23]
 800193a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2203      	movs	r2, #3
 8001940:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800194a:	461a      	mov	r2, r3
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	4413      	add	r3, r2
 8001950:	3b01      	subs	r3, #1
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	2200      	movs	r2, #0
 8001958:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800195e:	2300      	movs	r3, #0
 8001960:	82bb      	strh	r3, [r7, #20]
 8001962:	e058      	b.n	8001a16 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8001964:	8a7a      	ldrh	r2, [r7, #18]
 8001966:	8abb      	ldrh	r3, [r7, #20]
 8001968:	4413      	add	r3, r2
 800196a:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 800196c:	89bb      	ldrh	r3, [r7, #12]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001972:	89bb      	ldrh	r3, [r7, #12]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	727b      	strb	r3, [r7, #9]

        bitWrite(
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	7a7b      	ldrb	r3, [r7, #9]
 800198e:	fa42 f303 	asr.w	r3, r2, r3
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d014      	beq.n	80019c4 <process_FC1+0xd8>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	7cda      	ldrb	r2, [r3, #19]
 80019a8:	7dbb      	ldrb	r3, [r7, #22]
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	440b      	add	r3, r1
 80019c0:	74da      	strb	r2, [r3, #19]
 80019c2:	e015      	b.n	80019f0 <process_FC1+0x104>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	7cda      	ldrb	r2, [r3, #19]
 80019d2:	7dbb      	ldrb	r3, [r7, #22]
 80019d4:	2101      	movs	r1, #1
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80019e6:	4013      	ands	r3, r2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	440b      	add	r3, r1
 80019ee:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 80019f0:	7dbb      	ldrb	r3, [r7, #22]
 80019f2:	3301      	adds	r3, #1
 80019f4:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80019f6:	7dbb      	ldrb	r3, [r7, #22]
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d909      	bls.n	8001a10 <process_FC1+0x124>
        {
            u8bitsno = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a06:	3301      	adds	r3, #1
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001a10:	8abb      	ldrh	r3, [r7, #20]
 8001a12:	3301      	adds	r3, #1
 8001a14:	82bb      	strh	r3, [r7, #20]
 8001a16:	8aba      	ldrh	r2, [r7, #20]
 8001a18:	8a3b      	ldrh	r3, [r7, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3a2      	bcc.n	8001964 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8001a1e:	8a3b      	ldrh	r3, [r7, #16]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <process_FC1+0x14e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a30:	3301      	adds	r3, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001a40:	3302      	adds	r3, #2
 8001a42:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fec1 	bl	80017cc <sendTxBuffer>
    return u8CopyBufferSize;
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7d5a      	ldrb	r2, [r3, #21]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7d9b      	ldrb	r3, [r3, #22]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f7ff fe39 	bl	80016e0 <word>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7dda      	ldrb	r2, [r3, #23]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7e1b      	ldrb	r3, [r3, #24]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f7ff fe2f 	bl	80016e0 <word>
 8001a82:	4603      	mov	r3, r0
 8001a84:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8001a98:	89bb      	ldrh	r3, [r7, #12]
 8001a9a:	81fb      	strh	r3, [r7, #14]
 8001a9c:	e032      	b.n	8001b04 <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001aa4:	89fb      	ldrh	r3, [r7, #14]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	440b      	add	r3, r1
 8001abe:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	881a      	ldrh	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	440b      	add	r3, r1
 8001aec:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001af4:	3301      	adds	r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	3301      	adds	r3, #1
 8001b02:	81fb      	strh	r3, [r7, #14]
 8001b04:	89fa      	ldrh	r2, [r7, #14]
 8001b06:	89b9      	ldrh	r1, [r7, #12]
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	440b      	add	r3, r1
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbc6      	blt.n	8001a9e <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001b16:	3302      	adds	r3, #2
 8001b18:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fe56 	bl	80017cc <sendTxBuffer>

    return u8CopyBufferSize;
 8001b20:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7d5a      	ldrb	r2, [r3, #21]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7d9b      	ldrb	r3, [r3, #22]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f7ff fdce 	bl	80016e0 <word>
 8001b44:	4603      	mov	r3, r0
 8001b46:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7ddb      	ldrb	r3, [r3, #23]
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d115      	bne.n	8001b8c <process_FC5+0x60>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b66:	89bb      	ldrh	r3, [r7, #12]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	8819      	ldrh	r1, [r3, #0]
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	2201      	movs	r2, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001b7e:	89bb      	ldrh	r3, [r7, #12]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4403      	add	r3, r0
 8001b84:	430a      	orrs	r2, r1
 8001b86:	b292      	uxth	r2, r2
 8001b88:	801a      	strh	r2, [r3, #0]
 8001b8a:	e016      	b.n	8001bba <process_FC5+0x8e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001b92:	89bb      	ldrh	r3, [r7, #12]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	7afb      	ldrb	r3, [r7, #11]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001bae:	89bb      	ldrh	r3, [r7, #12]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4403      	add	r3, r0
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2206      	movs	r2, #6
 8001bbe:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001bc8:	3302      	adds	r3, #2
 8001bca:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fdfd 	bl	80017cc <sendTxBuffer>

    return u8CopyBufferSize;
 8001bd2:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7d5a      	ldrb	r2, [r3, #21]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7d9b      	ldrb	r3, [r3, #22]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	f7ff fd75 	bl	80016e0 <word>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7dda      	ldrb	r2, [r3, #23]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7e1b      	ldrb	r3, [r3, #24]
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f7ff fd6b 	bl	80016e0 <word>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	89ba      	ldrh	r2, [r7, #12]
 8001c1c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2206      	movs	r2, #6
 8001c22:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fdcb 	bl	80017cc <sendTxBuffer>

    return u8CopyBufferSize;
 8001c36:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7d5a      	ldrb	r2, [r3, #21]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7d9b      	ldrb	r3, [r3, #22]
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f7ff fd43 	bl	80016e0 <word>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7dda      	ldrb	r2, [r3, #23]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e1b      	ldrb	r3, [r3, #24]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f7ff fd39 	bl	80016e0 <word>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8001c76:	2307      	movs	r3, #7
 8001c78:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	82bb      	strh	r3, [r7, #20]
 8001c7e:	e058      	b.n	8001d32 <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8001c80:	8a7a      	ldrh	r2, [r7, #18]
 8001c82:	8abb      	ldrh	r3, [r7, #20]
 8001c84:	4413      	add	r3, r2
 8001c86:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8001c88:	89bb      	ldrh	r3, [r7, #12]
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001c8e:	89bb      	ldrh	r3, [r7, #12]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	7cdb      	ldrb	r3, [r3, #19]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	7dbb      	ldrb	r3, [r7, #22]
 8001ca4:	fa42 f303 	asr.w	r3, r2, r3
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8001cb6:	7a3b      	ldrb	r3, [r7, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <process_FC15+0xa6>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001cc2:	897b      	ldrh	r3, [r7, #10]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	8819      	ldrh	r1, [r3, #0]
 8001cca:	7a7b      	ldrb	r3, [r7, #9]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4403      	add	r3, r0
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e016      	b.n	8001d16 <process_FC15+0xd4>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	8819      	ldrh	r1, [r3, #0]
 8001cf6:	7a7b      	ldrb	r3, [r7, #9]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4403      	add	r3, r0
 8001d10:	400a      	ands	r2, r1
 8001d12:	b292      	uxth	r2, r2
 8001d14:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8001d16:	7dbb      	ldrb	r3, [r7, #22]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001d1c:	7dbb      	ldrb	r3, [r7, #22]
 8001d1e:	2b07      	cmp	r3, #7
 8001d20:	d904      	bls.n	8001d2c <process_FC15+0xea>
        {
            u8bitsno = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001d2c:	8abb      	ldrh	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	82bb      	strh	r3, [r7, #20]
 8001d32:	8aba      	ldrh	r2, [r7, #20]
 8001d34:	8a3b      	ldrh	r3, [r7, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3a2      	bcc.n	8001c80 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2206      	movs	r2, #6
 8001d3e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d48:	3302      	adds	r3, #2
 8001d4a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fd3d 	bl	80017cc <sendTxBuffer>
    return u8CopyBufferSize;
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7d5b      	ldrb	r3, [r3, #21]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7d9b      	ldrb	r3, [r3, #22]
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7ddb      	ldrb	r3, [r3, #23]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7e1b      	ldrb	r3, [r3, #24]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8001d94:	8a7b      	ldrh	r3, [r7, #18]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2206      	movs	r2, #6
 8001da0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	82fb      	strh	r3, [r7, #22]
 8001da8:	e01d      	b.n	8001de6 <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	3307      	adds	r3, #7
        temp = word(
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8001db6:	8afb      	ldrh	r3, [r7, #22]
 8001db8:	3304      	adds	r3, #4
 8001dba:	005b      	lsls	r3, r3, #1
        temp = word(
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	7cdb      	ldrb	r3, [r3, #19]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7ff fc8c 	bl	80016e0 <word>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8001dd2:	8ab9      	ldrh	r1, [r7, #20]
 8001dd4:	8afb      	ldrh	r3, [r7, #22]
 8001dd6:	440b      	add	r3, r1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	89fa      	ldrh	r2, [r7, #14]
 8001dde:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 8001de0:	8afb      	ldrh	r3, [r7, #22]
 8001de2:	3301      	adds	r3, #1
 8001de4:	82fb      	strh	r3, [r7, #22]
 8001de6:	8afa      	ldrh	r2, [r7, #22]
 8001de8:	8a7b      	ldrh	r3, [r7, #18]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3dd      	bcc.n	8001daa <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001df4:	3302      	adds	r3, #2
 8001df6:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff fce7 	bl	80017cc <sendTxBuffer>

    return u8CopyBufferSize;
 8001dfe:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e019      	b.n	8001e52 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_UART_TxCpltCallback+0x70>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d10e      	bne.n	8001e4c <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_UART_TxCpltCallback+0x70>)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001e3a:	f107 0308 	add.w	r3, r7, #8
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2300      	movs	r3, #0
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	f006 fe03 	bl	8008a50 <xTaskGenericNotifyFromISR>
	   		break;
 8001e4a:	e008      	b.n	8001e5e <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_UART_TxCpltCallback+0x74>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	dbdf      	blt.n	8001e1e <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_UART_TxCpltCallback+0x68>
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_UART_TxCpltCallback+0x78>)
 8001e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000dd8 	.word	0x20000dd8
 8001e80:	200000bc 	.word	0x200000bc
 8001e84:	e000ed04 	.word	0xe000ed04

08001e88 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e042      	b.n	8001f20 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_UART_RxCpltCallback+0xc8>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d137      	bne.n	8001f1a <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 8001eaa:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <HAL_UART_RxCpltCallback+0xc8>)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d139      	bne.n	8001f2e <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 8001eba:	4a25      	ldr	r2, [pc, #148]	; (8001f50 <HAL_UART_RxCpltCallback+0xc8>)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8001ec6:	4922      	ldr	r1, [pc, #136]	; (8001f50 <HAL_UART_RxCpltCallback+0xc8>)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ece:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f7fe fc0f 	bl	80006f8 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <HAL_UART_RxCpltCallback+0xc8>)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	6858      	ldr	r0, [r3, #4]
 8001ee4:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <HAL_UART_RxCpltCallback+0xc8>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	33a6      	adds	r3, #166	; 0xa6
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f003 fcbf 	bl	8005874 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8001ef6:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_UART_RxCpltCallback+0xc8>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8001f02:	f005 ffe7 	bl	8007ed4 <xTaskGetTickCountFromISR>
 8001f06:	4602      	mov	r2, r0
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	9100      	str	r1, [sp, #0]
 8001f10:	2107      	movs	r1, #7
 8001f12:	4620      	mov	r0, r4
 8001f14:	f006 ff56 	bl	8008dc4 <xTimerGenericCommand>
    		}
    		break;
 8001f18:	e009      	b.n	8001f2e <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_UART_RxCpltCallback+0xcc>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	dbb6      	blt.n	8001e9a <HAL_UART_RxCpltCallback+0x12>
 8001f2c:	e000      	b.n	8001f30 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8001f2e:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d007      	beq.n	8001f46 <HAL_UART_RxCpltCallback+0xbe>
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_UART_RxCpltCallback+0xd0>)
 8001f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000dd8 	.word	0x20000dd8
 8001f54:	200000bc 	.word	0x200000bc
 8001f58:	e000ed04 	.word	0xe000ed04

08001f5c <HAL_GPIO_EXTI_Callback>:




// Si se interrumpe por flanco ascendente del pin 0 (Enconder optico)
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == D01_Encoder_Pin){
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	f040 80bc 	bne.w	80020e6 <HAL_GPIO_EXTI_Callback+0x18a>
		uint32_t ticksAux = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
		interrupciones = interrupciones + 1;
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001f7c:	801a      	strh	r2, [r3, #0]
//		incremento_enconder += 1;
		ticksAux = ticksPrev;
 8001f7e:	4b5d      	ldr	r3, [pc, #372]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]
		ticksPrev = ticksNow;
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5a      	ldr	r2, [pc, #360]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 8001f8a:	6013      	str	r3, [r2, #0]
		ticksNow = __HAL_TIM_GetCounter(&htim2);
 8001f8c:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	4a59      	ldr	r2, [pc, #356]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001f94:	6013      	str	r3, [r2, #0]

		 if (overflow == 0){
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d144      	bne.n	8002028 <HAL_GPIO_EXTI_Callback+0xcc>
			// Todo cool, calculo normal
			deltaTicks = ticksNow - ticksPrev;
 8001f9e:	4b56      	ldr	r3, [pc, #344]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe f987 	bl	80002bc <__aeabi_ui2f>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001fb2:	6013      	str	r3, [r2, #0]
			if (deltaTicks > tickFilter){
 8001fb4:	4b54      	ldr	r3, [pc, #336]	; (8002108 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe f983 	bl	80002c4 <__aeabi_i2f>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	f7fe fb6e 	bl	80006a8 <__aeabi_fcmplt>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d022      	beq.n	8002018 <HAL_GPIO_EXTI_Callback+0xbc>
			velocidad = ((float)1/(float)ranuras)/(((float)deltaTicks)/(float)(fsTmr2));
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	; (800210c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f970 	bl	80002bc <__aeabi_ui2f>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001fe4:	f7fe fa76 	bl	80004d4 <__aeabi_fdiv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461c      	mov	r4, r3
 8001fec:	4b45      	ldr	r3, [pc, #276]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a47      	ldr	r2, [pc, #284]	; (8002110 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa6c 	bl	80004d4 <__aeabi_fdiv>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	4620      	mov	r0, r4
 8002002:	f7fe fa67 	bl	80004d4 <__aeabi_fdiv>
 8002006:	4603      	mov	r3, r0
 8002008:	461a      	mov	r2, r3
 800200a:	4b42      	ldr	r3, [pc, #264]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800200c:	601a      	str	r2, [r3, #0]
//			resultMean = moveMean(mean,velocidad);
			resultMean = velocidad;
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a41      	ldr	r2, [pc, #260]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e057      	b.n	80020c8 <HAL_GPIO_EXTI_Callback+0x16c>
			}
			else{
				ticksNow = ticksPrev;
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a36      	ldr	r2, [pc, #216]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x19c>)
 800201e:	6013      	str	r3, [r2, #0]
				ticksPrev = ticksAux;
 8002020:	4a34      	ldr	r2, [pc, #208]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e04f      	b.n	80020c8 <HAL_GPIO_EXTI_Callback+0x16c>
			}
		} else{
			// Tuve algun desborde y tengo que tenerlo en cuenta
			deltaTicks = (ticksNow + overflow * cantTicksTmr2)- ticksPrev;
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	fb03 f302 	mul.w	r3, r3, r2
 8002036:	461a      	mov	r2, r3
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x19c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	441a      	add	r2, r3
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f939 	bl	80002bc <__aeabi_ui2f>
 800204a:	4603      	mov	r3, r0
 800204c:	4a2d      	ldr	r2, [pc, #180]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800204e:	6013      	str	r3, [r2, #0]
			if (deltaTicks > tickFilter){
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f935 	bl	80002c4 <__aeabi_i2f>
 800205a:	4602      	mov	r2, r0
 800205c:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7fe fb20 	bl	80006a8 <__aeabi_fcmplt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_EXTI_Callback+0x15e>
				velocidad = ((float)1/(float)ranuras)/(((float)deltaTicks)/(float)(fsTmr2));
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f922 	bl	80002bc <__aeabi_ui2f>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002080:	f7fe fa28 	bl	80004d4 <__aeabi_fdiv>
 8002084:	4603      	mov	r3, r0
 8002086:	461c      	mov	r4, r3
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a20      	ldr	r2, [pc, #128]	; (8002110 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa1e 	bl	80004d4 <__aeabi_fdiv>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	4620      	mov	r0, r4
 800209e:	f7fe fa19 	bl	80004d4 <__aeabi_fdiv>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020a8:	601a      	str	r2, [r3, #0]
//				resultMean = moveMean(mean,velocidad);
				resultMean = velocidad;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1a      	ldr	r2, [pc, #104]	; (8002118 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80020b0:	6013      	str	r3, [r2, #0]
				overflow = 0;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_EXTI_Callback+0x16c>
			}
			else{
				ticksNow = ticksPrev;
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x19c>)
 80020c0:	6013      	str	r3, [r2, #0]
				ticksPrev = ticksAux;
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x198>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6013      	str	r3, [r2, #0]
			}
		}

		if(deltaTicks == 0){
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f04f 0100 	mov.w	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fadf 	bl	8000694 <__aeabi_fcmpeq>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d100      	bne.n	80020de <HAL_GPIO_EXTI_Callback+0x182>
			velocidad = 0;
	 }
	}

}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_EXTI_Callback+0x18a>
			velocidad = 0;
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200000d8 	.word	0x200000d8
 80020f4:	200000c4 	.word	0x200000c4
 80020f8:	200000c8 	.word	0x200000c8
 80020fc:	2000102c 	.word	0x2000102c
 8002100:	200000cc 	.word	0x200000cc
 8002104:	200000d0 	.word	0x200000d0
 8002108:	20000024 	.word	0x20000024
 800210c:	20000020 	.word	0x20000020
 8002110:	20000028 	.word	0x20000028
 8002114:	200000c0 	.word	0x200000c0
 8002118:	200000d4 	.word	0x200000d4
 800211c:	20000022 	.word	0x20000022

08002120 <Sentido>:
//	 overflow += 1;
//  }
//  /* USER CODE END Callback 1 */
//}

void Sentido(uint16_t valor){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
	//Motor gira en un sentido
	if(valor == 0){
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10c      	bne.n	800214a <Sentido+0x2a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, SET);
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002136:	4815      	ldr	r0, [pc, #84]	; (800218c <Sentido+0x6c>)
 8002138:	f001 fe2c 	bl	8003d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002142:	4812      	ldr	r0, [pc, #72]	; (800218c <Sentido+0x6c>)
 8002144:	f001 fe26 	bl	8003d94 <HAL_GPIO_WritePin>
	}
	else{ // Break
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
	}
}
 8002148:	e01b      	b.n	8002182 <Sentido+0x62>
	else if(valor == 1){
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10c      	bne.n	800216a <Sentido+0x4a>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <Sentido+0x6c>)
 8002158:	f001 fe1c 	bl	8003d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, SET);
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002162:	480a      	ldr	r0, [pc, #40]	; (800218c <Sentido+0x6c>)
 8002164:	f001 fe16 	bl	8003d94 <HAL_GPIO_WritePin>
}
 8002168:	e00b      	b.n	8002182 <Sentido+0x62>
		HAL_GPIO_WritePin(OUT1_2_GPIO_Port, OUT1_2_Pin, RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002170:	4806      	ldr	r0, [pc, #24]	; (800218c <Sentido+0x6c>)
 8002172:	f001 fe0f 	bl	8003d94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT1_1_GPIO_Port, OUT1_1_Pin, RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <Sentido+0x6c>)
 800217e:	f001 fe09 	bl	8003d94 <HAL_GPIO_WritePin>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40010c00 	.word	0x40010c00

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002194:	f000 fe68 	bl	8002e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002198:	f000 f884 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219c:	f000 fa9a 	bl	80026d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80021a0:	f000 fa50 	bl	8002644 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80021a4:	f000 f93e 	bl	8002424 <MX_TIM1_Init>
  MX_DMA_Init();
 80021a8:	f000 fa76 	bl	8002698 <MX_DMA_Init>
  MX_ADC1_Init();
 80021ac:	f000 f8d6 	bl	800235c <MX_ADC1_Init>
  MX_TIM2_Init();
 80021b0:	f000 f9fc 	bl	80025ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Definiciones para la biblioteca de modbus
   ModbusH.uModbusType = MB_SLAVE;
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <main+0xcc>)
 80021b6:	2203      	movs	r2, #3
 80021b8:	701a      	strb	r2, [r3, #0]
   ModbusH.port =  &huart3;
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <main+0xcc>)
 80021bc:	4a28      	ldr	r2, [pc, #160]	; (8002260 <main+0xd0>)
 80021be:	605a      	str	r2, [r3, #4]
   ModbusH.u8id = 1; //Modbus slave ID
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <main+0xcc>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	721a      	strb	r2, [r3, #8]
   ModbusH.u16timeOut = 1000;
 80021c6:	4b25      	ldr	r3, [pc, #148]	; (800225c <main+0xcc>)
 80021c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021cc:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
   ModbusH.EN_Port = NULL;
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <main+0xcc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
   ModbusH.u16regs = ModbusDATA;
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <main+0xcc>)
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <main+0xd4>)
 80021da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <main+0xcc>)
 80021e0:	220d      	movs	r2, #13
 80021e2:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
   ModbusH.xTypeHW = USART_HW;
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <main+0xcc>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140

   //Initialize Modbus library
   ModbusInit(&ModbusH);
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <main+0xcc>)
 80021f0:	f7fe fb48 	bl	8000884 <ModbusInit>
   //Start capturing traffic on serial Port
   ModbusStart(&ModbusH);
 80021f4:	4819      	ldr	r0, [pc, #100]	; (800225c <main+0xcc>)
 80021f6:	f7fe fbe7 	bl	80009c8 <ModbusStart>

   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80021fa:	2100      	movs	r1, #0
 80021fc:	481a      	ldr	r0, [pc, #104]	; (8002268 <main+0xd8>)
 80021fe:	f002 fbf3 	bl	80049e8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002202:	f004 f84b 	bl	800629c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueDataADC */
  QueueDataADCHandle = osMessageQueueNew (16, sizeof(uint16_t), &QueueDataADC_attributes);
 8002206:	4a19      	ldr	r2, [pc, #100]	; (800226c <main+0xdc>)
 8002208:	2102      	movs	r1, #2
 800220a:	2010      	movs	r0, #16
 800220c:	f004 fa20 	bl	8006650 <osMessageQueueNew>
 8002210:	4603      	mov	r3, r0
 8002212:	4a17      	ldr	r2, [pc, #92]	; (8002270 <main+0xe0>)
 8002214:	6013      	str	r3, [r2, #0]
//  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Modbus */
  ModbusHandle = osThreadNew(StartModbus, NULL, &Modbus_attributes);
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <main+0xe4>)
 8002218:	2100      	movs	r1, #0
 800221a:	4817      	ldr	r0, [pc, #92]	; (8002278 <main+0xe8>)
 800221c:	f004 f8a4 	bl	8006368 <osThreadNew>
 8002220:	4603      	mov	r3, r0
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <main+0xec>)
 8002224:	6013      	str	r3, [r2, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(StartADC, NULL, &ADC_attributes);
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <main+0xf0>)
 8002228:	2100      	movs	r1, #0
 800222a:	4816      	ldr	r0, [pc, #88]	; (8002284 <main+0xf4>)
 800222c:	f004 f89c 	bl	8006368 <osThreadNew>
 8002230:	4603      	mov	r3, r0
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <main+0xf8>)
 8002234:	6013      	str	r3, [r2, #0]

  /* creation of Encoders */
  EncodersHandle = osThreadNew(StartEncoders, NULL, &Encoders_attributes);
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <main+0xfc>)
 8002238:	2100      	movs	r1, #0
 800223a:	4815      	ldr	r0, [pc, #84]	; (8002290 <main+0x100>)
 800223c:	f004 f894 	bl	8006368 <osThreadNew>
 8002240:	4603      	mov	r3, r0
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <main+0x104>)
 8002244:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(StartControl, NULL, &Control_attributes);
 8002246:	4a14      	ldr	r2, [pc, #80]	; (8002298 <main+0x108>)
 8002248:	2100      	movs	r1, #0
 800224a:	4814      	ldr	r0, [pc, #80]	; (800229c <main+0x10c>)
 800224c:	f004 f88c 	bl	8006368 <osThreadNew>
 8002250:	4603      	mov	r3, r0
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <main+0x110>)
 8002254:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002256:	f004 f853 	bl	8006300 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800225a:	e7fe      	b.n	800225a <main+0xca>
 800225c:	20000de0 	.word	0x20000de0
 8002260:	20000f28 	.word	0x20000f28
 8002264:	20000000 	.word	0x20000000
 8002268:	20000fe4 	.word	0x20000fe4
 800226c:	0800a274 	.word	0x0800a274
 8002270:	20001078 	.word	0x20001078
 8002274:	0800a1e4 	.word	0x0800a1e4
 8002278:	0800280d 	.word	0x0800280d
 800227c:	2000107c 	.word	0x2000107c
 8002280:	0800a208 	.word	0x0800a208
 8002284:	08002861 	.word	0x08002861
 8002288:	20001074 	.word	0x20001074
 800228c:	0800a22c 	.word	0x0800a22c
 8002290:	08002875 	.word	0x08002875
 8002294:	20000f24 	.word	0x20000f24
 8002298:	0800a250 	.word	0x0800a250
 800229c:	08002919 	.word	0x08002919
 80022a0:	20000f6c 	.word	0x20000f6c

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b094      	sub	sp, #80	; 0x50
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ae:	2228      	movs	r2, #40	; 0x28
 80022b0:	2100      	movs	r1, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f007 faae 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e2:	2301      	movs	r3, #1
 80022e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e6:	2302      	movs	r3, #2
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fd7a 	bl	8003df4 <HAL_RCC_OscConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002306:	f000 fb2d 	bl	8002964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230a:	230f      	movs	r3, #15
 800230c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f001 ffe4 	bl	80042f4 <HAL_RCC_ClockConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002332:	f000 fb17 	bl	8002964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002336:	2302      	movs	r3, #2
 8002338:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800233a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	4618      	mov	r0, r3
 8002344:	f002 f9a0 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800234e:	f000 fb09 	bl	8002964 <Error_Handler>
  }
}
 8002352:	bf00      	nop
 8002354:	3750      	adds	r7, #80	; 0x50
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <MX_ADC1_Init+0xc0>)
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <MX_ADC1_Init+0xc4>)
 8002370:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <MX_ADC1_Init+0xc0>)
 8002374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002378:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <MX_ADC1_Init+0xc0>)
 800237c:	2201      	movs	r2, #1
 800237e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <MX_ADC1_Init+0xc0>)
 8002382:	2200      	movs	r2, #0
 8002384:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002386:	4b25      	ldr	r3, [pc, #148]	; (800241c <MX_ADC1_Init+0xc0>)
 8002388:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800238c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <MX_ADC1_Init+0xc0>)
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <MX_ADC1_Init+0xc0>)
 8002396:	2204      	movs	r2, #4
 8002398:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800239a:	4820      	ldr	r0, [pc, #128]	; (800241c <MX_ADC1_Init+0xc0>)
 800239c:	f000 fd96 	bl	8002ecc <HAL_ADC_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80023a6:	f000 fadd 	bl	8002964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4818      	ldr	r0, [pc, #96]	; (800241c <MX_ADC1_Init+0xc0>)
 80023bc:	f000 ff34 	bl	8003228 <HAL_ADC_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80023c6:	f000 facd 	bl	8002964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80023ca:	2302      	movs	r3, #2
 80023cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4812      	ldr	r0, [pc, #72]	; (800241c <MX_ADC1_Init+0xc0>)
 80023d4:	f000 ff28 	bl	8003228 <HAL_ADC_ConfigChannel>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80023de:	f000 fac1 	bl	8002964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80023e2:	2303      	movs	r3, #3
 80023e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	480c      	ldr	r0, [pc, #48]	; (800241c <MX_ADC1_Init+0xc0>)
 80023ec:	f000 ff1c 	bl	8003228 <HAL_ADC_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80023f6:	f000 fab5 	bl	8002964 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80023fa:	2304      	movs	r3, #4
 80023fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <MX_ADC1_Init+0xc0>)
 8002404:	f000 ff10 	bl	8003228 <HAL_ADC_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800240e:	f000 faa9 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000f70 	.word	0x20000f70
 8002420:	40012400 	.word	0x40012400

08002424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b096      	sub	sp, #88	; 0x58
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	615a      	str	r2, [r3, #20]
 8002454:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2220      	movs	r2, #32
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f007 f9d9 	bl	8009814 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002462:	4b50      	ldr	r3, [pc, #320]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002464:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <MX_TIM1_Init+0x184>)
 8002466:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002468:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <MX_TIM1_Init+0x180>)
 800246a:	2247      	movs	r2, #71	; 0x47
 800246c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002476:	f242 7210 	movw	r2, #10000	; 0x2710
 800247a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <MX_TIM1_Init+0x180>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002482:	4b48      	ldr	r3, [pc, #288]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002488:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <MX_TIM1_Init+0x180>)
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800248e:	4845      	ldr	r0, [pc, #276]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002490:	f002 f9b0 	bl	80047f4 <HAL_TIM_Base_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800249a:	f000 fa63 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024a8:	4619      	mov	r1, r3
 80024aa:	483e      	ldr	r0, [pc, #248]	; (80025a4 <MX_TIM1_Init+0x180>)
 80024ac:	f002 fd04 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80024b6:	f000 fa55 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024ba:	483a      	ldr	r0, [pc, #232]	; (80025a4 <MX_TIM1_Init+0x180>)
 80024bc:	f002 fa3c 	bl	8004938 <HAL_TIM_PWM_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80024c6:	f000 fa4d 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024d6:	4619      	mov	r1, r3
 80024d8:	4832      	ldr	r0, [pc, #200]	; (80025a4 <MX_TIM1_Init+0x180>)
 80024da:	f003 f879 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024e4:	f000 fa3e 	bl	8002964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024e8:	2360      	movs	r3, #96	; 0x60
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024f4:	2300      	movs	r3, #0
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	2200      	movs	r2, #0
 800250a:	4619      	mov	r1, r3
 800250c:	4825      	ldr	r0, [pc, #148]	; (80025a4 <MX_TIM1_Init+0x180>)
 800250e:	f002 fc15 	bl	8004d3c <HAL_TIM_PWM_ConfigChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002518:	f000 fa24 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800251c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002520:	2204      	movs	r2, #4
 8002522:	4619      	mov	r1, r3
 8002524:	481f      	ldr	r0, [pc, #124]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002526:	f002 fc09 	bl	8004d3c <HAL_TIM_PWM_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002530:	f000 fa18 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	2208      	movs	r2, #8
 800253a:	4619      	mov	r1, r3
 800253c:	4819      	ldr	r0, [pc, #100]	; (80025a4 <MX_TIM1_Init+0x180>)
 800253e:	f002 fbfd 	bl	8004d3c <HAL_TIM_PWM_ConfigChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002548:	f000 fa0c 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800254c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002550:	220c      	movs	r2, #12
 8002552:	4619      	mov	r1, r3
 8002554:	4813      	ldr	r0, [pc, #76]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002556:	f002 fbf1 	bl	8004d3c <HAL_TIM_PWM_ConfigChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002560:	f000 fa00 	bl	8002964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800257c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4807      	ldr	r0, [pc, #28]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002588:	f003 f880 	bl	800568c <HAL_TIMEx_ConfigBreakDeadTime>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002592:	f000 f9e7 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM1_Init+0x180>)
 8002598:	f000 faca 	bl	8002b30 <HAL_TIM_MspPostInit>

}
 800259c:	bf00      	nop
 800259e:	3758      	adds	r7, #88	; 0x58
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000fe4 	.word	0x20000fe4
 80025a8:	40012c00 	.word	0x40012c00

080025ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	463b      	mov	r3, r7
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_TIM2_Init+0x94>)
 80025ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <MX_TIM2_Init+0x94>)
 80025d2:	2247      	movs	r2, #71	; 0x47
 80025d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM2_Init+0x94>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_TIM2_Init+0x94>)
 80025de:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80025e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_TIM2_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <MX_TIM2_Init+0x94>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025f0:	4813      	ldr	r0, [pc, #76]	; (8002640 <MX_TIM2_Init+0x94>)
 80025f2:	f002 f8ff 	bl	80047f4 <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025fc:	f000 f9b2 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	4619      	mov	r1, r3
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <MX_TIM2_Init+0x94>)
 800260e:	f002 fc53 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002618:	f000 f9a4 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002624:	463b      	mov	r3, r7
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_TIM2_Init+0x94>)
 800262a:	f002 ffd1 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002634:	f000 f996 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2000102c 	.word	0x2000102c

08002644 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <MX_USART3_UART_Init+0x50>)
 800264c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 8002650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002654:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_USART3_UART_Init+0x4c>)
 800267c:	f003 f869 	bl	8005752 <HAL_UART_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002686:	f000 f96d 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000f28 	.word	0x20000f28
 8002694:	40004800 	.word	0x40004800

08002698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_DMA_Init+0x38>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <MX_DMA_Init+0x38>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_DMA_Init+0x38>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	200b      	movs	r0, #11
 80026bc:	f000 ffab 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026c0:	200b      	movs	r0, #11
 80026c2:	f000 ffc4 	bl	800364e <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0310 	add.w	r3, r7, #16
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e8:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <MX_GPIO_Init+0x124>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <MX_GPIO_Init+0x124>)
 80026ee:	f043 0310 	orr.w	r3, r3, #16
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <MX_GPIO_Init+0x124>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <MX_GPIO_Init+0x124>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <MX_GPIO_Init+0x124>)
 8002706:	f043 0320 	orr.w	r3, r3, #32
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	4b3a      	ldr	r3, [pc, #232]	; (80027f8 <MX_GPIO_Init+0x124>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <MX_GPIO_Init+0x124>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <MX_GPIO_Init+0x124>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <MX_GPIO_Init+0x124>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <MX_GPIO_Init+0x124>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	4a30      	ldr	r2, [pc, #192]	; (80027f8 <MX_GPIO_Init+0x124>)
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	6193      	str	r3, [r2, #24]
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <MX_GPIO_Init+0x124>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800274e:	482b      	ldr	r0, [pc, #172]	; (80027fc <MX_GPIO_Init+0x128>)
 8002750:	f001 fb20 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 8002754:	2200      	movs	r2, #0
 8002756:	f24f 0118 	movw	r1, #61464	; 0xf018
 800275a:	4829      	ldr	r0, [pc, #164]	; (8002800 <MX_GPIO_Init+0x12c>)
 800275c:	f001 fb1a 	bl	8003d94 <HAL_GPIO_WritePin>
                          |OUT3_2_Pin|OUT3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT4_1_Pin|OUT4_2_Pin, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8002766:	4827      	ldr	r0, [pc, #156]	; (8002804 <MX_GPIO_Init+0x130>)
 8002768:	f001 fb14 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800276c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2302      	movs	r3, #2
 800277c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4619      	mov	r1, r3
 8002784:	481d      	ldr	r0, [pc, #116]	; (80027fc <MX_GPIO_Init+0x128>)
 8002786:	f001 f981 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT2_1_Pin OUT2_2_Pin OUT1_2_Pin OUT1_1_Pin
                           OUT3_2_Pin OUT3_1_Pin */
  GPIO_InitStruct.Pin = OUT2_1_Pin|OUT2_2_Pin|OUT1_2_Pin|OUT1_1_Pin
 800278a:	f24f 0318 	movw	r3, #61464	; 0xf018
 800278e:	613b      	str	r3, [r7, #16]
                          |OUT3_2_Pin|OUT3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002790:	2301      	movs	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2302      	movs	r3, #2
 800279a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	4619      	mov	r1, r3
 80027a2:	4817      	ldr	r0, [pc, #92]	; (8002800 <MX_GPIO_Init+0x12c>)
 80027a4:	f001 f972 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT4_1_Pin OUT4_2_Pin */
  GPIO_InitStruct.Pin = OUT4_1_Pin|OUT4_2_Pin;
 80027a8:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80027ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 0310 	add.w	r3, r7, #16
 80027be:	4619      	mov	r1, r3
 80027c0:	4810      	ldr	r0, [pc, #64]	; (8002804 <MX_GPIO_Init+0x130>)
 80027c2:	f001 f963 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : D01_Encoder_Pin D02_Encoder_Pin D03_Encoder_Pin D04_Encoder_Pin */
  GPIO_InitStruct.Pin = D01_Encoder_Pin|D02_Encoder_Pin|D03_Encoder_Pin|D04_Encoder_Pin;
 80027c6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80027ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_GPIO_Init+0x134>)
 80027ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	4619      	mov	r1, r3
 80027da:	4809      	ldr	r0, [pc, #36]	; (8002800 <MX_GPIO_Init+0x12c>)
 80027dc:	f001 f956 	bl	8003a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2105      	movs	r1, #5
 80027e4:	2017      	movs	r0, #23
 80027e6:	f000 ff16 	bl	8003616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027ea:	2017      	movs	r0, #23
 80027ec:	f000 ff2f 	bl	800364e <HAL_NVIC_EnableIRQ>

}
 80027f0:	bf00      	nop
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40011000 	.word	0x40011000
 8002800:	40010c00 	.word	0x40010c00
 8002804:	40010800 	.word	0x40010800
 8002808:	10110000 	.word	0x10110000

0800280c <StartModbus>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartModbus */
void StartModbus(void *argument)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
//	int i =0;
//	char buff[64];
	uint16_t valor =1234;
 8002814:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002818:	81fb      	strh	r3, [r7, #14]
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
//	  osMessageGet( QueueDataADCHandle, &valor, 0 );
	prt=pvPortMalloc(100*sizeof (char));
 800281a:	2064      	movs	r0, #100	; 0x64
 800281c:	f006 ff8e 	bl	800973c <pvPortMalloc>
 8002820:	6178      	str	r0, [r7, #20]
	sprintf(prt,"Dato leido de la Queue: %u \n",valor);
 8002822:	89fb      	ldrh	r3, [r7, #14]
 8002824:	461a      	mov	r2, r3
 8002826:	490c      	ldr	r1, [pc, #48]	; (8002858 <StartModbus+0x4c>)
 8002828:	6978      	ldr	r0, [r7, #20]
 800282a:	f007 f8b1 	bl	8009990 <siprintf>

	 status = osMessageQueueGet(QueueDataADCHandle, &valor, NULL, 5000);   // wait for message
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <StartModbus+0x50>)
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	f107 010e 	add.w	r1, r7, #14
 8002836:	f241 3388 	movw	r3, #5000	; 0x1388
 800283a:	2200      	movs	r2, #0
 800283c:	f003 ff8e 	bl	800675c <osMessageQueueGet>
 8002840:	6138      	str	r0, [r7, #16]
	    if (status == osOK) {
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <StartModbus+0x42>
//	HAL_UART_Transmit(&huart3, (uint8_t*)prt, strlen(prt), 100);
	vPortFree(prt);
 8002848:	6978      	ldr	r0, [r7, #20]
 800284a:	f006 ff89 	bl	8009760 <vPortFree>
	      ; // process data
	    }

    osDelay(900);
 800284e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002852:	f003 fe33 	bl	80064bc <osDelay>
	prt=pvPortMalloc(100*sizeof (char));
 8002856:	e7e0      	b.n	800281a <StartModbus+0xe>
 8002858:	0800a124 	.word	0x0800a124
 800285c:	20001078 	.word	0x20001078

08002860 <StartADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
//	adc1 = HAL_ADC_PollForConversion(&hadc1, 5000);
//	osMessageQueuePut(QueueDataADCHandle, &adc1, 5000);
//	osMessageQueuePut(QueueDataADCHandle, &adc1[0], NULL, 5000);
//	osThreadYield();

    osDelay(1000);
 8002868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286c:	f003 fe26 	bl	80064bc <osDelay>
 8002870:	e7fa      	b.n	8002868 <StartADC+0x8>
	...

08002874 <StartEncoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoders */
void StartEncoders(void *argument)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	uint16_t pasador[2];
	uint16_t delta[2];// para mandar los deltaticks
	uint16_t meanData[2];


	HAL_TIM_Base_Start_IT(&htim2);
 800287c:	481e      	ldr	r0, [pc, #120]	; (80028f8 <StartEncoders+0x84>)
 800287e:	f002 f809 	bl	8004894 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  for(;;)
  {

//    Velocidad(ModbusDATA[0]);// Calculo la velocidad para devolver por modbus
    osDelay(Ts);// Delta T
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <StartEncoders+0x88>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fe18 	bl	80064bc <osDelay>
    Sentido(ModbusDATA[0]);
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <StartEncoders+0x8c>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fc45 	bl	8002120 <Sentido>
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <StartEncoders+0x90>)
 8002898:	681b      	ldr	r3, [r3, #0]

    memcpy(meanData, &ticksNow, sizeof(ticksNow));
 800289a:	60fb      	str	r3, [r7, #12]
    ModbusDATA[4]=meanData[0];
 800289c:	89ba      	ldrh	r2, [r7, #12]
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <StartEncoders+0x8c>)
 80028a0:	811a      	strh	r2, [r3, #8]
    ModbusDATA[5]=meanData[1];
 80028a2:	89fa      	ldrh	r2, [r7, #14]
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <StartEncoders+0x8c>)
 80028a6:	815a      	strh	r2, [r3, #10]
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <StartEncoders+0x94>)
 80028aa:	681b      	ldr	r3, [r3, #0]


    memcpy(pasador, &velocidad, sizeof(velocidad));
 80028ac:	617b      	str	r3, [r7, #20]
    ModbusDATA[8]=pasador[0];
 80028ae:	8aba      	ldrh	r2, [r7, #20]
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <StartEncoders+0x8c>)
 80028b2:	821a      	strh	r2, [r3, #16]
    ModbusDATA[9]=pasador[1];
 80028b4:	8afa      	ldrh	r2, [r7, #22]
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <StartEncoders+0x8c>)
 80028b8:	825a      	strh	r2, [r3, #18]
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <StartEncoders+0x98>)
 80028bc:	681b      	ldr	r3, [r3, #0]

    memcpy(delta, &deltaTicks, sizeof(deltaTicks));
 80028be:	613b      	str	r3, [r7, #16]
    ModbusDATA[10]=delta[0];
 80028c0:	8a3a      	ldrh	r2, [r7, #16]
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <StartEncoders+0x8c>)
 80028c4:	829a      	strh	r2, [r3, #20]
    ModbusDATA[11]=delta[1];
 80028c6:	8a7a      	ldrh	r2, [r7, #18]
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <StartEncoders+0x8c>)
 80028ca:	82da      	strh	r2, [r3, #22]

    htim1.Instance->CCR1 = ModbusDATA[1];
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <StartEncoders+0x8c>)
 80028ce:	885a      	ldrh	r2, [r3, #2]
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <StartEncoders+0x9c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34

    ModbusDATA[6] = overflow;
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <StartEncoders+0xa0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <StartEncoders+0x8c>)
 80028de:	819a      	strh	r2, [r3, #12]
    if(overflow >= 2){
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <StartEncoders+0xa0>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d9cc      	bls.n	8002882 <StartEncoders+0xe>
    	  velocidad = 0;
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <StartEncoders+0x94>)
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
    	  overflow = 0;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <StartEncoders+0xa0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
    osDelay(Ts);// Delta T
 80028f6:	e7c4      	b.n	8002882 <StartEncoders+0xe>
 80028f8:	2000102c 	.word	0x2000102c
 80028fc:	2000001c 	.word	0x2000001c
 8002900:	20000000 	.word	0x20000000
 8002904:	200000c8 	.word	0x200000c8
 8002908:	200000c0 	.word	0x200000c0
 800290c:	200000d0 	.word	0x200000d0
 8002910:	20000fe4 	.word	0x20000fe4
 8002914:	200000cc 	.word	0x200000cc

08002918 <StartControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl */
void StartControl(void *argument)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002920:	2001      	movs	r0, #1
 8002922:	f003 fdcb 	bl	80064bc <osDelay>
 8002926:	e7fb      	b.n	8002920 <StartControl+0x8>

08002928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//  // ESTO ES DE FREERTOS
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800293a:	f000 faab 	bl	8002e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM2){
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d105      	bne.n	8002954 <HAL_TIM_PeriodElapsedCallback+0x2c>
	 overflow += 1;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002952:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40000800 	.word	0x40000800
 8002960:	200000cc 	.word	0x200000cc

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002968:	b672      	cpsid	i
}
 800296a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800296c:	e7fe      	b.n	800296c <Error_Handler+0x8>
	...

08002970 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_MspInit+0x68>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_MspInit+0x68>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6193      	str	r3, [r2, #24]
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_MspInit+0x68>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_MspInit+0x68>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_MspInit+0x68>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	61d3      	str	r3, [r2, #28]
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_MspInit+0x68>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	210f      	movs	r1, #15
 80029aa:	f06f 0001 	mvn.w	r0, #1
 80029ae:	f000 fe32 	bl	8003616 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_MspInit+0x6c>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_MspInit+0x6c>)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010000 	.word	0x40010000

080029e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <HAL_ADC_MspInit+0xcc>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d151      	bne.n	8002aa4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_ADC_MspInit+0xd0>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_ADC_MspInit+0xd0>)
 8002a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <HAL_ADC_MspInit+0xd0>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_ADC_MspInit+0xd0>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <HAL_ADC_MspInit+0xd0>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_ADC_MspInit+0xd0>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a30:	230f      	movs	r3, #15
 8002a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a34:	2303      	movs	r3, #3
 8002a36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	481d      	ldr	r0, [pc, #116]	; (8002ab4 <HAL_ADC_MspInit+0xd4>)
 8002a40:	f001 f824 	bl	8003a8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_ADC_MspInit+0xdc>)
 8002a48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a64:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a78:	480f      	ldr	r0, [pc, #60]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a7a:	f000 fdf7 	bl	800366c <HAL_DMA_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002a84:	f7ff ff6e 	bl	8002964 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a8c:	621a      	str	r2, [r3, #32]
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_ADC_MspInit+0xd8>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8002a94:	2200      	movs	r2, #0
 8002a96:	2105      	movs	r1, #5
 8002a98:	2012      	movs	r0, #18
 8002a9a:	f000 fdbc 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a9e:	2012      	movs	r0, #18
 8002aa0:	f000 fdd5 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aa4:	bf00      	nop
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40012400 	.word	0x40012400
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010800 	.word	0x40010800
 8002ab8:	20000fa0 	.word	0x20000fa0
 8002abc:	40020008 	.word	0x40020008

08002ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_TIM_Base_MspInit+0x68>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10c      	bne.n	8002aec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_TIM_Base_MspInit+0x6c>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_TIM_Base_MspInit+0x6c>)
 8002ad8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002adc:	6193      	str	r3, [r2, #24]
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_TIM_Base_MspInit+0x6c>)
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002aea:	e018      	b.n	8002b1e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d113      	bne.n	8002b1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_TIM_Base_MspInit+0x6c>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <HAL_TIM_Base_MspInit+0x6c>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	61d3      	str	r3, [r2, #28]
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_TIM_Base_MspInit+0x6c>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2105      	movs	r1, #5
 8002b12:	201c      	movs	r0, #28
 8002b14:	f000 fd7f 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b18:	201c      	movs	r0, #28
 8002b1a:	f000 fd98 	bl	800364e <HAL_NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <HAL_TIM_MspPostInit+0x5c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d118      	bne.n	8002b82 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_TIM_MspPostInit+0x60>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_TIM_MspPostInit+0x60>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6193      	str	r3, [r2, #24]
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_TIM_MspPostInit+0x60>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_01_Pin|PWM_02_Pin|PWM_03_Pin|PWM_04_Pin;
 8002b68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2302      	movs	r3, #2
 8002b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	; (8002b94 <HAL_TIM_MspPostInit+0x64>)
 8002b7e:	f000 ff85 	bl	8003a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010800 	.word	0x40010800

08002b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_UART_MspInit+0x9c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d139      	bne.n	8002c2c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bb8:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <HAL_UART_MspInit+0xa0>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <HAL_UART_MspInit+0xa0>)
 8002bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc2:	61d3      	str	r3, [r2, #28]
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <HAL_UART_MspInit+0xa0>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_UART_MspInit+0xa0>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_UART_MspInit+0xa0>)
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <HAL_UART_MspInit+0xa0>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 0310 	add.w	r3, r7, #16
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	480f      	ldr	r0, [pc, #60]	; (8002c3c <HAL_UART_MspInit+0xa4>)
 8002bfe:	f000 ff45 	bl	8003a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c10:	f107 0310 	add.w	r3, r7, #16
 8002c14:	4619      	mov	r1, r3
 8002c16:	4809      	ldr	r0, [pc, #36]	; (8002c3c <HAL_UART_MspInit+0xa4>)
 8002c18:	f000 ff38 	bl	8003a8c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2105      	movs	r1, #5
 8002c20:	2027      	movs	r0, #39	; 0x27
 8002c22:	f000 fcf8 	bl	8003616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c26:	2027      	movs	r0, #39	; 0x27
 8002c28:	f000 fd11 	bl	800364e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40004800 	.word	0x40004800
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40010c00 	.word	0x40010c00

08002c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08c      	sub	sp, #48	; 0x30
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	201e      	movs	r0, #30
 8002c56:	f000 fcde 	bl	8003616 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c5a:	201e      	movs	r0, #30
 8002c5c:	f000 fcf7 	bl	800364e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_InitTick+0xa0>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_InitTick+0xa0>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	61d3      	str	r3, [r2, #28]
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_InitTick+0xa0>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c78:	f107 0210 	add.w	r2, r7, #16
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f001 fcb2 	bl	80045ec <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002c88:	f001 fc88 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c94:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <HAL_InitTick+0xa4>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_InitTick+0xa8>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <HAL_InitTick+0xac>)
 8002ca4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_InitTick+0xa8>)
 8002ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002cae:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <HAL_InitTick+0xa8>)
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_InitTick+0xa8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_InitTick+0xa8>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002cc0:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <HAL_InitTick+0xa8>)
 8002cc2:	f001 fd97 	bl	80047f4 <HAL_TIM_Base_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002ccc:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <HAL_InitTick+0xa8>)
 8002cce:	f001 fde1 	bl	8004894 <HAL_TIM_Base_Start_IT>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	e000      	b.n	8002cd8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3730      	adds	r7, #48	; 0x30
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	431bde83 	.word	0x431bde83
 8002ce8:	20001080 	.word	0x20001080
 8002cec:	40000800 	.word	0x40000800

08002cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <NMI_Handler+0x4>

08002cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfa:	e7fe      	b.n	8002cfa <HardFault_Handler+0x4>

08002cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <MemManage_Handler+0x4>

08002d02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d06:	e7fe      	b.n	8002d06 <BusFault_Handler+0x4>

08002d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <UsageFault_Handler+0x4>

08002d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <DMA1_Channel1_IRQHandler+0x10>)
 8002d22:	f000 fdad 	bl	8003880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000fa0 	.word	0x20000fa0

08002d30 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <ADC1_2_IRQHandler+0x10>)
 8002d36:	f000 f9a1 	bl	800307c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000f70 	.word	0x20000f70

08002d44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d48:	2040      	movs	r0, #64	; 0x40
 8002d4a:	f001 f83b 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d4e:	2080      	movs	r0, #128	; 0x80
 8002d50:	f001 f838 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002d54:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d58:	f001 f834 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002d5c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d60:	f001 f830 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <TIM2_IRQHandler+0x10>)
 8002d6e:	f001 fedd 	bl	8004b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000102c 	.word	0x2000102c

08002d7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <TIM4_IRQHandler+0x10>)
 8002d82:	f001 fed3 	bl	8004b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20001080 	.word	0x20001080

08002d90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <USART3_IRQHandler+0x10>)
 8002d96:	f002 fe07 	bl	80059a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000f28 	.word	0x20000f28

08002da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <_sbrk+0x5c>)
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <_sbrk+0x60>)
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <_sbrk+0x64>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <_sbrk+0x64>)
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <_sbrk+0x68>)
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dc6:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d207      	bcs.n	8002de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd4:	f006 fcd6 	bl	8009784 <__errno>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	220c      	movs	r2, #12
 8002ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	e009      	b.n	8002df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <_sbrk+0x64>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <_sbrk+0x64>)
 8002df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20005000 	.word	0x20005000
 8002e04:	00000400 	.word	0x00000400
 8002e08:	200000dc 	.word	0x200000dc
 8002e0c:	20001120 	.word	0x20001120

08002e10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e1e:	490d      	ldr	r1, [pc, #52]	; (8002e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e34:	4c0a      	ldr	r4, [pc, #40]	; (8002e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e42:	f7ff ffe5 	bl	8002e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f006 fca3 	bl	8009790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e4a:	f7ff f9a1 	bl	8002190 <main>
  bx lr
 8002e4e:	4770      	bx	lr
  ldr r0, =_sdata
 8002e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e54:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002e58:	0800a2e0 	.word	0x0800a2e0
  ldr r2, =_sbss
 8002e5c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002e60:	2000111c 	.word	0x2000111c

08002e64 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e64:	e7fe      	b.n	8002e64 <CAN1_RX1_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_Init+0x28>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_Init+0x28>)
 8002e72:	f043 0310 	orr.w	r3, r3, #16
 8002e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f000 fbc1 	bl	8003600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7e:	200f      	movs	r0, #15
 8002e80:	f7ff fede 	bl	8002c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e84:	f7ff fd74 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_IncTick+0x1c>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_IncTick+0x20>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <HAL_IncTick+0x20>)
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	20000034 	.word	0x20000034
 8002eb4:	200010c8 	.word	0x200010c8

08002eb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return uwTick;
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <HAL_GetTick+0x10>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	200010c8 	.word	0x200010c8

08002ecc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0be      	b.n	800306c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fd68 	bl	80029e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fa81 	bl	8003418 <ADC_ConversionStop_Disable>
 8002f16:	4603      	mov	r3, r0
 8002f18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 8099 	bne.w	800305a <HAL_ADC_Init+0x18e>
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 8095 	bne.w	800305a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	f043 0202 	orr.w	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	7b1b      	ldrb	r3, [r3, #12]
 8002f52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f64:	d003      	beq.n	8002f6e <HAL_ADC_Init+0xa2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d102      	bne.n	8002f74 <HAL_ADC_Init+0xa8>
 8002f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f72:	e000      	b.n	8002f76 <HAL_ADC_Init+0xaa>
 8002f74:	2300      	movs	r3, #0
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7d1b      	ldrb	r3, [r3, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d119      	bne.n	8002fb8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7b1b      	ldrb	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	035a      	lsls	r2, r3, #13
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_ADC_Init+0x1a8>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe8:	d003      	beq.n	8002ff2 <HAL_ADC_Init+0x126>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d104      	bne.n	8002ffc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	051b      	lsls	r3, r3, #20
 8002ffa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	430a      	orrs	r2, r1
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	4b18      	ldr	r3, [pc, #96]	; (8003078 <HAL_ADC_Init+0x1ac>)
 8003018:	4013      	ands	r3, r2
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d10b      	bne.n	8003038 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003036:	e018      	b.n	800306a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f023 0312 	bic.w	r3, r3, #18
 8003040:	f043 0210 	orr.w	r2, r3, #16
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003058:	e007      	b.n	800306a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f043 0210 	orr.w	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800306a:	7dfb      	ldrb	r3, [r7, #23]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	ffe1f7fd 	.word	0xffe1f7fd
 8003078:	ff1f0efe 	.word	0xff1f0efe

0800307c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0320 	and.w	r3, r3, #32
 800308e:	2b20      	cmp	r3, #32
 8003090:	d140      	bne.n	8003114 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b02      	cmp	r3, #2
 800309e:	d139      	bne.n	8003114 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030c6:	d11d      	bne.n	8003104 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d119      	bne.n	8003104 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0220 	bic.w	r2, r2, #32
 80030de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f87c 	bl	8003202 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0212 	mvn.w	r2, #18
 8003112:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d14f      	bne.n	80031c2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b04      	cmp	r3, #4
 800312e:	d148      	bne.n	80031c2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003152:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003156:	d012      	beq.n	800317e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003162:	2b00      	cmp	r3, #0
 8003164:	d125      	bne.n	80031b2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003170:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003174:	d11d      	bne.n	80031b2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d119      	bne.n	80031b2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800318c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d105      	bne.n	80031b2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f971 	bl	800349a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 020c 	mvn.w	r2, #12
 80031c0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d114      	bne.n	80031fa <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d10d      	bne.n	80031fa <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f812 	bl	8003214 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0201 	mvn.w	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
	...

08003228 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x20>
 8003244:	2302      	movs	r3, #2
 8003246:	e0dc      	b.n	8003402 <HAL_ADC_ConfigChannel+0x1da>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d81c      	bhi.n	8003292 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	3b05      	subs	r3, #5
 800326a:	221f      	movs	r2, #31
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	4019      	ands	r1, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b05      	subs	r3, #5
 8003284:	fa00 f203 	lsl.w	r2, r0, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	635a      	str	r2, [r3, #52]	; 0x34
 8003290:	e03c      	b.n	800330c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d81c      	bhi.n	80032d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	3b23      	subs	r3, #35	; 0x23
 80032ac:	221f      	movs	r2, #31
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	4019      	ands	r1, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	3b23      	subs	r3, #35	; 0x23
 80032c6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30
 80032d2:	e01b      	b.n	800330c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	3b41      	subs	r3, #65	; 0x41
 80032e6:	221f      	movs	r2, #31
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4019      	ands	r1, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	3b41      	subs	r3, #65	; 0x41
 8003300:	fa00 f203 	lsl.w	r2, r0, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b09      	cmp	r3, #9
 8003312:	d91c      	bls.n	800334e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68d9      	ldr	r1, [r3, #12]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	3b1e      	subs	r3, #30
 8003326:	2207      	movs	r2, #7
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	4019      	ands	r1, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6898      	ldr	r0, [r3, #8]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	3b1e      	subs	r3, #30
 8003340:	fa00 f203 	lsl.w	r2, r0, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	e019      	b.n	8003382 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6919      	ldr	r1, [r3, #16]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	2207      	movs	r2, #7
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	4019      	ands	r1, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	6898      	ldr	r0, [r3, #8]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	fa00 f203 	lsl.w	r2, r0, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b10      	cmp	r3, #16
 8003388:	d003      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800338e:	2b11      	cmp	r3, #17
 8003390:	d132      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_ADC_ConfigChannel+0x1e4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d125      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d126      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d11a      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_ADC_ConfigChannel+0x1e8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <HAL_ADC_ConfigChannel+0x1ec>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	0c9a      	lsrs	r2, r3, #18
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033d8:	e002      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3b01      	subs	r3, #1
 80033de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f9      	bne.n	80033da <HAL_ADC_ConfigChannel+0x1b2>
 80033e6:	e007      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40012400 	.word	0x40012400
 8003410:	2000002c 	.word	0x2000002c
 8003414:	431bde83 	.word	0x431bde83

08003418 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d12e      	bne.n	8003490 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003442:	f7ff fd39 	bl	8002eb8 <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003448:	e01b      	b.n	8003482 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800344a:	f7ff fd35 	bl	8002eb8 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d914      	bls.n	8003482 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10d      	bne.n	8003482 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d0dc      	beq.n	800344a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <__NVIC_GetPriorityGrouping+0x18>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0307 	and.w	r3, r3, #7
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0b      	blt.n	800353a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4906      	ldr	r1, [pc, #24]	; (8003544 <__NVIC_EnableIRQ+0x34>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff ff4f 	bl	80034ac <__NVIC_SetPriorityGrouping>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003628:	f7ff ff64 	bl	80034f4 <__NVIC_GetPriorityGrouping>
 800362c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	6978      	ldr	r0, [r7, #20]
 8003634:	f7ff ffb2 	bl	800359c <NVIC_EncodePriority>
 8003638:	4602      	mov	r2, r0
 800363a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff81 	bl	8003548 <__NVIC_SetPriority>
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	4603      	mov	r3, r0
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff57 	bl	8003510 <__NVIC_EnableIRQ>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
	...

0800366c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e043      	b.n	800370a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_DMA_Init+0xa8>)
 800368a:	4413      	add	r3, r2
 800368c:	4a22      	ldr	r2, [pc, #136]	; (8003718 <HAL_DMA_Init+0xac>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HAL_DMA_Init+0xb0>)
 800369e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80036ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	bffdfff8 	.word	0xbffdfff8
 8003718:	cccccccd 	.word	0xcccccccd
 800371c:	40020000 	.word	0x40020000

08003720 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003732:	2b02      	cmp	r3, #2
 8003734:	d008      	beq.n	8003748 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2204      	movs	r2, #4
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e020      	b.n	800378a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 020e 	bic.w	r2, r2, #14
 8003756:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003788:	7bfb      	ldrb	r3, [r7, #15]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d005      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2204      	movs	r2, #4
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e051      	b.n	800385a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 020e 	bic.w	r2, r2, #14
 80037c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_DMA_Abort_IT+0xd0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d029      	beq.n	8003834 <HAL_DMA_Abort_IT+0xa0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a20      	ldr	r2, [pc, #128]	; (8003868 <HAL_DMA_Abort_IT+0xd4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d022      	beq.n	8003830 <HAL_DMA_Abort_IT+0x9c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_DMA_Abort_IT+0xd8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d01a      	beq.n	800382a <HAL_DMA_Abort_IT+0x96>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_DMA_Abort_IT+0xdc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d012      	beq.n	8003824 <HAL_DMA_Abort_IT+0x90>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_DMA_Abort_IT+0xe0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00a      	beq.n	800381e <HAL_DMA_Abort_IT+0x8a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <HAL_DMA_Abort_IT+0xe4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d102      	bne.n	8003818 <HAL_DMA_Abort_IT+0x84>
 8003812:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003816:	e00e      	b.n	8003836 <HAL_DMA_Abort_IT+0xa2>
 8003818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800381c:	e00b      	b.n	8003836 <HAL_DMA_Abort_IT+0xa2>
 800381e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003822:	e008      	b.n	8003836 <HAL_DMA_Abort_IT+0xa2>
 8003824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003828:	e005      	b.n	8003836 <HAL_DMA_Abort_IT+0xa2>
 800382a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800382e:	e002      	b.n	8003836 <HAL_DMA_Abort_IT+0xa2>
 8003830:	2310      	movs	r3, #16
 8003832:	e000      	b.n	8003836 <HAL_DMA_Abort_IT+0xa2>
 8003834:	2301      	movs	r3, #1
 8003836:	4a11      	ldr	r2, [pc, #68]	; (800387c <HAL_DMA_Abort_IT+0xe8>)
 8003838:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
    } 
  }
  return status;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40020008 	.word	0x40020008
 8003868:	4002001c 	.word	0x4002001c
 800386c:	40020030 	.word	0x40020030
 8003870:	40020044 	.word	0x40020044
 8003874:	40020058 	.word	0x40020058
 8003878:	4002006c 	.word	0x4002006c
 800387c:	40020000 	.word	0x40020000

08003880 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	2204      	movs	r2, #4
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d04f      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc8>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04a      	beq.n	8003948 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d107      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a66      	ldr	r2, [pc, #408]	; (8003a70 <HAL_DMA_IRQHandler+0x1f0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d029      	beq.n	800392e <HAL_DMA_IRQHandler+0xae>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <HAL_DMA_IRQHandler+0x1f4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_DMA_IRQHandler+0xaa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a63      	ldr	r2, [pc, #396]	; (8003a78 <HAL_DMA_IRQHandler+0x1f8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01a      	beq.n	8003924 <HAL_DMA_IRQHandler+0xa4>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a62      	ldr	r2, [pc, #392]	; (8003a7c <HAL_DMA_IRQHandler+0x1fc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d012      	beq.n	800391e <HAL_DMA_IRQHandler+0x9e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a60      	ldr	r2, [pc, #384]	; (8003a80 <HAL_DMA_IRQHandler+0x200>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00a      	beq.n	8003918 <HAL_DMA_IRQHandler+0x98>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <HAL_DMA_IRQHandler+0x204>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d102      	bne.n	8003912 <HAL_DMA_IRQHandler+0x92>
 800390c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003910:	e00e      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 8003912:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003916:	e00b      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 8003918:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800391c:	e008      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 800391e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003922:	e005      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 8003924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003928:	e002      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 800392a:	2340      	movs	r3, #64	; 0x40
 800392c:	e000      	b.n	8003930 <HAL_DMA_IRQHandler+0xb0>
 800392e:	2304      	movs	r3, #4
 8003930:	4a55      	ldr	r2, [pc, #340]	; (8003a88 <HAL_DMA_IRQHandler+0x208>)
 8003932:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8094 	beq.w	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003946:	e08e      	b.n	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	2202      	movs	r2, #2
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d056      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x186>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d051      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10b      	bne.n	8003988 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020a 	bic.w	r2, r2, #10
 800397e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a38      	ldr	r2, [pc, #224]	; (8003a70 <HAL_DMA_IRQHandler+0x1f0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d029      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x166>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a37      	ldr	r2, [pc, #220]	; (8003a74 <HAL_DMA_IRQHandler+0x1f4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x162>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <HAL_DMA_IRQHandler+0x1f8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x15c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a34      	ldr	r2, [pc, #208]	; (8003a7c <HAL_DMA_IRQHandler+0x1fc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d012      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x156>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a32      	ldr	r2, [pc, #200]	; (8003a80 <HAL_DMA_IRQHandler+0x200>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00a      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x150>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_DMA_IRQHandler+0x204>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d102      	bne.n	80039ca <HAL_DMA_IRQHandler+0x14a>
 80039c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039c8:	e00e      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ce:	e00b      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039d4:	e008      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039da:	e005      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e0:	e002      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039e2:	2320      	movs	r3, #32
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_IRQHandler+0x168>
 80039e6:	2302      	movs	r3, #2
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_DMA_IRQHandler+0x208>)
 80039ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d034      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a04:	e02f      	b.n	8003a66 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d028      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x1e8>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d023      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 020e 	bic.w	r2, r2, #14
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
    }
  }
  return;
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
}
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40020008 	.word	0x40020008
 8003a74:	4002001c 	.word	0x4002001c
 8003a78:	40020030 	.word	0x40020030
 8003a7c:	40020044 	.word	0x40020044
 8003a80:	40020058 	.word	0x40020058
 8003a84:	4002006c 	.word	0x4002006c
 8003a88:	40020000 	.word	0x40020000

08003a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b08b      	sub	sp, #44	; 0x2c
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a96:	2300      	movs	r3, #0
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a9e:	e169      	b.n	8003d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	f040 8158 	bne.w	8003d6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a9a      	ldr	r2, [pc, #616]	; (8003d2c <HAL_GPIO_Init+0x2a0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d05e      	beq.n	8003b86 <HAL_GPIO_Init+0xfa>
 8003ac8:	4a98      	ldr	r2, [pc, #608]	; (8003d2c <HAL_GPIO_Init+0x2a0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d875      	bhi.n	8003bba <HAL_GPIO_Init+0x12e>
 8003ace:	4a98      	ldr	r2, [pc, #608]	; (8003d30 <HAL_GPIO_Init+0x2a4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d058      	beq.n	8003b86 <HAL_GPIO_Init+0xfa>
 8003ad4:	4a96      	ldr	r2, [pc, #600]	; (8003d30 <HAL_GPIO_Init+0x2a4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d86f      	bhi.n	8003bba <HAL_GPIO_Init+0x12e>
 8003ada:	4a96      	ldr	r2, [pc, #600]	; (8003d34 <HAL_GPIO_Init+0x2a8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d052      	beq.n	8003b86 <HAL_GPIO_Init+0xfa>
 8003ae0:	4a94      	ldr	r2, [pc, #592]	; (8003d34 <HAL_GPIO_Init+0x2a8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d869      	bhi.n	8003bba <HAL_GPIO_Init+0x12e>
 8003ae6:	4a94      	ldr	r2, [pc, #592]	; (8003d38 <HAL_GPIO_Init+0x2ac>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d04c      	beq.n	8003b86 <HAL_GPIO_Init+0xfa>
 8003aec:	4a92      	ldr	r2, [pc, #584]	; (8003d38 <HAL_GPIO_Init+0x2ac>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d863      	bhi.n	8003bba <HAL_GPIO_Init+0x12e>
 8003af2:	4a92      	ldr	r2, [pc, #584]	; (8003d3c <HAL_GPIO_Init+0x2b0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d046      	beq.n	8003b86 <HAL_GPIO_Init+0xfa>
 8003af8:	4a90      	ldr	r2, [pc, #576]	; (8003d3c <HAL_GPIO_Init+0x2b0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d85d      	bhi.n	8003bba <HAL_GPIO_Init+0x12e>
 8003afe:	2b12      	cmp	r3, #18
 8003b00:	d82a      	bhi.n	8003b58 <HAL_GPIO_Init+0xcc>
 8003b02:	2b12      	cmp	r3, #18
 8003b04:	d859      	bhi.n	8003bba <HAL_GPIO_Init+0x12e>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <HAL_GPIO_Init+0x80>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b87 	.word	0x08003b87
 8003b10:	08003b61 	.word	0x08003b61
 8003b14:	08003b73 	.word	0x08003b73
 8003b18:	08003bb5 	.word	0x08003bb5
 8003b1c:	08003bbb 	.word	0x08003bbb
 8003b20:	08003bbb 	.word	0x08003bbb
 8003b24:	08003bbb 	.word	0x08003bbb
 8003b28:	08003bbb 	.word	0x08003bbb
 8003b2c:	08003bbb 	.word	0x08003bbb
 8003b30:	08003bbb 	.word	0x08003bbb
 8003b34:	08003bbb 	.word	0x08003bbb
 8003b38:	08003bbb 	.word	0x08003bbb
 8003b3c:	08003bbb 	.word	0x08003bbb
 8003b40:	08003bbb 	.word	0x08003bbb
 8003b44:	08003bbb 	.word	0x08003bbb
 8003b48:	08003bbb 	.word	0x08003bbb
 8003b4c:	08003bbb 	.word	0x08003bbb
 8003b50:	08003b69 	.word	0x08003b69
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	4a79      	ldr	r2, [pc, #484]	; (8003d40 <HAL_GPIO_Init+0x2b4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b5e:	e02c      	b.n	8003bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	623b      	str	r3, [r7, #32]
          break;
 8003b66:	e029      	b.n	8003bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	623b      	str	r3, [r7, #32]
          break;
 8003b70:	e024      	b.n	8003bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	3308      	adds	r3, #8
 8003b78:	623b      	str	r3, [r7, #32]
          break;
 8003b7a:	e01f      	b.n	8003bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	330c      	adds	r3, #12
 8003b82:	623b      	str	r3, [r7, #32]
          break;
 8003b84:	e01a      	b.n	8003bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b8e:	2304      	movs	r3, #4
 8003b90:	623b      	str	r3, [r7, #32]
          break;
 8003b92:	e013      	b.n	8003bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	611a      	str	r2, [r3, #16]
          break;
 8003ba6:	e009      	b.n	8003bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ba8:	2308      	movs	r3, #8
 8003baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	615a      	str	r2, [r3, #20]
          break;
 8003bb2:	e003      	b.n	8003bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	623b      	str	r3, [r7, #32]
          break;
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x130>
          break;
 8003bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2bff      	cmp	r3, #255	; 0xff
 8003bc0:	d801      	bhi.n	8003bc6 <HAL_GPIO_Init+0x13a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	e001      	b.n	8003bca <HAL_GPIO_Init+0x13e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2bff      	cmp	r3, #255	; 0xff
 8003bd0:	d802      	bhi.n	8003bd8 <HAL_GPIO_Init+0x14c>
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	e002      	b.n	8003bde <HAL_GPIO_Init+0x152>
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	3b08      	subs	r3, #8
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	210f      	movs	r1, #15
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80b1 	beq.w	8003d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c0c:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <HAL_GPIO_Init+0x2b8>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_GPIO_Init+0x2b8>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6193      	str	r3, [r2, #24]
 8003c18:	4b4a      	ldr	r3, [pc, #296]	; (8003d44 <HAL_GPIO_Init+0x2b8>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c24:	4a48      	ldr	r2, [pc, #288]	; (8003d48 <HAL_GPIO_Init+0x2bc>)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4013      	ands	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a40      	ldr	r2, [pc, #256]	; (8003d4c <HAL_GPIO_Init+0x2c0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <HAL_GPIO_Init+0x1ec>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3f      	ldr	r2, [pc, #252]	; (8003d50 <HAL_GPIO_Init+0x2c4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00d      	beq.n	8003c74 <HAL_GPIO_Init+0x1e8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3e      	ldr	r2, [pc, #248]	; (8003d54 <HAL_GPIO_Init+0x2c8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d007      	beq.n	8003c70 <HAL_GPIO_Init+0x1e4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a3d      	ldr	r2, [pc, #244]	; (8003d58 <HAL_GPIO_Init+0x2cc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d101      	bne.n	8003c6c <HAL_GPIO_Init+0x1e0>
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e006      	b.n	8003c7a <HAL_GPIO_Init+0x1ee>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	e004      	b.n	8003c7a <HAL_GPIO_Init+0x1ee>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e002      	b.n	8003c7a <HAL_GPIO_Init+0x1ee>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <HAL_GPIO_Init+0x1ee>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7c:	f002 0203 	and.w	r2, r2, #3
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	4093      	lsls	r3, r2
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c8a:	492f      	ldr	r1, [pc, #188]	; (8003d48 <HAL_GPIO_Init+0x2bc>)
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	3302      	adds	r3, #2
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d006      	beq.n	8003cb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ca4:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	492c      	ldr	r1, [pc, #176]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	4928      	ldr	r1, [pc, #160]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d006      	beq.n	8003cda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ccc:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	4922      	ldr	r1, [pc, #136]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
 8003cd8:	e006      	b.n	8003ce8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cda:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	491e      	ldr	r1, [pc, #120]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d006      	beq.n	8003d02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	4918      	ldr	r1, [pc, #96]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]
 8003d00:	e006      	b.n	8003d10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	4914      	ldr	r1, [pc, #80]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d021      	beq.n	8003d60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	490e      	ldr	r1, [pc, #56]	; (8003d5c <HAL_GPIO_Init+0x2d0>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60cb      	str	r3, [r1, #12]
 8003d28:	e021      	b.n	8003d6e <HAL_GPIO_Init+0x2e2>
 8003d2a:	bf00      	nop
 8003d2c:	10320000 	.word	0x10320000
 8003d30:	10310000 	.word	0x10310000
 8003d34:	10220000 	.word	0x10220000
 8003d38:	10210000 	.word	0x10210000
 8003d3c:	10120000 	.word	0x10120000
 8003d40:	10110000 	.word	0x10110000
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40010800 	.word	0x40010800
 8003d50:	40010c00 	.word	0x40010c00
 8003d54:	40011000 	.word	0x40011000
 8003d58:	40011400 	.word	0x40011400
 8003d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_GPIO_Init+0x304>)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	4909      	ldr	r1, [pc, #36]	; (8003d90 <HAL_GPIO_Init+0x304>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	3301      	adds	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f47f ae8e 	bne.w	8003aa0 <HAL_GPIO_Init+0x14>
  }
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	372c      	adds	r7, #44	; 0x2c
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr
 8003d90:	40010400 	.word	0x40010400

08003d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
 8003da0:	4613      	mov	r3, r2
 8003da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003da4:	787b      	ldrb	r3, [r7, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003db0:	e003      	b.n	8003dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	041a      	lsls	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe f8ba 	bl	8001f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40010400 	.word	0x40010400

08003df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e26c      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8087 	beq.w	8003f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e14:	4b92      	ldr	r3, [pc, #584]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d00c      	beq.n	8003e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e20:	4b8f      	ldr	r3, [pc, #572]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d112      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5e>
 8003e2c:	4b8c      	ldr	r3, [pc, #560]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3a:	4b89      	ldr	r3, [pc, #548]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d06c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x12c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d168      	bne.n	8003f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e246      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x76>
 8003e5c:	4b80      	ldr	r3, [pc, #512]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a7f      	ldr	r2, [pc, #508]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	e02e      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10c      	bne.n	8003e8c <HAL_RCC_OscConfig+0x98>
 8003e72:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a7a      	ldr	r2, [pc, #488]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b78      	ldr	r3, [pc, #480]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a77      	ldr	r2, [pc, #476]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	e01d      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0xbc>
 8003e96:	4b72      	ldr	r3, [pc, #456]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a71      	ldr	r2, [pc, #452]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b6f      	ldr	r3, [pc, #444]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0xd4>
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a6a      	ldr	r2, [pc, #424]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a67      	ldr	r2, [pc, #412]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fff2 	bl	8002eb8 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fe ffee 	bl	8002eb8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1fa      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	4b5d      	ldr	r3, [pc, #372]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xe4>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe ffde 	bl	8002eb8 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe ffda 	bl	8002eb8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e1e6      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x10c>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f2e:	4b4c      	ldr	r3, [pc, #304]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f3a:	4b49      	ldr	r3, [pc, #292]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d11c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x18c>
 8003f46:	4b46      	ldr	r3, [pc, #280]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d116      	bne.n	8003f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	4b43      	ldr	r3, [pc, #268]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_RCC_OscConfig+0x176>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1ba      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4939      	ldr	r1, [pc, #228]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7e:	e03a      	b.n	8003ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d020      	beq.n	8003fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x270>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fe ff93 	bl	8002eb8 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f96:	f7fe ff8f 	bl	8002eb8 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e19b      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4927      	ldr	r1, [pc, #156]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fe ff72 	bl	8002eb8 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd8:	f7fe ff6e 	bl	8002eb8 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e17a      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d03a      	beq.n	8004078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d019      	beq.n	800403e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	4b17      	ldr	r3, [pc, #92]	; (8004068 <HAL_RCC_OscConfig+0x274>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004010:	f7fe ff52 	bl	8002eb8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004018:	f7fe ff4e 	bl	8002eb8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e15a      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <HAL_RCC_OscConfig+0x26c>)
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004036:	2001      	movs	r0, #1
 8004038:	f000 fb08 	bl	800464c <RCC_Delay>
 800403c:	e01c      	b.n	8004078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <HAL_RCC_OscConfig+0x274>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004044:	f7fe ff38 	bl	8002eb8 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800404a:	e00f      	b.n	800406c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800404c:	f7fe ff34 	bl	8002eb8 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d908      	bls.n	800406c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e140      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	42420000 	.word	0x42420000
 8004068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	4b9e      	ldr	r3, [pc, #632]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e9      	bne.n	800404c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a6 	beq.w	80041d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408a:	4b97      	ldr	r3, [pc, #604]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10d      	bne.n	80040b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	4b94      	ldr	r3, [pc, #592]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4a93      	ldr	r2, [pc, #588]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	61d3      	str	r3, [r2, #28]
 80040a2:	4b91      	ldr	r3, [pc, #580]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b8e      	ldr	r3, [pc, #568]	; (80042ec <HAL_RCC_OscConfig+0x4f8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d118      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040be:	4b8b      	ldr	r3, [pc, #556]	; (80042ec <HAL_RCC_OscConfig+0x4f8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a8a      	ldr	r2, [pc, #552]	; (80042ec <HAL_RCC_OscConfig+0x4f8>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ca:	f7fe fef5 	bl	8002eb8 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d2:	f7fe fef1 	bl	8002eb8 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	; 0x64
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e0fd      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b81      	ldr	r3, [pc, #516]	; (80042ec <HAL_RCC_OscConfig+0x4f8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d106      	bne.n	8004106 <HAL_RCC_OscConfig+0x312>
 80040f8:	4b7b      	ldr	r3, [pc, #492]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4a7a      	ldr	r2, [pc, #488]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6213      	str	r3, [r2, #32]
 8004104:	e02d      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_RCC_OscConfig+0x334>
 800410e:	4b76      	ldr	r3, [pc, #472]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4a75      	ldr	r2, [pc, #468]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004114:	f023 0301 	bic.w	r3, r3, #1
 8004118:	6213      	str	r3, [r2, #32]
 800411a:	4b73      	ldr	r3, [pc, #460]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a72      	ldr	r2, [pc, #456]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004120:	f023 0304 	bic.w	r3, r3, #4
 8004124:	6213      	str	r3, [r2, #32]
 8004126:	e01c      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b05      	cmp	r3, #5
 800412e:	d10c      	bne.n	800414a <HAL_RCC_OscConfig+0x356>
 8004130:	4b6d      	ldr	r3, [pc, #436]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	4a6c      	ldr	r2, [pc, #432]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004136:	f043 0304 	orr.w	r3, r3, #4
 800413a:	6213      	str	r3, [r2, #32]
 800413c:	4b6a      	ldr	r3, [pc, #424]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4a69      	ldr	r2, [pc, #420]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6213      	str	r3, [r2, #32]
 8004148:	e00b      	b.n	8004162 <HAL_RCC_OscConfig+0x36e>
 800414a:	4b67      	ldr	r3, [pc, #412]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4a66      	ldr	r2, [pc, #408]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6213      	str	r3, [r2, #32]
 8004156:	4b64      	ldr	r3, [pc, #400]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a63      	ldr	r2, [pc, #396]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416a:	f7fe fea5 	bl	8002eb8 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fe fea1 	bl	8002eb8 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0ab      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0ee      	beq.n	8004172 <HAL_RCC_OscConfig+0x37e>
 8004194:	e014      	b.n	80041c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004196:	f7fe fe8f 	bl	8002eb8 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fe fe8b 	bl	8002eb8 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e095      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b4:	4b4c      	ldr	r3, [pc, #304]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1ee      	bne.n	800419e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4b48      	ldr	r3, [pc, #288]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4a47      	ldr	r2, [pc, #284]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8081 	beq.w	80042de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041dc:	4b42      	ldr	r3, [pc, #264]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 030c 	and.w	r3, r3, #12
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d061      	beq.n	80042ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d146      	bne.n	800427e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f0:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <HAL_RCC_OscConfig+0x4fc>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fe fe5f 	bl	8002eb8 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fe fe5b 	bl	8002eb8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e067      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004210:	4b35      	ldr	r3, [pc, #212]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004226:	4b30      	ldr	r3, [pc, #192]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	492d      	ldr	r1, [pc, #180]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004238:	4b2b      	ldr	r3, [pc, #172]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a19      	ldr	r1, [r3, #32]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	430b      	orrs	r3, r1
 800424a:	4927      	ldr	r1, [pc, #156]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004250:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <HAL_RCC_OscConfig+0x4fc>)
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fe fe2f 	bl	8002eb8 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425e:	f7fe fe2b 	bl	8002eb8 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e037      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x46a>
 800427c:	e02f      	b.n	80042de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <HAL_RCC_OscConfig+0x4fc>)
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fe fe18 	bl	8002eb8 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fe fe14 	bl	8002eb8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e020      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x498>
 80042aa:	e018      	b.n	80042de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e013      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40007000 	.word	0x40007000
 80042f0:	42420060 	.word	0x42420060

080042f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0d0      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 0207 	bic.w	r2, r3, #7
 800431e:	4965      	ldr	r1, [pc, #404]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4a58      	ldr	r2, [pc, #352]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800435a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d040      	beq.n	8004414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d115      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e073      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e06b      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4936      	ldr	r1, [pc, #216]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fe fd68 	bl	8002eb8 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fe fd64 	bl	8002eb8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e053      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d210      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 0207 	bic.w	r2, r3, #7
 800442a:	4922      	ldr	r1, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f821 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1cc>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fbcc 	bl	8002c40 <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40022000 	.word	0x40022000
 80044b8:	40021000 	.word	0x40021000
 80044bc:	0800a28c 	.word	0x0800a28c
 80044c0:	2000002c 	.word	0x2000002c
 80044c4:	20000030 	.word	0x20000030

080044c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	b490      	push	{r4, r7}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044d8:	f240 2301 	movw	r3, #513	; 0x201
 80044dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044f2:	4b22      	ldr	r3, [pc, #136]	; (800457c <HAL_RCC_GetSysClockFreq+0xb4>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d002      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x40>
 8004502:	2b08      	cmp	r3, #8
 8004504:	d003      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0x46>
 8004506:	e02d      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450a:	623b      	str	r3, [r7, #32]
      break;
 800450c:	e02d      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	0c9b      	lsrs	r3, r3, #18
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800451a:	4413      	add	r3, r2
 800451c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004520:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800452c:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_RCC_GetSysClockFreq+0xb4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	0c5b      	lsrs	r3, r3, #17
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800453a:	4413      	add	r3, r2
 800453c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004540:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004546:	fb02 f203 	mul.w	r2, r2, r3
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
 8004552:	e004      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	623b      	str	r3, [r7, #32]
      break;
 8004562:	e002      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004566:	623b      	str	r3, [r7, #32]
      break;
 8004568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456a:	6a3b      	ldr	r3, [r7, #32]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3728      	adds	r7, #40	; 0x28
 8004570:	46bd      	mov	sp, r7
 8004572:	bc90      	pop	{r4, r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	0800a144 	.word	0x0800a144
 800457c:	40021000 	.word	0x40021000
 8004580:	007a1200 	.word	0x007a1200
 8004584:	003d0900 	.word	0x003d0900

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <HAL_RCC_GetHCLKFreq+0x10>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	2000002c 	.word	0x2000002c

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045a0:	f7ff fff2 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4903      	ldr	r1, [pc, #12]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	0800a29c 	.word	0x0800a29c

080045c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045c8:	f7ff ffde 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	0adb      	lsrs	r3, r3, #11
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4903      	ldr	r1, [pc, #12]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	0800a29c 	.word	0x0800a29c

080045ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	220f      	movs	r2, #15
 80045fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCC_GetClockConfig+0x58>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 0203 	and.w	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_RCC_GetClockConfig+0x58>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_GetClockConfig+0x58>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004620:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_RCC_GetClockConfig+0x58>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	08db      	lsrs	r3, r3, #3
 8004626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_GetClockConfig+0x5c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0207 	and.w	r2, r3, #7
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	40021000 	.word	0x40021000
 8004648:	40022000 	.word	0x40022000

0800464c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <RCC_Delay+0x34>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <RCC_Delay+0x38>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0a5b      	lsrs	r3, r3, #9
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	fb02 f303 	mul.w	r3, r2, r3
 8004666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004668:	bf00      	nop
  }
  while (Delay --);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	60fa      	str	r2, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f9      	bne.n	8004668 <RCC_Delay+0x1c>
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	2000002c 	.word	0x2000002c
 8004684:	10624dd3 	.word	0x10624dd3

08004688 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d07d      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80046a4:	2300      	movs	r3, #0
 80046a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a8:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10d      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b4:	4b4c      	ldr	r3, [pc, #304]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	4a4b      	ldr	r2, [pc, #300]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046be:	61d3      	str	r3, [r2, #28]
 80046c0:	4b49      	ldr	r3, [pc, #292]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	4b46      	ldr	r3, [pc, #280]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d118      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046dc:	4b43      	ldr	r3, [pc, #268]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a42      	ldr	r2, [pc, #264]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e8:	f7fe fbe6 	bl	8002eb8 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	e008      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fe fbe2 	bl	8002eb8 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	; 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e06d      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b3a      	ldr	r3, [pc, #232]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800470e:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d02e      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	429a      	cmp	r2, r3
 800472a:	d027      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800472c:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800473c:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004742:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d014      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fe fbb1 	bl	8002eb8 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004758:	e00a      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475a:	f7fe fbad 	bl	8002eb8 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f241 3288 	movw	r2, #5000	; 0x1388
 8004768:	4293      	cmp	r3, r2
 800476a:	d901      	bls.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e036      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ee      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4917      	ldr	r1, [pc, #92]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478a:	4313      	orrs	r3, r2
 800478c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4a13      	ldr	r2, [pc, #76]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	490b      	ldr	r1, [pc, #44]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	4904      	ldr	r1, [pc, #16]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40007000 	.word	0x40007000
 80047f0:	42420440 	.word	0x42420440

080047f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e041      	b.n	800488a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe f950 	bl	8002ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 fc28 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d001      	beq.n	80048ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e03a      	b.n	8004922 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_TIM_Base_Start_IT+0x98>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00e      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x58>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d6:	d009      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x58>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <HAL_TIM_Base_Start_IT+0x9c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x58>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a13      	ldr	r2, [pc, #76]	; (8004934 <HAL_TIM_Base_Start_IT+0xa0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d111      	bne.n	8004910 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d010      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0201 	orr.w	r2, r2, #1
 800490c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	e007      	b.n	8004920 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800

08004938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e041      	b.n	80049ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f839 	bl	80049d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 fb86 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x24>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e022      	b.n	8004a52 <HAL_TIM_PWM_Start+0x6a>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d109      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x3e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e015      	b.n	8004a52 <HAL_TIM_PWM_Start+0x6a>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x58>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e008      	b.n	8004a52 <HAL_TIM_PWM_Start+0x6a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	bf14      	ite	ne
 8004a4c:	2301      	movne	r3, #1
 8004a4e:	2300      	moveq	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e05e      	b.n	8004b18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <HAL_TIM_PWM_Start+0x82>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a68:	e013      	b.n	8004a92 <HAL_TIM_PWM_Start+0xaa>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start+0x92>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a78:	e00b      	b.n	8004a92 <HAL_TIM_PWM_Start+0xaa>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a88:	e003      	b.n	8004a92 <HAL_TIM_PWM_Start+0xaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2201      	movs	r2, #1
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fd74 	bl	8005588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_PWM_Start+0x138>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d107      	bne.n	8004aba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_TIM_PWM_Start+0x138>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0xfa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d009      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0xfa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <HAL_TIM_PWM_Start+0x13c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0xfa>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <HAL_TIM_PWM_Start+0x140>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d111      	bne.n	8004b06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d010      	beq.n	8004b16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	e007      	b.n	8004b16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40000400 	.word	0x40000400
 8004b28:	40000800 	.word	0x40000800

08004b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0202 	mvn.w	r2, #2
 8004b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa6f 	bl	8005052 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa62 	bl	8005040 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa71 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0204 	mvn.w	r2, #4
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa45 	bl	8005052 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa38 	bl	8005040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa47 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0208 	mvn.w	r2, #8
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2204      	movs	r2, #4
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa1b 	bl	8005052 <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa0e 	bl	8005040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa1d 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d122      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d11b      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0210 	mvn.w	r2, #16
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9f1 	bl	8005052 <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9e4 	bl	8005040 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9f3 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10e      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0201 	mvn.w	r2, #1
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fd fe3c 	bl	8002928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fd32 	bl	8005740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9b7 	bl	8005076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0220 	mvn.w	r2, #32
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fcfd 	bl	800572e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e0ac      	b.n	8004eb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	f200 809f 	bhi.w	8004ea4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004ea5 	.word	0x08004ea5
 8004d74:	08004ea5 	.word	0x08004ea5
 8004d78:	08004ea5 	.word	0x08004ea5
 8004d7c:	08004de1 	.word	0x08004de1
 8004d80:	08004ea5 	.word	0x08004ea5
 8004d84:	08004ea5 	.word	0x08004ea5
 8004d88:	08004ea5 	.word	0x08004ea5
 8004d8c:	08004e23 	.word	0x08004e23
 8004d90:	08004ea5 	.word	0x08004ea5
 8004d94:	08004ea5 	.word	0x08004ea5
 8004d98:	08004ea5 	.word	0x08004ea5
 8004d9c:	08004e63 	.word	0x08004e63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f9d0 	bl	800514c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0208 	orr.w	r2, r2, #8
 8004dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0204 	bic.w	r2, r2, #4
 8004dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	619a      	str	r2, [r3, #24]
      break;
 8004dde:	e062      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fa16 	bl	8005218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6999      	ldr	r1, [r3, #24]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	021a      	lsls	r2, r3, #8
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	619a      	str	r2, [r3, #24]
      break;
 8004e20:	e041      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fa5f 	bl	80052ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0208 	orr.w	r2, r2, #8
 8004e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0204 	bic.w	r2, r2, #4
 8004e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	61da      	str	r2, [r3, #28]
      break;
 8004e60:	e021      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 faa9 	bl	80053c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69d9      	ldr	r1, [r3, #28]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	021a      	lsls	r2, r3, #8
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	61da      	str	r2, [r3, #28]
      break;
 8004ea2:	e000      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIM_ConfigClockSource+0x18>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e0b3      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x180>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d03e      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0xd0>
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0e:	f200 8087 	bhi.w	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f16:	f000 8085 	beq.w	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d87f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f20:	2b70      	cmp	r3, #112	; 0x70
 8004f22:	d01a      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0xa2>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d87b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f28:	2b60      	cmp	r3, #96	; 0x60
 8004f2a:	d050      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x116>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d877      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f30:	2b50      	cmp	r3, #80	; 0x50
 8004f32:	d03c      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xf6>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d873      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d058      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x136>
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d86f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d064      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d86b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d060      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d867      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d05c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d05a      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f58:	e062      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6899      	ldr	r1, [r3, #8]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f000 faee 	bl	800554a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	609a      	str	r2, [r3, #8]
      break;
 8004f86:	e04e      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f000 fad7 	bl	800554a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004faa:	609a      	str	r2, [r3, #8]
      break;
 8004fac:	e03b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 fa4e 	bl	800545c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2150      	movs	r1, #80	; 0x50
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 faa5 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e02b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fa6c 	bl	80054b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2160      	movs	r1, #96	; 0x60
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fa95 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 8004fec:	e01b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fa2e 	bl	800545c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2140      	movs	r1, #64	; 0x40
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fa85 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 800500c:	e00b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f000 fa7c 	bl	8005516 <TIM_ITRx_SetConfig>
        break;
 800501e:	e002      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005024:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a29      	ldr	r2, [pc, #164]	; (8005140 <TIM_Base_SetConfig+0xb8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x30>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x30>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a26      	ldr	r2, [pc, #152]	; (8005144 <TIM_Base_SetConfig+0xbc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x30>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a25      	ldr	r2, [pc, #148]	; (8005148 <TIM_Base_SetConfig+0xc0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <TIM_Base_SetConfig+0xb8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00b      	beq.n	80050ea <TIM_Base_SetConfig+0x62>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d007      	beq.n	80050ea <TIM_Base_SetConfig+0x62>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <TIM_Base_SetConfig+0xbc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_Base_SetConfig+0x62>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a18      	ldr	r2, [pc, #96]	; (8005148 <TIM_Base_SetConfig+0xc0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a07      	ldr	r2, [pc, #28]	; (8005140 <TIM_Base_SetConfig+0xb8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d103      	bne.n	8005130 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	615a      	str	r2, [r3, #20]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800

0800514c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f023 0201 	bic.w	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0303 	bic.w	r3, r3, #3
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f023 0302 	bic.w	r3, r3, #2
 8005194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <TIM_OC1_SetConfig+0xc8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d10c      	bne.n	80051c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 0308 	bic.w	r3, r3, #8
 80051ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 0304 	bic.w	r3, r3, #4
 80051c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a13      	ldr	r2, [pc, #76]	; (8005214 <TIM_OC1_SetConfig+0xc8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d111      	bne.n	80051ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	621a      	str	r2, [r3, #32]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00

08005218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0320 	bic.w	r3, r3, #32
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <TIM_OC2_SetConfig+0xd0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d10d      	bne.n	8005294 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a14      	ldr	r2, [pc, #80]	; (80052e8 <TIM_OC2_SetConfig+0xd0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d113      	bne.n	80052c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr
 80052e8:	40012c00 	.word	0x40012c00

080052ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0303 	bic.w	r3, r3, #3
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <TIM_OC3_SetConfig+0xd0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10d      	bne.n	8005366 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a14      	ldr	r2, [pc, #80]	; (80053bc <TIM_OC3_SetConfig+0xd0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d113      	bne.n	8005396 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800537c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	621a      	str	r2, [r3, #32]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40012c00 	.word	0x40012c00

080053c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a0f      	ldr	r2, [pc, #60]	; (8005458 <TIM_OC4_SetConfig+0x98>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d109      	bne.n	8005434 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	019b      	lsls	r3, r3, #6
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr
 8005458:	40012c00 	.word	0x40012c00

0800545c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0201 	bic.w	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f023 030a 	bic.w	r3, r3, #10
 8005498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f023 0210 	bic.w	r2, r3, #16
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	031b      	lsls	r3, r3, #12
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	621a      	str	r2, [r3, #32]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	f043 0307 	orr.w	r3, r3, #7
 8005538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005564:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	021a      	lsls	r2, r3, #8
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	431a      	orrs	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4313      	orrs	r3, r2
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	609a      	str	r2, [r3, #8]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	2201      	movs	r2, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1a      	ldr	r2, [r3, #32]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	43db      	mvns	r3, r3
 80055aa:	401a      	ands	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	431a      	orrs	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e046      	b.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005634:	d009      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a12      	ldr	r2, [pc, #72]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a10      	ldr	r2, [pc, #64]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10c      	bne.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800

0800568c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e03d      	b.n	8005724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e03f      	b.n	80057e4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fd fa0d 	bl	8002b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2224      	movs	r2, #36	; 0x24
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005794:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fcf2 	bl	8006180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b20      	cmp	r3, #32
 8005804:	d130      	bne.n	8005868 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_UART_Transmit_IT+0x26>
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e029      	b.n	800586a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_UART_Transmit_IT+0x38>
 8005820:	2302      	movs	r3, #2
 8005822:	e022      	b.n	800586a <HAL_UART_Transmit_IT+0x7e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2221      	movs	r2, #33	; 0x21
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005862:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e000      	b.n	800586a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005868:	2302      	movs	r3, #2
  }
}
 800586a:	4618      	mov	r0, r3
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b20      	cmp	r3, #32
 800588c:	d11d      	bne.n	80058ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_Receive_IT+0x26>
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e016      	b.n	80058cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Receive_IT+0x38>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e00f      	b.n	80058cc <HAL_UART_Receive_IT+0x58>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	461a      	mov	r2, r3
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fabb 	bl	8005e3c <UART_Start_Receive_IT>
 80058c6:	4603      	mov	r3, r0
 80058c8:	e000      	b.n	80058cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058ca:	2302      	movs	r3, #2
  }
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	2b01      	cmp	r3, #1
 8005902:	d107      	bne.n	8005914 <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0210 	bic.w	r2, r2, #16
 8005912:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d02d      	beq.n	800597e <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005930:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	2b00      	cmp	r3, #0
 8005938:	d013      	beq.n	8005962 <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <HAL_UART_AbortReceive_IT+0xd0>)
 8005940:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	4618      	mov	r0, r3
 8005948:	f7fd ff24 	bl	8003794 <HAL_DMA_Abort_IT>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d022      	beq.n	8005998 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800595c:	4610      	mov	r0, r2
 800595e:	4798      	blx	r3
 8005960:	e01a      	b.n	8005998 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9c9 	bl	8005d0e <HAL_UART_AbortReceiveCpltCallback>
 800597c:	e00c      	b.n	8005998 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9bb 	bl	8005d0e <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	08005f2f 	.word	0x08005f2f

080059a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	; 0x28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10d      	bne.n	80059fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_UART_IRQHandler+0x52>
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fb1a 	bl	800602c <UART_Receive_IT>
      return;
 80059f8:	e17b      	b.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80b1 	beq.w	8005b64 <HAL_UART_IRQHandler+0x1bc>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d105      	bne.n	8005a18 <HAL_UART_IRQHandler+0x70>
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80a6 	beq.w	8005b64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_UART_IRQHandler+0x90>
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f043 0201 	orr.w	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_UART_IRQHandler+0xb0>
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	f043 0202 	orr.w	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_UART_IRQHandler+0xd0>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d005      	beq.n	8005a78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	f043 0204 	orr.w	r2, r3, #4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00f      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xfa>
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_UART_IRQHandler+0xee>
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f043 0208 	orr.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 811e 	beq.w	8005ce8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x11e>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fab3 	bl	800602c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <HAL_UART_IRQHandler+0x146>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d031      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9dd 	bl	8005eae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d023      	beq.n	8005b4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	4a76      	ldr	r2, [pc, #472]	; (8005cf8 <HAL_UART_IRQHandler+0x350>)
 8005b20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd fe34 	bl	8003794 <HAL_DMA_Abort_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00e      	b.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8da 	bl	8005cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00a      	b.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f8d6 	bl	8005cfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e006      	b.n	8005b60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8d2 	bl	8005cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b5e:	e0c3      	b.n	8005ce8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	bf00      	nop
    return;
 8005b62:	e0c1      	b.n	8005ce8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 80a1 	bne.w	8005cb0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 809b 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8095 	beq.w	8005cb0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d04e      	beq.n	8005c48 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005bb4:	8a3b      	ldrh	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8098 	beq.w	8005cec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bc0:	8a3a      	ldrh	r2, [r7, #16]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	f080 8092 	bcs.w	8005cec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8a3a      	ldrh	r2, [r7, #16]
 8005bcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d02b      	beq.n	8005c30 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68da      	ldr	r2, [r3, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005be6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c06:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0210 	bic.w	r2, r2, #16
 8005c24:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fd fd78 	bl	8003720 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f86d 	bl	8005d20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c46:	e051      	b.n	8005cec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d047      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005c60:	8a7b      	ldrh	r3, [r7, #18]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d044      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c74:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0210 	bic.w	r2, r2, #16
 8005ca2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca4:	8a7b      	ldrh	r3, [r7, #18]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f839 	bl	8005d20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cae:	e01f      	b.n	8005cf0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <HAL_UART_IRQHandler+0x324>
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f94a 	bl	8005f5e <UART_Transmit_IT>
    return;
 8005cca:	e012      	b.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00d      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f98b 	bl	8005ffc <UART_EndTransmit_IT>
    return;
 8005ce6:	e004      	b.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
    return;
 8005ce8:	bf00      	nop
 8005cea:	e002      	b.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
      return;
 8005cec:	bf00      	nop
 8005cee:	e000      	b.n	8005cf2 <HAL_UART_IRQHandler+0x34a>
      return;
 8005cf0:	bf00      	nop
  }
}
 8005cf2:	3728      	adds	r7, #40	; 0x28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	08005f07 	.word	0x08005f07

08005cfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr

08005d0e <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e020      	b.n	8005d92 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2224      	movs	r2, #36	; 0x24
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 030c 	bic.w	r3, r3, #12
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f043 0308 	orr.w	r3, r3, #8
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e020      	b.n	8005df8 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2224      	movs	r2, #36	; 0x24
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f023 030c 	bic.w	r3, r3, #12
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f043 0304 	orr.w	r3, r3, #4
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bc80      	pop	{r7}
 8005e00:	4770      	bx	lr

08005e02 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	b2db      	uxtb	r3, r3
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	88fa      	ldrh	r2, [r7, #6]
 8005e54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2222      	movs	r2, #34	; 0x22
 8005e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e80:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0220 	orr.w	r2, r2, #32
 8005ea0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ec4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d107      	bne.n	8005eee <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0210 	bic.w	r2, r2, #16
 8005eec:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc80      	pop	{r7}
 8005f04:	4770      	bx	lr

08005f06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff feeb 	bl	8005cfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fedc 	bl	8005d0e <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b21      	cmp	r3, #33	; 0x21
 8005f70:	d13e      	bne.n	8005ff0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	d114      	bne.n	8005fa6 <UART_Transmit_IT+0x48>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d110      	bne.n	8005fa6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	1c9a      	adds	r2, r3, #2
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	621a      	str	r2, [r3, #32]
 8005fa4:	e008      	b.n	8005fb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	1c59      	adds	r1, r3, #1
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6211      	str	r1, [r2, #32]
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10f      	bne.n	8005fec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	e000      	b.n	8005ff2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ff0:	2302      	movs	r3, #2
  }
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr

08005ffc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006012:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fb fef5 	bl	8001e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b22      	cmp	r3, #34	; 0x22
 800603e:	f040 8099 	bne.w	8006174 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604a:	d117      	bne.n	800607c <UART_Receive_IT+0x50>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d113      	bne.n	800607c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606a:	b29a      	uxth	r2, r3
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	1c9a      	adds	r2, r3, #2
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	629a      	str	r2, [r3, #40]	; 0x28
 800607a:	e026      	b.n	80060ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608e:	d007      	beq.n	80060a0 <UART_Receive_IT+0x74>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <UART_Receive_IT+0x82>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e008      	b.n	80060c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4619      	mov	r1, r3
 80060d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d148      	bne.n	8006170 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 0220 	bic.w	r2, r2, #32
 80060ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	2b01      	cmp	r3, #1
 800611c:	d123      	bne.n	8006166 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0210 	bic.w	r2, r2, #16
 8006132:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b10      	cmp	r3, #16
 8006140:	d10a      	bne.n	8006158 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	60fb      	str	r3, [r7, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff fdde 	bl	8005d20 <HAL_UARTEx_RxEventCallback>
 8006164:	e002      	b.n	800616c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb fe8e 	bl	8001e88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	e002      	b.n	8006176 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	e000      	b.n	8006176 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006174:	2302      	movs	r3, #2
  }
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061ba:	f023 030c 	bic.w	r3, r3, #12
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	430b      	orrs	r3, r1
 80061c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2c      	ldr	r2, [pc, #176]	; (8006294 <UART_SetConfig+0x114>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d103      	bne.n	80061f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061e8:	f7fe f9ec 	bl	80045c4 <HAL_RCC_GetPCLK2Freq>
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	e002      	b.n	80061f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061f0:	f7fe f9d4 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 80061f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4613      	mov	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	009a      	lsls	r2, r3, #2
 8006200:	441a      	add	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	4a22      	ldr	r2, [pc, #136]	; (8006298 <UART_SetConfig+0x118>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	0119      	lsls	r1, r3, #4
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009a      	lsls	r2, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	fbb2 f2f3 	udiv	r2, r2, r3
 800622c:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <UART_SetConfig+0x118>)
 800622e:	fba3 0302 	umull	r0, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2064      	movs	r0, #100	; 0x64
 8006236:	fb00 f303 	mul.w	r3, r0, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	3332      	adds	r3, #50	; 0x32
 8006240:	4a15      	ldr	r2, [pc, #84]	; (8006298 <UART_SetConfig+0x118>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800624c:	4419      	add	r1, r3
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	009a      	lsls	r2, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	fbb2 f2f3 	udiv	r2, r2, r3
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <UART_SetConfig+0x118>)
 8006266:	fba3 0302 	umull	r0, r3, r3, r2
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	2064      	movs	r0, #100	; 0x64
 800626e:	fb00 f303 	mul.w	r3, r0, r3
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	3332      	adds	r3, #50	; 0x32
 8006278:	4a07      	ldr	r2, [pc, #28]	; (8006298 <UART_SetConfig+0x118>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	440a      	add	r2, r1
 800628a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40013800 	.word	0x40013800
 8006298:	51eb851f 	.word	0x51eb851f

0800629c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a2:	f3ef 8305 	mrs	r3, IPSR
 80062a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80062a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10f      	bne.n	80062ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ae:	f3ef 8310 	mrs	r3, PRIMASK
 80062b2:	607b      	str	r3, [r7, #4]
  return(result);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <osKernelInitialize+0x32>
 80062ba:	4b10      	ldr	r3, [pc, #64]	; (80062fc <osKernelInitialize+0x60>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d109      	bne.n	80062d6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062c2:	f3ef 8311 	mrs	r3, BASEPRI
 80062c6:	603b      	str	r3, [r7, #0]
  return(result);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80062ce:	f06f 0305 	mvn.w	r3, #5
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e00c      	b.n	80062f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <osKernelInitialize+0x60>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d105      	bne.n	80062ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <osKernelInitialize+0x60>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e002      	b.n	80062f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295
 80062ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bc80      	pop	{r7}
 80062fa:	4770      	bx	lr
 80062fc:	200000e0 	.word	0x200000e0

08006300 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006306:	f3ef 8305 	mrs	r3, IPSR
 800630a:	60bb      	str	r3, [r7, #8]
  return(result);
 800630c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10f      	bne.n	8006332 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006312:	f3ef 8310 	mrs	r3, PRIMASK
 8006316:	607b      	str	r3, [r7, #4]
  return(result);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <osKernelStart+0x32>
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <osKernelStart+0x64>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d109      	bne.n	800633a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006326:	f3ef 8311 	mrs	r3, BASEPRI
 800632a:	603b      	str	r3, [r7, #0]
  return(result);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006332:	f06f 0305 	mvn.w	r3, #5
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e00e      	b.n	8006358 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <osKernelStart+0x64>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d107      	bne.n	8006352 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <osKernelStart+0x64>)
 8006344:	2202      	movs	r2, #2
 8006346:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006348:	f001 fca4 	bl	8007c94 <vTaskStartScheduler>
      stat = osOK;
 800634c:	2300      	movs	r3, #0
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e002      	b.n	8006358 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006358:	68fb      	ldr	r3, [r7, #12]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200000e0 	.word	0x200000e0

08006368 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b092      	sub	sp, #72	; 0x48
 800636c:	af04      	add	r7, sp, #16
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006378:	f3ef 8305 	mrs	r3, IPSR
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 8094 	bne.w	80064ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006386:	f3ef 8310 	mrs	r3, PRIMASK
 800638a:	623b      	str	r3, [r7, #32]
  return(result);
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 808d 	bne.w	80064ae <osThreadNew+0x146>
 8006394:	4b48      	ldr	r3, [pc, #288]	; (80064b8 <osThreadNew+0x150>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d106      	bne.n	80063aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800639c:	f3ef 8311 	mrs	r3, BASEPRI
 80063a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f040 8082 	bne.w	80064ae <osThreadNew+0x146>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d07e      	beq.n	80064ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80063b4:	2318      	movs	r3, #24
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80063b8:	2300      	movs	r3, #0
 80063ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80063bc:	f107 031b 	add.w	r3, r7, #27
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80063c2:	f04f 33ff 	mov.w	r3, #4294967295
 80063c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d045      	beq.n	800645a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <osThreadNew+0x74>
        name = attr->name;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <osThreadNew+0x9a>
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	2b38      	cmp	r3, #56	; 0x38
 80063f4:	d805      	bhi.n	8006402 <osThreadNew+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <osThreadNew+0x9e>
        return (NULL);
 8006402:	2300      	movs	r3, #0
 8006404:	e054      	b.n	80064b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00e      	beq.n	800643c <osThreadNew+0xd4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b5b      	cmp	r3, #91	; 0x5b
 8006424:	d90a      	bls.n	800643c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <osThreadNew+0xd4>
        mem = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
 800643a:	e010      	b.n	800645e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10c      	bne.n	800645e <osThreadNew+0xf6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d108      	bne.n	800645e <osThreadNew+0xf6>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <osThreadNew+0xf6>
          mem = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
 8006458:	e001      	b.n	800645e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	2b01      	cmp	r3, #1
 8006462:	d110      	bne.n	8006486 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006478:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f001 fa3e 	bl	80078fc <xTaskCreateStatic>
 8006480:	4603      	mov	r3, r0
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e013      	b.n	80064ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	2b00      	cmp	r3, #0
 800648a:	d110      	bne.n	80064ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	b29a      	uxth	r2, r3
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f001 fa88 	bl	80079b4 <xTaskCreate>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d001      	beq.n	80064ae <osThreadNew+0x146>
          hTask = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3738      	adds	r7, #56	; 0x38
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200000e0 	.word	0x200000e0

080064bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c4:	f3ef 8305 	mrs	r3, IPSR
 80064c8:	613b      	str	r3, [r7, #16]
  return(result);
 80064ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10f      	bne.n	80064f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d0:	f3ef 8310 	mrs	r3, PRIMASK
 80064d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d109      	bne.n	80064f0 <osDelay+0x34>
 80064dc:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <osDelay+0x58>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d109      	bne.n	80064f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064e4:	f3ef 8311 	mrs	r3, BASEPRI
 80064e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <osDelay+0x3c>
    stat = osErrorISR;
 80064f0:	f06f 0305 	mvn.w	r3, #5
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e007      	b.n	8006508 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fb92 	bl	8007c2c <vTaskDelay>
    }
  }

  return (stat);
 8006508:	697b      	ldr	r3, [r7, #20]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	200000e0 	.word	0x200000e0

08006518 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b08c      	sub	sp, #48	; 0x30
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006524:	2300      	movs	r3, #0
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006528:	f3ef 8305 	mrs	r3, IPSR
 800652c:	61bb      	str	r3, [r7, #24]
  return(result);
 800652e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006530:	2b00      	cmp	r3, #0
 8006532:	f040 8086 	bne.w	8006642 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006536:	f3ef 8310 	mrs	r3, PRIMASK
 800653a:	617b      	str	r3, [r7, #20]
  return(result);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d17f      	bne.n	8006642 <osSemaphoreNew+0x12a>
 8006542:	4b42      	ldr	r3, [pc, #264]	; (800664c <osSemaphoreNew+0x134>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d105      	bne.n	8006556 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800654a:	f3ef 8311 	mrs	r3, BASEPRI
 800654e:	613b      	str	r3, [r7, #16]
  return(result);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d175      	bne.n	8006642 <osSemaphoreNew+0x12a>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d072      	beq.n	8006642 <osSemaphoreNew+0x12a>
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	429a      	cmp	r2, r3
 8006562:	d86e      	bhi.n	8006642 <osSemaphoreNew+0x12a>
    mem = -1;
 8006564:	f04f 33ff 	mov.w	r3, #4294967295
 8006568:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d006      	beq.n	8006586 <osSemaphoreNew+0x6e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b4f      	cmp	r3, #79	; 0x4f
 800657e:	d902      	bls.n	8006586 <osSemaphoreNew+0x6e>
        mem = 1;
 8006580:	2301      	movs	r3, #1
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	e00c      	b.n	80065a0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d108      	bne.n	80065a0 <osSemaphoreNew+0x88>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <osSemaphoreNew+0x88>
          mem = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	e001      	b.n	80065a0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d04c      	beq.n	8006642 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d128      	bne.n	8006600 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d10a      	bne.n	80065ca <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2203      	movs	r2, #3
 80065ba:	9200      	str	r2, [sp, #0]
 80065bc:	2200      	movs	r2, #0
 80065be:	2100      	movs	r1, #0
 80065c0:	2001      	movs	r0, #1
 80065c2:	f000 fa87 	bl	8006ad4 <xQueueGenericCreateStatic>
 80065c6:	6278      	str	r0, [r7, #36]	; 0x24
 80065c8:	e005      	b.n	80065d6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80065ca:	2203      	movs	r2, #3
 80065cc:	2100      	movs	r1, #0
 80065ce:	2001      	movs	r0, #1
 80065d0:	f000 faf7 	bl	8006bc2 <xQueueGenericCreate>
 80065d4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d022      	beq.n	8006622 <osSemaphoreNew+0x10a>
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01f      	beq.n	8006622 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80065e2:	2300      	movs	r3, #0
 80065e4:	2200      	movs	r2, #0
 80065e6:	2100      	movs	r1, #0
 80065e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ea:	f000 fbb5 	bl	8006d58 <xQueueGenericSend>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d016      	beq.n	8006622 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80065f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065f6:	f000 ffb1 	bl	800755c <vQueueDelete>
            hSemaphore = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
 80065fe:	e010      	b.n	8006622 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d108      	bne.n	8006618 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	461a      	mov	r2, r3
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fb38 	bl	8006c84 <xQueueCreateCountingSemaphoreStatic>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24
 8006616:	e004      	b.n	8006622 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fb69 	bl	8006cf2 <xQueueCreateCountingSemaphore>
 8006620:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00c      	beq.n	8006642 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <osSemaphoreNew+0x11e>
          name = attr->name;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e001      	b.n	800663a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800663a:	69f9      	ldr	r1, [r7, #28]
 800663c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800663e:	f001 f8d7 	bl	80077f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006644:	4618      	mov	r0, r3
 8006646:	3728      	adds	r7, #40	; 0x28
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	200000e0 	.word	0x200000e0

08006650 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b08c      	sub	sp, #48	; 0x30
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006660:	f3ef 8305 	mrs	r3, IPSR
 8006664:	61bb      	str	r3, [r7, #24]
  return(result);
 8006666:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006668:	2b00      	cmp	r3, #0
 800666a:	d16f      	bne.n	800674c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800666c:	f3ef 8310 	mrs	r3, PRIMASK
 8006670:	617b      	str	r3, [r7, #20]
  return(result);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d169      	bne.n	800674c <osMessageQueueNew+0xfc>
 8006678:	4b37      	ldr	r3, [pc, #220]	; (8006758 <osMessageQueueNew+0x108>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d105      	bne.n	800668c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006680:	f3ef 8311 	mrs	r3, BASEPRI
 8006684:	613b      	str	r3, [r7, #16]
  return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d15f      	bne.n	800674c <osMessageQueueNew+0xfc>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d05c      	beq.n	800674c <osMessageQueueNew+0xfc>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d059      	beq.n	800674c <osMessageQueueNew+0xfc>
    mem = -1;
 8006698:	f04f 33ff 	mov.w	r3, #4294967295
 800669c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d029      	beq.n	80066f8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d012      	beq.n	80066d2 <osMessageQueueNew+0x82>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b4f      	cmp	r3, #79	; 0x4f
 80066b2:	d90e      	bls.n	80066d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d302      	bcc.n	80066d2 <osMessageQueueNew+0x82>
        mem = 1;
 80066cc:	2301      	movs	r3, #1
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	e014      	b.n	80066fc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d110      	bne.n	80066fc <osMessageQueueNew+0xac>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10c      	bne.n	80066fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <osMessageQueueNew+0xac>
          mem = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	623b      	str	r3, [r7, #32]
 80066f6:	e001      	b.n	80066fc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d10b      	bne.n	800671a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	2100      	movs	r1, #0
 800670c:	9100      	str	r1, [sp, #0]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f9df 	bl	8006ad4 <xQueueGenericCreateStatic>
 8006716:	6278      	str	r0, [r7, #36]	; 0x24
 8006718:	e008      	b.n	800672c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d105      	bne.n	800672c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006720:	2200      	movs	r2, #0
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fa4c 	bl	8006bc2 <xQueueGenericCreate>
 800672a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	e001      	b.n	8006744 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006740:	2300      	movs	r3, #0
 8006742:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006748:	f001 f852 	bl	80077f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800674e:	4618      	mov	r0, r3
 8006750:	3728      	adds	r7, #40	; 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200000e0 	.word	0x200000e0

0800675c <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800675c:	b580      	push	{r7, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800676e:	2300      	movs	r3, #0
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006772:	f3ef 8305 	mrs	r3, IPSR
 8006776:	61fb      	str	r3, [r7, #28]
  return(result);
 8006778:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10f      	bne.n	800679e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677e:	f3ef 8310 	mrs	r3, PRIMASK
 8006782:	61bb      	str	r3, [r7, #24]
  return(result);
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <osMessageQueueGet+0x42>
 800678a:	4b2b      	ldr	r3, [pc, #172]	; (8006838 <osMessageQueueGet+0xdc>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d12e      	bne.n	80067f0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006792:	f3ef 8311 	mrs	r3, BASEPRI
 8006796:	617b      	str	r3, [r7, #20]
  return(result);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d028      	beq.n	80067f0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <osMessageQueueGet+0x54>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <osMessageQueueGet+0x54>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80067b0:	f06f 0303 	mvn.w	r3, #3
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067b6:	e038      	b.n	800682a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	461a      	mov	r2, r3
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	6a38      	ldr	r0, [r7, #32]
 80067c6:	f000 fe49 	bl	800745c <xQueueReceiveFromISR>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d003      	beq.n	80067d8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80067d0:	f06f 0302 	mvn.w	r3, #2
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067d6:	e028      	b.n	800682a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d025      	beq.n	800682a <osMessageQueueGet+0xce>
 80067de:	4b17      	ldr	r3, [pc, #92]	; (800683c <osMessageQueueGet+0xe0>)
 80067e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80067ee:	e01c      	b.n	800682a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <osMessageQueueGet+0xa0>
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80067fc:	f06f 0303 	mvn.w	r3, #3
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
 8006802:	e013      	b.n	800682c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	6a38      	ldr	r0, [r7, #32]
 800680a:	f000 fc3b 	bl	8007084 <xQueueReceive>
 800680e:	4603      	mov	r3, r0
 8006810:	2b01      	cmp	r3, #1
 8006812:	d00b      	beq.n	800682c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800681a:	f06f 0301 	mvn.w	r3, #1
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
 8006820:	e004      	b.n	800682c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006822:	f06f 0302 	mvn.w	r3, #2
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
 8006828:	e000      	b.n	800682c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800682a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800682e:	4618      	mov	r0, r3
 8006830:	3728      	adds	r7, #40	; 0x28
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200000e0 	.word	0x200000e0
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a06      	ldr	r2, [pc, #24]	; (8006868 <vApplicationGetIdleTaskMemory+0x28>)
 8006850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4a05      	ldr	r2, [pc, #20]	; (800686c <vApplicationGetIdleTaskMemory+0x2c>)
 8006856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2280      	movs	r2, #128	; 0x80
 800685c:	601a      	str	r2, [r3, #0]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	bc80      	pop	{r7}
 8006866:	4770      	bx	lr
 8006868:	200000e4 	.word	0x200000e4
 800686c:	20000140 	.word	0x20000140

08006870 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a07      	ldr	r2, [pc, #28]	; (800689c <vApplicationGetTimerTaskMemory+0x2c>)
 8006880:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <vApplicationGetTimerTaskMemory+0x30>)
 8006886:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800688e:	601a      	str	r2, [r3, #0]
}
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20000340 	.word	0x20000340
 80068a0:	2000039c 	.word	0x2000039c

080068a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f103 0208 	add.w	r2, r3, #8
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295
 80068bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f103 0208 	add.w	r2, r3, #8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f103 0208 	add.w	r2, r3, #8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr

080068fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	601a      	str	r2, [r3, #0]
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006956:	d103      	bne.n	8006960 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e00c      	b.n	800697a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3308      	adds	r3, #8
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e002      	b.n	800696e <vListInsert+0x2e>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	d2f6      	bcs.n	8006968 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
}
 80069a6:	bf00      	nop
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6892      	ldr	r2, [r2, #8]
 80069c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6852      	ldr	r2, [r2, #4]
 80069d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d103      	bne.n	80069e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	1e5a      	subs	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
	...

08006a04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a2e:	f002 fd85 	bl	800953c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a3e:	fb01 f303 	mul.w	r3, r1, r3
 8006a42:	441a      	add	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a64:	fb01 f303 	mul.w	r3, r1, r3
 8006a68:	441a      	add	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	22ff      	movs	r2, #255	; 0xff
 8006a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d114      	bne.n	8006aae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01a      	beq.n	8006ac2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3310      	adds	r3, #16
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 fb9b 	bl	80081cc <xTaskRemoveFromEventList>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <xQueueGenericReset+0xcc>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	e009      	b.n	8006ac2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3310      	adds	r3, #16
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7ff fef6 	bl	80068a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3324      	adds	r3, #36	; 0x24
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff fef1 	bl	80068a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ac2:	f002 fd6b 	bl	800959c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ac6:	2301      	movs	r3, #1
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	e000ed04 	.word	0xe000ed04

08006ad4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08e      	sub	sp, #56	; 0x38
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <xQueueGenericCreateStatic+0x52>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <xQueueGenericCreateStatic+0x56>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <xQueueGenericCreateStatic+0x58>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	623b      	str	r3, [r7, #32]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <xQueueGenericCreateStatic+0x7e>
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <xQueueGenericCreateStatic+0x82>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueGenericCreateStatic+0x84>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61fb      	str	r3, [r7, #28]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b72:	2350      	movs	r3, #80	; 0x50
 8006b74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b50      	cmp	r3, #80	; 0x50
 8006b7a:	d00a      	beq.n	8006b92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	61bb      	str	r3, [r7, #24]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ba4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f843 	bl	8006c3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3730      	adds	r7, #48	; 0x30
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b08a      	sub	sp, #40	; 0x28
 8006bc6:	af02      	add	r7, sp, #8
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <xQueueGenericCreate+0x2a>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	613b      	str	r3, [r7, #16]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	e004      	b.n	8006c02 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
 8006c00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	3350      	adds	r3, #80	; 0x50
 8006c06:	4618      	mov	r0, r3
 8006c08:	f002 fd98 	bl	800973c <pvPortMalloc>
 8006c0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00f      	beq.n	8006c34 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	3350      	adds	r3, #80	; 0x50
 8006c18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c22:	79fa      	ldrb	r2, [r7, #7]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f805 	bl	8006c3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006c34:	69bb      	ldr	r3, [r7, #24]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e002      	b.n	8006c60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	69b8      	ldr	r0, [r7, #24]
 8006c70:	f7ff fec8 	bl	8006a04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	78fa      	ldrb	r2, [r7, #3]
 8006c78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	61bb      	str	r3, [r7, #24]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d90a      	bls.n	8006cca <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	617b      	str	r3, [r7, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cca:	2302      	movs	r3, #2
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff fefd 	bl	8006ad4 <xQueueGenericCreateStatic>
 8006cda:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
	}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b086      	sub	sp, #24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	613b      	str	r3, [r7, #16]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d90a      	bls.n	8006d36 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d36:	2202      	movs	r2, #2
 8006d38:	2100      	movs	r1, #0
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff ff41 	bl	8006bc2 <xQueueGenericCreate>
 8006d40:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006d4e:	697b      	ldr	r3, [r7, #20]
	}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08e      	sub	sp, #56	; 0x38
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d66:	2300      	movs	r3, #0
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xQueueGenericSend+0x32>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <xQueueGenericSend+0x40>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <xQueueGenericSend+0x44>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <xQueueGenericSend+0x46>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <xQueueGenericSend+0x60>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d103      	bne.n	8006dc6 <xQueueGenericSend+0x6e>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <xQueueGenericSend+0x72>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <xQueueGenericSend+0x74>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	623b      	str	r3, [r7, #32]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006de6:	f001 fbb3 	bl	8008550 <xTaskGetSchedulerState>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <xQueueGenericSend+0x9e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <xQueueGenericSend+0xa2>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <xQueueGenericSend+0xa4>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xQueueGenericSend+0xbe>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	61fb      	str	r3, [r7, #28]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e16:	f002 fb91 	bl	800953c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <xQueueGenericSend+0xd4>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d129      	bne.n	8006e80 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e32:	f000 fbcd 	bl	80075d0 <prvCopyDataToQueue>
 8006e36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d010      	beq.n	8006e62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	3324      	adds	r3, #36	; 0x24
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f9c1 	bl	80081cc <xTaskRemoveFromEventList>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d013      	beq.n	8006e78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e50:	4b3f      	ldr	r3, [pc, #252]	; (8006f50 <xQueueGenericSend+0x1f8>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	e00a      	b.n	8006e78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e68:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <xQueueGenericSend+0x1f8>)
 8006e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e78:	f002 fb90 	bl	800959c <vPortExitCritical>
				return pdPASS;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e063      	b.n	8006f48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e86:	f002 fb89 	bl	800959c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e05c      	b.n	8006f48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f9fb 	bl	8008294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea2:	f002 fb7b 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ea6:	f000 ff5b 	bl	8007d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eaa:	f002 fb47 	bl	800953c <vPortEnterCritical>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb4:	b25b      	sxtb	r3, r3
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d103      	bne.n	8006ec4 <xQueueGenericSend+0x16c>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d103      	bne.n	8006eda <xQueueGenericSend+0x182>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eda:	f002 fb5f 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ede:	1d3a      	adds	r2, r7, #4
 8006ee0:	f107 0314 	add.w	r3, r7, #20
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 f9ea 	bl	80082c0 <xTaskCheckForTimeOut>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d124      	bne.n	8006f3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ef4:	f000 fc64 	bl	80077c0 <prvIsQueueFull>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d018      	beq.n	8006f30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	3310      	adds	r3, #16
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 f910 	bl	800812c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f0e:	f000 fbef 	bl	80076f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f12:	f000 ff33 	bl	8007d7c <xTaskResumeAll>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f47f af7c 	bne.w	8006e16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <xQueueGenericSend+0x1f8>)
 8006f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	e772      	b.n	8006e16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f32:	f000 fbdd 	bl	80076f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f36:	f000 ff21 	bl	8007d7c <xTaskResumeAll>
 8006f3a:	e76c      	b.n	8006e16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f3e:	f000 fbd7 	bl	80076f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f42:	f000 ff1b 	bl	8007d7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f46:	2300      	movs	r3, #0
		}
	}
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3738      	adds	r7, #56	; 0x38
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08e      	sub	sp, #56	; 0x38
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <xQueueGenericSendFromISR+0x3c>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <xQueueGenericSendFromISR+0x40>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <xQueueGenericSendFromISR+0x42>
 8006f94:	2300      	movs	r3, #0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	623b      	str	r3, [r7, #32]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d103      	bne.n	8006fbe <xQueueGenericSendFromISR+0x6a>
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <xQueueGenericSendFromISR+0x6e>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueGenericSendFromISR+0x70>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	61fb      	str	r3, [r7, #28]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fde:	f002 fb6f 	bl	80096c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	61ba      	str	r2, [r7, #24]
 8006ff8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	429a      	cmp	r2, r3
 8007008:	d302      	bcc.n	8007010 <xQueueGenericSendFromISR+0xbc>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d12c      	bne.n	800706a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007020:	f000 fad6 	bl	80075d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007024:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d112      	bne.n	8007054 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	d016      	beq.n	8007064 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	3324      	adds	r3, #36	; 0x24
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f8c6 	bl	80081cc <xTaskRemoveFromEventList>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00e      	beq.n	8007064 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00b      	beq.n	8007064 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e007      	b.n	8007064 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007054:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007058:	3301      	adds	r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	b25a      	sxtb	r2, r3
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007064:	2301      	movs	r3, #1
 8007066:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007068:	e001      	b.n	800706e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800706a:	2300      	movs	r3, #0
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007078:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800707c:	4618      	mov	r0, r3
 800707e:	3738      	adds	r7, #56	; 0x38
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007090:	2300      	movs	r3, #0
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xQueueReceive+0x30>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	623b      	str	r3, [r7, #32]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d103      	bne.n	80070c2 <xQueueReceive+0x3e>
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <xQueueReceive+0x42>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <xQueueReceive+0x44>
 80070c6:	2300      	movs	r3, #0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueReceive+0x5e>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61fb      	str	r3, [r7, #28]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070e2:	f001 fa35 	bl	8008550 <xTaskGetSchedulerState>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <xQueueReceive+0x6e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <xQueueReceive+0x72>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <xQueueReceive+0x74>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueReceive+0x8e>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	61bb      	str	r3, [r7, #24]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007112:	f002 fa13 	bl	800953c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01f      	beq.n	8007162 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007126:	f000 fabd 	bl	80076a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	1e5a      	subs	r2, r3, #1
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00f      	beq.n	800715a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	3310      	adds	r3, #16
 800713e:	4618      	mov	r0, r3
 8007140:	f001 f844 	bl	80081cc <xTaskRemoveFromEventList>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d007      	beq.n	800715a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800714a:	4b3d      	ldr	r3, [pc, #244]	; (8007240 <xQueueReceive+0x1bc>)
 800714c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800715a:	f002 fa1f 	bl	800959c <vPortExitCritical>
				return pdPASS;
 800715e:	2301      	movs	r3, #1
 8007160:	e069      	b.n	8007236 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007168:	f002 fa18 	bl	800959c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800716c:	2300      	movs	r3, #0
 800716e:	e062      	b.n	8007236 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007176:	f107 0310 	add.w	r3, r7, #16
 800717a:	4618      	mov	r0, r3
 800717c:	f001 f88a 	bl	8008294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007184:	f002 fa0a 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007188:	f000 fdea 	bl	8007d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718c:	f002 f9d6 	bl	800953c <vPortEnterCritical>
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007196:	b25b      	sxtb	r3, r3
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d103      	bne.n	80071a6 <xQueueReceive+0x122>
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d103      	bne.n	80071bc <xQueueReceive+0x138>
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071bc:	f002 f9ee 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071c0:	1d3a      	adds	r2, r7, #4
 80071c2:	f107 0310 	add.w	r3, r7, #16
 80071c6:	4611      	mov	r1, r2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 f879 	bl	80082c0 <xTaskCheckForTimeOut>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d123      	bne.n	800721c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d6:	f000 fadd 	bl	8007794 <prvIsQueueEmpty>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d017      	beq.n	8007210 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4611      	mov	r1, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 ff9f 	bl	800812c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f0:	f000 fa7e 	bl	80076f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071f4:	f000 fdc2 	bl	8007d7c <xTaskResumeAll>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d189      	bne.n	8007112 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071fe:	4b10      	ldr	r3, [pc, #64]	; (8007240 <xQueueReceive+0x1bc>)
 8007200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007204:	601a      	str	r2, [r3, #0]
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	e780      	b.n	8007112 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007212:	f000 fa6d 	bl	80076f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007216:	f000 fdb1 	bl	8007d7c <xTaskResumeAll>
 800721a:	e77a      	b.n	8007112 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800721c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800721e:	f000 fa67 	bl	80076f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007222:	f000 fdab 	bl	8007d7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007228:	f000 fab4 	bl	8007794 <prvIsQueueEmpty>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	f43f af6f 	beq.w	8007112 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007234:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007236:	4618      	mov	r0, r3
 8007238:	3730      	adds	r7, #48	; 0x30
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	e000ed04 	.word	0xe000ed04

08007244 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800724e:	2300      	movs	r3, #0
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	623b      	str	r3, [r7, #32]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	61fb      	str	r3, [r7, #28]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007294:	f001 f95c 	bl	8008550 <xTaskGetSchedulerState>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d102      	bne.n	80072a4 <xQueueSemaphoreTake+0x60>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <xQueueSemaphoreTake+0x64>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <xQueueSemaphoreTake+0x66>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61bb      	str	r3, [r7, #24]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80072c4:	f002 f93a 	bl	800953c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d024      	beq.n	800731e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	1e5a      	subs	r2, r3, #1
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80072e4:	f001 fab4 	bl	8008850 <pvTaskIncrementMutexHeldCount>
 80072e8:	4602      	mov	r2, r0
 80072ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ec:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00f      	beq.n	8007316 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	3310      	adds	r3, #16
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 ff66 	bl	80081cc <xTaskRemoveFromEventList>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007306:	4b54      	ldr	r3, [pc, #336]	; (8007458 <xQueueSemaphoreTake+0x214>)
 8007308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007316:	f002 f941 	bl	800959c <vPortExitCritical>
				return pdPASS;
 800731a:	2301      	movs	r3, #1
 800731c:	e097      	b.n	800744e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d111      	bne.n	8007348 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	617b      	str	r3, [r7, #20]
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007340:	f002 f92c 	bl	800959c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007344:	2300      	movs	r3, #0
 8007346:	e082      	b.n	800744e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734a:	2b00      	cmp	r3, #0
 800734c:	d106      	bne.n	800735c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800734e:	f107 030c 	add.w	r3, r7, #12
 8007352:	4618      	mov	r0, r3
 8007354:	f000 ff9e 	bl	8008294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007358:	2301      	movs	r3, #1
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800735c:	f002 f91e 	bl	800959c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007360:	f000 fcfe 	bl	8007d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007364:	f002 f8ea 	bl	800953c <vPortEnterCritical>
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800736e:	b25b      	sxtb	r3, r3
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d103      	bne.n	800737e <xQueueSemaphoreTake+0x13a>
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007384:	b25b      	sxtb	r3, r3
 8007386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738a:	d103      	bne.n	8007394 <xQueueSemaphoreTake+0x150>
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007394:	f002 f902 	bl	800959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007398:	463a      	mov	r2, r7
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	4611      	mov	r1, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 ff8d 	bl	80082c0 <xTaskCheckForTimeOut>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d132      	bne.n	8007412 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ae:	f000 f9f1 	bl	8007794 <prvIsQueueEmpty>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d026      	beq.n	8007406 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d109      	bne.n	80073d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80073c0:	f002 f8bc 	bl	800953c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 f8df 	bl	800858c <xTaskPriorityInherit>
 80073ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80073d0:	f002 f8e4 	bl	800959c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	3324      	adds	r3, #36	; 0x24
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	4611      	mov	r1, r2
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fea5 	bl	800812c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073e4:	f000 f984 	bl	80076f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073e8:	f000 fcc8 	bl	8007d7c <xTaskResumeAll>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f47f af68 	bne.w	80072c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80073f4:	4b18      	ldr	r3, [pc, #96]	; (8007458 <xQueueSemaphoreTake+0x214>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	e75e      	b.n	80072c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007408:	f000 f972 	bl	80076f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800740c:	f000 fcb6 	bl	8007d7c <xTaskResumeAll>
 8007410:	e758      	b.n	80072c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007414:	f000 f96c 	bl	80076f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007418:	f000 fcb0 	bl	8007d7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800741c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800741e:	f000 f9b9 	bl	8007794 <prvIsQueueEmpty>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	f43f af4d 	beq.w	80072c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00d      	beq.n	800744c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007430:	f002 f884 	bl	800953c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007436:	f000 f8b4 	bl	80075a2 <prvGetDisinheritPriorityAfterTimeout>
 800743a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f97e 	bl	8008744 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007448:	f002 f8a8 	bl	800959c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800744c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800744e:	4618      	mov	r0, r3
 8007450:	3738      	adds	r7, #56	; 0x38
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08e      	sub	sp, #56	; 0x38
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	623b      	str	r3, [r7, #32]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <xQueueReceiveFromISR+0x3a>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <xQueueReceiveFromISR+0x3e>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueReceiveFromISR+0x40>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61fb      	str	r3, [r7, #28]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074b6:	f002 f903 	bl	80096c0 <vPortValidateInterruptPriority>
	__asm volatile
 80074ba:	f3ef 8211 	mrs	r2, BASEPRI
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	61ba      	str	r2, [r7, #24]
 80074d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80074d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d02f      	beq.n	8007542 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f0:	f000 f8d8 	bl	80076a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	1e5a      	subs	r2, r3, #1
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d112      	bne.n	800752c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d016      	beq.n	800753c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	3310      	adds	r3, #16
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fe5a 	bl	80081cc <xTaskRemoveFromEventList>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00e      	beq.n	800753c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e007      	b.n	800753c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800752c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007530:	3301      	adds	r3, #1
 8007532:	b2db      	uxtb	r3, r3
 8007534:	b25a      	sxtb	r2, r3
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800753c:	2301      	movs	r3, #1
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
 8007540:	e001      	b.n	8007546 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007542:	2300      	movs	r3, #0
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	613b      	str	r3, [r7, #16]
	__asm volatile
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f383 8811 	msr	BASEPRI, r3
}
 8007550:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007554:	4618      	mov	r0, r3
 8007556:	3738      	adds	r7, #56	; 0x38
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <vQueueDelete+0x28>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	60bb      	str	r3, [r7, #8]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f95b 	bl	8007840 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f002 f8e3 	bl	8009760 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d006      	beq.n	80075c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	e001      	b.n	80075c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80075c0:	2300      	movs	r3, #0
 80075c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80075c4:	68fb      	ldr	r3, [r7, #12]
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr

080075d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10d      	bne.n	800760a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d14d      	bne.n	8007692 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 f834 	bl	8008668 <xTaskPriorityDisinherit>
 8007600:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	605a      	str	r2, [r3, #4]
 8007608:	e043      	b.n	8007692 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d119      	bne.n	8007644 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6898      	ldr	r0, [r3, #8]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	461a      	mov	r2, r3
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	f002 f8ec 	bl	80097f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	441a      	add	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	429a      	cmp	r2, r3
 8007638:	d32b      	bcc.n	8007692 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	609a      	str	r2, [r3, #8]
 8007642:	e026      	b.n	8007692 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68d8      	ldr	r0, [r3, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	461a      	mov	r2, r3
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	f002 f8d2 	bl	80097f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	425b      	negs	r3, r3
 800765e:	441a      	add	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d207      	bcs.n	8007680 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	425b      	negs	r3, r3
 800767a:	441a      	add	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d105      	bne.n	8007692 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	3b01      	subs	r3, #1
 8007690:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800769a:	697b      	ldr	r3, [r7, #20]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d018      	beq.n	80076e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	441a      	add	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d303      	bcc.n	80076d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68d9      	ldr	r1, [r3, #12]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	461a      	mov	r2, r3
 80076e2:	6838      	ldr	r0, [r7, #0]
 80076e4:	f002 f888 	bl	80097f8 <memcpy>
	}
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076f8:	f001 ff20 	bl	800953c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007702:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007704:	e011      	b.n	800772a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	d012      	beq.n	8007734 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3324      	adds	r3, #36	; 0x24
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fd5a 	bl	80081cc <xTaskRemoveFromEventList>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800771e:	f000 fe31 	bl	8008384 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	3b01      	subs	r3, #1
 8007726:	b2db      	uxtb	r3, r3
 8007728:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800772a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	dce9      	bgt.n	8007706 <prvUnlockQueue+0x16>
 8007732:	e000      	b.n	8007736 <prvUnlockQueue+0x46>
					break;
 8007734:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	22ff      	movs	r2, #255	; 0xff
 800773a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800773e:	f001 ff2d 	bl	800959c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007742:	f001 fefb 	bl	800953c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800774c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800774e:	e011      	b.n	8007774 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d012      	beq.n	800777e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3310      	adds	r3, #16
 800775c:	4618      	mov	r0, r3
 800775e:	f000 fd35 	bl	80081cc <xTaskRemoveFromEventList>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007768:	f000 fe0c 	bl	8008384 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	3b01      	subs	r3, #1
 8007770:	b2db      	uxtb	r3, r3
 8007772:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	dce9      	bgt.n	8007750 <prvUnlockQueue+0x60>
 800777c:	e000      	b.n	8007780 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800777e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	22ff      	movs	r2, #255	; 0xff
 8007784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007788:	f001 ff08 	bl	800959c <vPortExitCritical>
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800779c:	f001 fece 	bl	800953c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077a8:	2301      	movs	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e001      	b.n	80077b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077b2:	f001 fef3 	bl	800959c <vPortExitCritical>

	return xReturn;
 80077b6:	68fb      	ldr	r3, [r7, #12]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077c8:	f001 feb8 	bl	800953c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d102      	bne.n	80077de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e001      	b.n	80077e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077e2:	f001 fedb 	bl	800959c <vPortExitCritical>

	return xReturn;
 80077e6:	68fb      	ldr	r3, [r7, #12]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]
 80077fe:	e014      	b.n	800782a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007800:	4a0e      	ldr	r2, [pc, #56]	; (800783c <vQueueAddToRegistry+0x4c>)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10b      	bne.n	8007824 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800780c:	490b      	ldr	r1, [pc, #44]	; (800783c <vQueueAddToRegistry+0x4c>)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007816:	4a09      	ldr	r2, [pc, #36]	; (800783c <vQueueAddToRegistry+0x4c>)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4413      	add	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007822:	e006      	b.n	8007832 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b07      	cmp	r3, #7
 800782e:	d9e7      	bls.n	8007800 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	200010cc 	.word	0x200010cc

08007840 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	e016      	b.n	800787c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800784e:	4a10      	ldr	r2, [pc, #64]	; (8007890 <vQueueUnregisterQueue+0x50>)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	4413      	add	r3, r2
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d10b      	bne.n	8007876 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800785e:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <vQueueUnregisterQueue+0x50>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2100      	movs	r1, #0
 8007864:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <vQueueUnregisterQueue+0x50>)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4413      	add	r3, r2
 8007870:	2200      	movs	r2, #0
 8007872:	605a      	str	r2, [r3, #4]
				break;
 8007874:	e006      	b.n	8007884 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b07      	cmp	r3, #7
 8007880:	d9e5      	bls.n	800784e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200010cc 	.word	0x200010cc

08007894 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078a4:	f001 fe4a 	bl	800953c <vPortEnterCritical>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ae:	b25b      	sxtb	r3, r3
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d103      	bne.n	80078be <vQueueWaitForMessageRestricted+0x2a>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ca:	d103      	bne.n	80078d4 <vQueueWaitForMessageRestricted+0x40>
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d4:	f001 fe62 	bl	800959c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d106      	bne.n	80078ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	3324      	adds	r3, #36	; 0x24
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	68b9      	ldr	r1, [r7, #8]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fc43 	bl	8008174 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078ee:	6978      	ldr	r0, [r7, #20]
 80078f0:	f7ff fefe 	bl	80076f0 <prvUnlockQueue>
	}
 80078f4:	bf00      	nop
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08e      	sub	sp, #56	; 0x38
 8007900:	af04      	add	r7, sp, #16
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	623b      	str	r3, [r7, #32]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <xTaskCreateStatic+0x46>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	61fb      	str	r3, [r7, #28]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007942:	235c      	movs	r3, #92	; 0x5c
 8007944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b5c      	cmp	r3, #92	; 0x5c
 800794a:	d00a      	beq.n	8007962 <xTaskCreateStatic+0x66>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	61bb      	str	r3, [r7, #24]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01e      	beq.n	80079a6 <xTaskCreateStatic+0xaa>
 8007968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796a:	2b00      	cmp	r3, #0
 800796c:	d01b      	beq.n	80079a6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007976:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	2202      	movs	r2, #2
 800797c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007980:	2300      	movs	r3, #0
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	9302      	str	r3, [sp, #8]
 8007988:	f107 0314 	add.w	r3, r7, #20
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68b9      	ldr	r1, [r7, #8]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f850 	bl	8007a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800799e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079a0:	f000 f8d4 	bl	8007b4c <prvAddNewTaskToReadyList>
 80079a4:	e001      	b.n	80079aa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079aa:	697b      	ldr	r3, [r7, #20]
	}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3728      	adds	r7, #40	; 0x28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08c      	sub	sp, #48	; 0x30
 80079b8:	af04      	add	r7, sp, #16
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	4613      	mov	r3, r2
 80079c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c4:	88fb      	ldrh	r3, [r7, #6]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 feb7 	bl	800973c <pvPortMalloc>
 80079ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00e      	beq.n	80079f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80079d6:	205c      	movs	r0, #92	; 0x5c
 80079d8:	f001 feb0 	bl	800973c <pvPortMalloc>
 80079dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	631a      	str	r2, [r3, #48]	; 0x30
 80079ea:	e005      	b.n	80079f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079ec:	6978      	ldr	r0, [r7, #20]
 80079ee:	f001 feb7 	bl	8009760 <vPortFree>
 80079f2:	e001      	b.n	80079f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9303      	str	r3, [sp, #12]
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	9302      	str	r3, [sp, #8]
 8007a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f80e 	bl	8007a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a22:	69f8      	ldr	r0, [r7, #28]
 8007a24:	f000 f892 	bl	8007b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	61bb      	str	r3, [r7, #24]
 8007a2c:	e002      	b.n	8007a34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a34:	69bb      	ldr	r3, [r7, #24]
	}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b088      	sub	sp, #32
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	461a      	mov	r2, r3
 8007a56:	21a5      	movs	r1, #165	; 0xa5
 8007a58:	f001 fedc 	bl	8009814 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a66:	3b01      	subs	r3, #1
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f023 0307 	bic.w	r3, r3, #7
 8007a74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	617b      	str	r3, [r7, #20]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	e012      	b.n	8007ac2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	7819      	ldrb	r1, [r3, #0]
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3334      	adds	r3, #52	; 0x34
 8007aac:	460a      	mov	r2, r1
 8007aae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d006      	beq.n	8007aca <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	2b0f      	cmp	r3, #15
 8007ac6:	d9e9      	bls.n	8007a9c <prvInitialiseNewTask+0x5e>
 8007ac8:	e000      	b.n	8007acc <prvInitialiseNewTask+0x8e>
		{
			break;
 8007aca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	2b37      	cmp	r3, #55	; 0x37
 8007ad8:	d901      	bls.n	8007ade <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ada:	2337      	movs	r3, #55	; 0x37
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2200      	movs	r2, #0
 8007aee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fe fef4 	bl	80068e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	3318      	adds	r3, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe feef 	bl	80068e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	69b8      	ldr	r0, [r7, #24]
 8007b2e:	f001 fc13 	bl	8009358 <pxPortInitialiseStack>
 8007b32:	4602      	mov	r2, r0
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b44:	bf00      	nop
 8007b46:	3720      	adds	r7, #32
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b54:	f001 fcf2 	bl	800953c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b58:	4b2d      	ldr	r3, [pc, #180]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	4a2c      	ldr	r2, [pc, #176]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b62:	4b2c      	ldr	r3, [pc, #176]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d109      	bne.n	8007b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <prvAddNewTaskToReadyList+0xc4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d110      	bne.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b78:	f000 fc28 	bl	80083cc <prvInitialiseTaskLists>
 8007b7c:	e00d      	b.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b7e:	4b26      	ldr	r3, [pc, #152]	; (8007c18 <prvAddNewTaskToReadyList+0xcc>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b86:	4b23      	ldr	r3, [pc, #140]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d802      	bhi.n	8007b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b94:	4a1f      	ldr	r2, [pc, #124]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b9a:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	4a1e      	ldr	r2, [pc, #120]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007ba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ba4:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <prvAddNewTaskToReadyList+0xd0>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <prvAddNewTaskToReadyList+0xd4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d903      	bls.n	8007bc0 <prvAddNewTaskToReadyList+0x74>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <prvAddNewTaskToReadyList+0xd4>)
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <prvAddNewTaskToReadyList+0xd8>)
 8007bce:	441a      	add	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe fe8f 	bl	80068fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bdc:	f001 fcde 	bl	800959c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <prvAddNewTaskToReadyList+0xcc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00e      	beq.n	8007c06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <prvAddNewTaskToReadyList+0xc8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d207      	bcs.n	8007c06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <prvAddNewTaskToReadyList+0xdc>)
 8007bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	20000c70 	.word	0x20000c70
 8007c14:	2000079c 	.word	0x2000079c
 8007c18:	20000c7c 	.word	0x20000c7c
 8007c1c:	20000c8c 	.word	0x20000c8c
 8007c20:	20000c78 	.word	0x20000c78
 8007c24:	200007a0 	.word	0x200007a0
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d017      	beq.n	8007c6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <vTaskDelay+0x60>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <vTaskDelay+0x30>
	__asm volatile
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	60bb      	str	r3, [r7, #8]
}
 8007c58:	bf00      	nop
 8007c5a:	e7fe      	b.n	8007c5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c5c:	f000 f880 	bl	8007d60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c60:	2100      	movs	r1, #0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 ffbe 	bl	8008be4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c68:	f000 f888 	bl	8007d7c <xTaskResumeAll>
 8007c6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <vTaskDelay+0x64>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c84:	bf00      	nop
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000c98 	.word	0x20000c98
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ca2:	463a      	mov	r2, r7
 8007ca4:	1d39      	adds	r1, r7, #4
 8007ca6:	f107 0308 	add.w	r3, r7, #8
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fdc8 	bl	8006840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	9202      	str	r2, [sp, #8]
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	460a      	mov	r2, r1
 8007cc2:	4921      	ldr	r1, [pc, #132]	; (8007d48 <vTaskStartScheduler+0xb4>)
 8007cc4:	4821      	ldr	r0, [pc, #132]	; (8007d4c <vTaskStartScheduler+0xb8>)
 8007cc6:	f7ff fe19 	bl	80078fc <xTaskCreateStatic>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4a20      	ldr	r2, [pc, #128]	; (8007d50 <vTaskStartScheduler+0xbc>)
 8007cce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cd0:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <vTaskStartScheduler+0xbc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	e001      	b.n	8007ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d102      	bne.n	8007cee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ce8:	f000 ffd0 	bl	8008c8c <xTimerCreateTimerTask>
 8007cec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d116      	bne.n	8007d22 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	613b      	str	r3, [r7, #16]
}
 8007d06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d08:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <vTaskStartScheduler+0xc0>)
 8007d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <vTaskStartScheduler+0xc4>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <vTaskStartScheduler+0xc8>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d1c:	f001 fb9c 	bl	8009458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d20:	e00e      	b.n	8007d40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d10a      	bne.n	8007d40 <vTaskStartScheduler+0xac>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60fb      	str	r3, [r7, #12]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <vTaskStartScheduler+0xaa>
}
 8007d40:	bf00      	nop
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	0800a154 	.word	0x0800a154
 8007d4c:	0800839d 	.word	0x0800839d
 8007d50:	20000c94 	.word	0x20000c94
 8007d54:	20000c90 	.word	0x20000c90
 8007d58:	20000c7c 	.word	0x20000c7c
 8007d5c:	20000c74 	.word	0x20000c74

08007d60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <vTaskSuspendAll+0x18>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	4a03      	ldr	r2, [pc, #12]	; (8007d78 <vTaskSuspendAll+0x18>)
 8007d6c:	6013      	str	r3, [r2, #0]
}
 8007d6e:	bf00      	nop
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	20000c98 	.word	0x20000c98

08007d7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d8a:	4b42      	ldr	r3, [pc, #264]	; (8007e94 <xTaskResumeAll+0x118>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	603b      	str	r3, [r7, #0]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007da8:	f001 fbc8 	bl	800953c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dac:	4b39      	ldr	r3, [pc, #228]	; (8007e94 <xTaskResumeAll+0x118>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	4a38      	ldr	r2, [pc, #224]	; (8007e94 <xTaskResumeAll+0x118>)
 8007db4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db6:	4b37      	ldr	r3, [pc, #220]	; (8007e94 <xTaskResumeAll+0x118>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d162      	bne.n	8007e84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dbe:	4b36      	ldr	r3, [pc, #216]	; (8007e98 <xTaskResumeAll+0x11c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d05e      	beq.n	8007e84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dc6:	e02f      	b.n	8007e28 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007dc8:	4b34      	ldr	r3, [pc, #208]	; (8007e9c <xTaskResumeAll+0x120>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3318      	adds	r3, #24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fe fdeb 	bl	80069b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fde6 	bl	80069b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de8:	4b2d      	ldr	r3, [pc, #180]	; (8007ea0 <xTaskResumeAll+0x124>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d903      	bls.n	8007df8 <xTaskResumeAll+0x7c>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <xTaskResumeAll+0x124>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4a27      	ldr	r2, [pc, #156]	; (8007ea4 <xTaskResumeAll+0x128>)
 8007e06:	441a      	add	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe fd73 	bl	80068fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	4b23      	ldr	r3, [pc, #140]	; (8007ea8 <xTaskResumeAll+0x12c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d302      	bcc.n	8007e28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e22:	4b22      	ldr	r3, [pc, #136]	; (8007eac <xTaskResumeAll+0x130>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e28:	4b1c      	ldr	r3, [pc, #112]	; (8007e9c <xTaskResumeAll+0x120>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1cb      	bne.n	8007dc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e36:	f000 fb67 	bl	8008508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e3a:	4b1d      	ldr	r3, [pc, #116]	; (8007eb0 <xTaskResumeAll+0x134>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d010      	beq.n	8007e68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e46:	f000 f857 	bl	8007ef8 <xTaskIncrementTick>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e50:	4b16      	ldr	r3, [pc, #88]	; (8007eac <xTaskResumeAll+0x130>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f1      	bne.n	8007e46 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007e62:	4b13      	ldr	r3, [pc, #76]	; (8007eb0 <xTaskResumeAll+0x134>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e68:	4b10      	ldr	r3, [pc, #64]	; (8007eac <xTaskResumeAll+0x130>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d009      	beq.n	8007e84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e74:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <xTaskResumeAll+0x138>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e84:	f001 fb8a 	bl	800959c <vPortExitCritical>

	return xAlreadyYielded;
 8007e88:	68bb      	ldr	r3, [r7, #8]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000c98 	.word	0x20000c98
 8007e98:	20000c70 	.word	0x20000c70
 8007e9c:	20000c30 	.word	0x20000c30
 8007ea0:	20000c78 	.word	0x20000c78
 8007ea4:	200007a0 	.word	0x200007a0
 8007ea8:	2000079c 	.word	0x2000079c
 8007eac:	20000c84 	.word	0x20000c84
 8007eb0:	20000c80 	.word	0x20000c80
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <xTaskGetTickCount+0x18>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ec4:	687b      	ldr	r3, [r7, #4]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr
 8007ed0:	20000c74 	.word	0x20000c74

08007ed4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007eda:	f001 fbf1 	bl	80096c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007ee2:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <xTaskGetTickCountFromISR+0x20>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ee8:	683b      	ldr	r3, [r7, #0]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000c74 	.word	0x20000c74

08007ef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f02:	4b51      	ldr	r3, [pc, #324]	; (8008048 <xTaskIncrementTick+0x150>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 808e 	bne.w	8008028 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f0c:	4b4f      	ldr	r3, [pc, #316]	; (800804c <xTaskIncrementTick+0x154>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f14:	4a4d      	ldr	r2, [pc, #308]	; (800804c <xTaskIncrementTick+0x154>)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d120      	bne.n	8007f62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f20:	4b4b      	ldr	r3, [pc, #300]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	603b      	str	r3, [r7, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <xTaskIncrementTick+0x46>
 8007f40:	4b43      	ldr	r3, [pc, #268]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	4b43      	ldr	r3, [pc, #268]	; (8008054 <xTaskIncrementTick+0x15c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a41      	ldr	r2, [pc, #260]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	4a41      	ldr	r2, [pc, #260]	; (8008054 <xTaskIncrementTick+0x15c>)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	4b40      	ldr	r3, [pc, #256]	; (8008058 <xTaskIncrementTick+0x160>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	4a3f      	ldr	r2, [pc, #252]	; (8008058 <xTaskIncrementTick+0x160>)
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	f000 fad3 	bl	8008508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f62:	4b3e      	ldr	r3, [pc, #248]	; (800805c <xTaskIncrementTick+0x164>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d34e      	bcc.n	800800a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f6c:	4b38      	ldr	r3, [pc, #224]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xTaskIncrementTick+0x82>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xTaskIncrementTick+0x84>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f80:	4b36      	ldr	r3, [pc, #216]	; (800805c <xTaskIncrementTick+0x164>)
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295
 8007f86:	601a      	str	r2, [r3, #0]
					break;
 8007f88:	e03f      	b.n	800800a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f8a:	4b31      	ldr	r3, [pc, #196]	; (8008050 <xTaskIncrementTick+0x158>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d203      	bcs.n	8007faa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007fa2:	4a2e      	ldr	r2, [pc, #184]	; (800805c <xTaskIncrementTick+0x164>)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6013      	str	r3, [r2, #0]
						break;
 8007fa8:	e02f      	b.n	800800a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	3304      	adds	r3, #4
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fcfe 	bl	80069b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	3318      	adds	r3, #24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe fcf5 	bl	80069b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fca:	4b25      	ldr	r3, [pc, #148]	; (8008060 <xTaskIncrementTick+0x168>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d903      	bls.n	8007fda <xTaskIncrementTick+0xe2>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	4a22      	ldr	r2, [pc, #136]	; (8008060 <xTaskIncrementTick+0x168>)
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <xTaskIncrementTick+0x16c>)
 8007fe8:	441a      	add	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	3304      	adds	r3, #4
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	f7fe fc82 	bl	80068fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffa:	4b1b      	ldr	r3, [pc, #108]	; (8008068 <xTaskIncrementTick+0x170>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	429a      	cmp	r2, r3
 8008002:	d3b3      	bcc.n	8007f6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008008:	e7b0      	b.n	8007f6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800800a:	4b17      	ldr	r3, [pc, #92]	; (8008068 <xTaskIncrementTick+0x170>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008010:	4914      	ldr	r1, [pc, #80]	; (8008064 <xTaskIncrementTick+0x16c>)
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d907      	bls.n	8008032 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008022:	2301      	movs	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	e004      	b.n	8008032 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008028:	4b10      	ldr	r3, [pc, #64]	; (800806c <xTaskIncrementTick+0x174>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3301      	adds	r3, #1
 800802e:	4a0f      	ldr	r2, [pc, #60]	; (800806c <xTaskIncrementTick+0x174>)
 8008030:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <xTaskIncrementTick+0x178>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800803a:	2301      	movs	r3, #1
 800803c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800803e:	697b      	ldr	r3, [r7, #20]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	20000c98 	.word	0x20000c98
 800804c:	20000c74 	.word	0x20000c74
 8008050:	20000c28 	.word	0x20000c28
 8008054:	20000c2c 	.word	0x20000c2c
 8008058:	20000c88 	.word	0x20000c88
 800805c:	20000c90 	.word	0x20000c90
 8008060:	20000c78 	.word	0x20000c78
 8008064:	200007a0 	.word	0x200007a0
 8008068:	2000079c 	.word	0x2000079c
 800806c:	20000c80 	.word	0x20000c80
 8008070:	20000c84 	.word	0x20000c84

08008074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800807a:	4b27      	ldr	r3, [pc, #156]	; (8008118 <vTaskSwitchContext+0xa4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008082:	4b26      	ldr	r3, [pc, #152]	; (800811c <vTaskSwitchContext+0xa8>)
 8008084:	2201      	movs	r2, #1
 8008086:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008088:	e041      	b.n	800810e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800808a:	4b24      	ldr	r3, [pc, #144]	; (800811c <vTaskSwitchContext+0xa8>)
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008090:	4b23      	ldr	r3, [pc, #140]	; (8008120 <vTaskSwitchContext+0xac>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e010      	b.n	80080ba <vTaskSwitchContext+0x46>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	607b      	str	r3, [r7, #4]
}
 80080b0:	bf00      	nop
 80080b2:	e7fe      	b.n	80080b2 <vTaskSwitchContext+0x3e>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	491a      	ldr	r1, [pc, #104]	; (8008124 <vTaskSwitchContext+0xb0>)
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0e4      	beq.n	8008098 <vTaskSwitchContext+0x24>
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4a12      	ldr	r2, [pc, #72]	; (8008124 <vTaskSwitchContext+0xb0>)
 80080da:	4413      	add	r3, r2
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	605a      	str	r2, [r3, #4]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3308      	adds	r3, #8
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d104      	bne.n	80080fe <vTaskSwitchContext+0x8a>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	4a08      	ldr	r2, [pc, #32]	; (8008128 <vTaskSwitchContext+0xb4>)
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	4a05      	ldr	r2, [pc, #20]	; (8008120 <vTaskSwitchContext+0xac>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6013      	str	r3, [r2, #0]
}
 800810e:	bf00      	nop
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	bc80      	pop	{r7}
 8008116:	4770      	bx	lr
 8008118:	20000c98 	.word	0x20000c98
 800811c:	20000c84 	.word	0x20000c84
 8008120:	20000c78 	.word	0x20000c78
 8008124:	200007a0 	.word	0x200007a0
 8008128:	2000079c 	.word	0x2000079c

0800812c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10a      	bne.n	8008152 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <vTaskPlaceOnEventList+0x44>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3318      	adds	r3, #24
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fe fbf0 	bl	8006940 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008160:	2101      	movs	r1, #1
 8008162:	6838      	ldr	r0, [r7, #0]
 8008164:	f000 fd3e 	bl	8008be4 <prvAddCurrentTaskToDelayedList>
}
 8008168:	bf00      	nop
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	2000079c 	.word	0x2000079c

08008174 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	617b      	str	r3, [r7, #20]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800819c:	4b0a      	ldr	r3, [pc, #40]	; (80081c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3318      	adds	r3, #24
 80081a2:	4619      	mov	r1, r3
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7fe fba8 	bl	80068fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081b0:	f04f 33ff 	mov.w	r3, #4294967295
 80081b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	68b8      	ldr	r0, [r7, #8]
 80081ba:	f000 fd13 	bl	8008be4 <prvAddCurrentTaskToDelayedList>
	}
 80081be:	bf00      	nop
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	2000079c 	.word	0x2000079c

080081cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	60fb      	str	r3, [r7, #12]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	3318      	adds	r3, #24
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fe fbd7 	bl	80069b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008202:	4b1e      	ldr	r3, [pc, #120]	; (800827c <xTaskRemoveFromEventList+0xb0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d11d      	bne.n	8008246 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3304      	adds	r3, #4
 800820e:	4618      	mov	r0, r3
 8008210:	f7fe fbce 	bl	80069b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008218:	4b19      	ldr	r3, [pc, #100]	; (8008280 <xTaskRemoveFromEventList+0xb4>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d903      	bls.n	8008228 <xTaskRemoveFromEventList+0x5c>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	4a16      	ldr	r2, [pc, #88]	; (8008280 <xTaskRemoveFromEventList+0xb4>)
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800822c:	4613      	mov	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4a13      	ldr	r2, [pc, #76]	; (8008284 <xTaskRemoveFromEventList+0xb8>)
 8008236:	441a      	add	r2, r3
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fe fb5b 	bl	80068fa <vListInsertEnd>
 8008244:	e005      	b.n	8008252 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	3318      	adds	r3, #24
 800824a:	4619      	mov	r1, r3
 800824c:	480e      	ldr	r0, [pc, #56]	; (8008288 <xTaskRemoveFromEventList+0xbc>)
 800824e:	f7fe fb54 	bl	80068fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008256:	4b0d      	ldr	r3, [pc, #52]	; (800828c <xTaskRemoveFromEventList+0xc0>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	429a      	cmp	r2, r3
 800825e:	d905      	bls.n	800826c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008264:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <xTaskRemoveFromEventList+0xc4>)
 8008266:	2201      	movs	r2, #1
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	e001      	b.n	8008270 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008270:	697b      	ldr	r3, [r7, #20]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000c98 	.word	0x20000c98
 8008280:	20000c78 	.word	0x20000c78
 8008284:	200007a0 	.word	0x200007a0
 8008288:	20000c30 	.word	0x20000c30
 800828c:	2000079c 	.word	0x2000079c
 8008290:	20000c84 	.word	0x20000c84

08008294 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <vTaskInternalSetTimeOutState+0x24>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082a4:	4b05      	ldr	r3, [pc, #20]	; (80082bc <vTaskInternalSetTimeOutState+0x28>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	605a      	str	r2, [r3, #4]
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20000c88 	.word	0x20000c88
 80082bc:	20000c74 	.word	0x20000c74

080082c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	613b      	str	r3, [r7, #16]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60fb      	str	r3, [r7, #12]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008302:	f001 f91b 	bl	800953c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008306:	4b1d      	ldr	r3, [pc, #116]	; (800837c <xTaskCheckForTimeOut+0xbc>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d102      	bne.n	8008326 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008320:	2300      	movs	r3, #0
 8008322:	61fb      	str	r3, [r7, #28]
 8008324:	e023      	b.n	800836e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	4b15      	ldr	r3, [pc, #84]	; (8008380 <xTaskCheckForTimeOut+0xc0>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d007      	beq.n	8008342 <xTaskCheckForTimeOut+0x82>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	429a      	cmp	r2, r3
 800833a:	d302      	bcc.n	8008342 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800833c:	2301      	movs	r3, #1
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	e015      	b.n	800836e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	429a      	cmp	r2, r3
 800834a:	d20b      	bcs.n	8008364 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	1ad2      	subs	r2, r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff ff9b 	bl	8008294 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
 8008362:	e004      	b.n	800836e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800836a:	2301      	movs	r3, #1
 800836c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800836e:	f001 f915 	bl	800959c <vPortExitCritical>

	return xReturn;
 8008372:	69fb      	ldr	r3, [r7, #28]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000c74 	.word	0x20000c74
 8008380:	20000c88 	.word	0x20000c88

08008384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <vTaskMissedYield+0x14>)
 800838a:	2201      	movs	r2, #1
 800838c:	601a      	str	r2, [r3, #0]
}
 800838e:	bf00      	nop
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20000c84 	.word	0x20000c84

0800839c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083a4:	f000 f852 	bl	800844c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <prvIdleTask+0x28>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d9f9      	bls.n	80083a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <prvIdleTask+0x2c>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083c0:	e7f0      	b.n	80083a4 <prvIdleTask+0x8>
 80083c2:	bf00      	nop
 80083c4:	200007a0 	.word	0x200007a0
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083d2:	2300      	movs	r3, #0
 80083d4:	607b      	str	r3, [r7, #4]
 80083d6:	e00c      	b.n	80083f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4a12      	ldr	r2, [pc, #72]	; (800842c <prvInitialiseTaskLists+0x60>)
 80083e4:	4413      	add	r3, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fa5c 	bl	80068a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3301      	adds	r3, #1
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2b37      	cmp	r3, #55	; 0x37
 80083f6:	d9ef      	bls.n	80083d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083f8:	480d      	ldr	r0, [pc, #52]	; (8008430 <prvInitialiseTaskLists+0x64>)
 80083fa:	f7fe fa53 	bl	80068a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083fe:	480d      	ldr	r0, [pc, #52]	; (8008434 <prvInitialiseTaskLists+0x68>)
 8008400:	f7fe fa50 	bl	80068a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008404:	480c      	ldr	r0, [pc, #48]	; (8008438 <prvInitialiseTaskLists+0x6c>)
 8008406:	f7fe fa4d 	bl	80068a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800840a:	480c      	ldr	r0, [pc, #48]	; (800843c <prvInitialiseTaskLists+0x70>)
 800840c:	f7fe fa4a 	bl	80068a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008410:	480b      	ldr	r0, [pc, #44]	; (8008440 <prvInitialiseTaskLists+0x74>)
 8008412:	f7fe fa47 	bl	80068a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008416:	4b0b      	ldr	r3, [pc, #44]	; (8008444 <prvInitialiseTaskLists+0x78>)
 8008418:	4a05      	ldr	r2, [pc, #20]	; (8008430 <prvInitialiseTaskLists+0x64>)
 800841a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <prvInitialiseTaskLists+0x7c>)
 800841e:	4a05      	ldr	r2, [pc, #20]	; (8008434 <prvInitialiseTaskLists+0x68>)
 8008420:	601a      	str	r2, [r3, #0]
}
 8008422:	bf00      	nop
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200007a0 	.word	0x200007a0
 8008430:	20000c00 	.word	0x20000c00
 8008434:	20000c14 	.word	0x20000c14
 8008438:	20000c30 	.word	0x20000c30
 800843c:	20000c44 	.word	0x20000c44
 8008440:	20000c5c 	.word	0x20000c5c
 8008444:	20000c28 	.word	0x20000c28
 8008448:	20000c2c 	.word	0x20000c2c

0800844c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008452:	e019      	b.n	8008488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008454:	f001 f872 	bl	800953c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008458:	4b10      	ldr	r3, [pc, #64]	; (800849c <prvCheckTasksWaitingTermination+0x50>)
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3304      	adds	r3, #4
 8008464:	4618      	mov	r0, r3
 8008466:	f7fe faa3 	bl	80069b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <prvCheckTasksWaitingTermination+0x54>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3b01      	subs	r3, #1
 8008470:	4a0b      	ldr	r2, [pc, #44]	; (80084a0 <prvCheckTasksWaitingTermination+0x54>)
 8008472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008474:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <prvCheckTasksWaitingTermination+0x58>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3b01      	subs	r3, #1
 800847a:	4a0a      	ldr	r2, [pc, #40]	; (80084a4 <prvCheckTasksWaitingTermination+0x58>)
 800847c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800847e:	f001 f88d 	bl	800959c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f810 	bl	80084a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008488:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <prvCheckTasksWaitingTermination+0x58>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e1      	bne.n	8008454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000c44 	.word	0x20000c44
 80084a0:	20000c70 	.word	0x20000c70
 80084a4:	20000c58 	.word	0x20000c58

080084a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d108      	bne.n	80084cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 f94e 	bl	8009760 <vPortFree>
				vPortFree( pxTCB );
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f94b 	bl	8009760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084ca:	e018      	b.n	80084fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d103      	bne.n	80084de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 f942 	bl	8009760 <vPortFree>
	}
 80084dc:	e00f      	b.n	80084fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d00a      	beq.n	80084fe <prvDeleteTCB+0x56>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	60fb      	str	r3, [r7, #12]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <prvDeleteTCB+0x54>
	}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800850e:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <prvResetNextTaskUnblockTime+0x40>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <prvResetNextTaskUnblockTime+0x14>
 8008518:	2301      	movs	r3, #1
 800851a:	e000      	b.n	800851e <prvResetNextTaskUnblockTime+0x16>
 800851c:	2300      	movs	r3, #0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d004      	beq.n	800852c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008522:	4b0a      	ldr	r3, [pc, #40]	; (800854c <prvResetNextTaskUnblockTime+0x44>)
 8008524:	f04f 32ff 	mov.w	r2, #4294967295
 8008528:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800852a:	e008      	b.n	800853e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800852c:	4b06      	ldr	r3, [pc, #24]	; (8008548 <prvResetNextTaskUnblockTime+0x40>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	4a04      	ldr	r2, [pc, #16]	; (800854c <prvResetNextTaskUnblockTime+0x44>)
 800853c:	6013      	str	r3, [r2, #0]
}
 800853e:	bf00      	nop
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr
 8008548:	20000c28 	.word	0x20000c28
 800854c:	20000c90 	.word	0x20000c90

08008550 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <xTaskGetSchedulerState+0x34>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d102      	bne.n	8008564 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800855e:	2301      	movs	r3, #1
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	e008      	b.n	8008576 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008564:	4b08      	ldr	r3, [pc, #32]	; (8008588 <xTaskGetSchedulerState+0x38>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800856c:	2302      	movs	r3, #2
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	e001      	b.n	8008576 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008572:	2300      	movs	r3, #0
 8008574:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008576:	687b      	ldr	r3, [r7, #4]
	}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000c7c 	.word	0x20000c7c
 8008588:	20000c98 	.word	0x20000c98

0800858c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008598:	2300      	movs	r3, #0
 800859a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d056      	beq.n	8008650 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a6:	4b2d      	ldr	r3, [pc, #180]	; (800865c <xTaskPriorityInherit+0xd0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d246      	bcs.n	800863e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	db06      	blt.n	80085c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b8:	4b28      	ldr	r3, [pc, #160]	; (800865c <xTaskPriorityInherit+0xd0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6959      	ldr	r1, [r3, #20]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4a22      	ldr	r2, [pc, #136]	; (8008660 <xTaskPriorityInherit+0xd4>)
 80085d8:	4413      	add	r3, r2
 80085da:	4299      	cmp	r1, r3
 80085dc:	d101      	bne.n	80085e2 <xTaskPriorityInherit+0x56>
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <xTaskPriorityInherit+0x58>
 80085e2:	2300      	movs	r3, #0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d022      	beq.n	800862e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fe f9df 	bl	80069b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085f2:	4b1a      	ldr	r3, [pc, #104]	; (800865c <xTaskPriorityInherit+0xd0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4b18      	ldr	r3, [pc, #96]	; (8008664 <xTaskPriorityInherit+0xd8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d903      	bls.n	8008610 <xTaskPriorityInherit+0x84>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	4a15      	ldr	r2, [pc, #84]	; (8008664 <xTaskPriorityInherit+0xd8>)
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008614:	4613      	mov	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4a10      	ldr	r2, [pc, #64]	; (8008660 <xTaskPriorityInherit+0xd4>)
 800861e:	441a      	add	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3304      	adds	r3, #4
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f7fe f967 	bl	80068fa <vListInsertEnd>
 800862c:	e004      	b.n	8008638 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800862e:	4b0b      	ldr	r3, [pc, #44]	; (800865c <xTaskPriorityInherit+0xd0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e008      	b.n	8008650 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008642:	4b06      	ldr	r3, [pc, #24]	; (800865c <xTaskPriorityInherit+0xd0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	429a      	cmp	r2, r3
 800864a:	d201      	bcs.n	8008650 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800864c:	2301      	movs	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008650:	68fb      	ldr	r3, [r7, #12]
	}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	2000079c 	.word	0x2000079c
 8008660:	200007a0 	.word	0x200007a0
 8008664:	20000c78 	.word	0x20000c78

08008668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d056      	beq.n	800872c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800867e:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <xTaskPriorityDisinherit+0xd0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	429a      	cmp	r2, r3
 8008686:	d00a      	beq.n	800869e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60fb      	str	r3, [r7, #12]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	60bb      	str	r3, [r7, #8]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d02c      	beq.n	800872c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d128      	bne.n	800872c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe f966 	bl	80069b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <xTaskPriorityDisinherit+0xd4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d903      	bls.n	800870c <xTaskPriorityDisinherit+0xa4>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4a0c      	ldr	r2, [pc, #48]	; (800873c <xTaskPriorityDisinherit+0xd4>)
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <xTaskPriorityDisinherit+0xd8>)
 800871a:	441a      	add	r2, r3
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	3304      	adds	r3, #4
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7fe f8e9 	bl	80068fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800872c:	697b      	ldr	r3, [r7, #20]
	}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	2000079c 	.word	0x2000079c
 800873c:	20000c78 	.word	0x20000c78
 8008740:	200007a0 	.word	0x200007a0

08008744 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008752:	2301      	movs	r3, #1
 8008754:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d06f      	beq.n	800883c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	60fb      	str	r3, [r7, #12]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d902      	bls.n	800878a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	e002      	b.n	8008790 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	429a      	cmp	r2, r3
 8008798:	d050      	beq.n	800883c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d14b      	bne.n	800883c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087a4:	4b27      	ldr	r3, [pc, #156]	; (8008844 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d10a      	bne.n	80087c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	60bb      	str	r3, [r7, #8]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	db04      	blt.n	80087e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	6959      	ldr	r1, [r3, #20]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4a15      	ldr	r2, [pc, #84]	; (8008848 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80087f2:	4413      	add	r3, r2
 80087f4:	4299      	cmp	r1, r3
 80087f6:	d101      	bne.n	80087fc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <vTaskPriorityDisinheritAfterTimeout+0xba>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01c      	beq.n	800883c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	3304      	adds	r3, #4
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe f8d2 	bl	80069b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008810:	4b0e      	ldr	r3, [pc, #56]	; (800884c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d903      	bls.n	8008820 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4a0b      	ldr	r2, [pc, #44]	; (800884c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4a06      	ldr	r2, [pc, #24]	; (8008848 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800882e:	441a      	add	r2, r3
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	3304      	adds	r3, #4
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f7fe f85f 	bl	80068fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800883c:	bf00      	nop
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	2000079c 	.word	0x2000079c
 8008848:	200007a0 	.word	0x200007a0
 800884c:	20000c78 	.word	0x20000c78

08008850 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008854:	4b07      	ldr	r3, [pc, #28]	; (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008862:	3201      	adds	r2, #1
 8008864:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008866:	4b03      	ldr	r3, [pc, #12]	; (8008874 <pvTaskIncrementMutexHeldCount+0x24>)
 8008868:	681b      	ldr	r3, [r3, #0]
	}
 800886a:	4618      	mov	r0, r3
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	2000079c 	.word	0x2000079c

08008878 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008882:	f000 fe5b 	bl	800953c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008886:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <ulTaskNotifyTake+0x88>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888c:	2b00      	cmp	r3, #0
 800888e:	d113      	bne.n	80088b8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008890:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <ulTaskNotifyTake+0x88>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088a0:	2101      	movs	r1, #1
 80088a2:	6838      	ldr	r0, [r7, #0]
 80088a4:	f000 f99e 	bl	8008be4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80088a8:	4b16      	ldr	r3, [pc, #88]	; (8008904 <ulTaskNotifyTake+0x8c>)
 80088aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80088b8:	f000 fe70 	bl	800959c <vPortExitCritical>

		taskENTER_CRITICAL();
 80088bc:	f000 fe3e 	bl	800953c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <ulTaskNotifyTake+0x88>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80088d4:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <ulTaskNotifyTake+0x88>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2200      	movs	r2, #0
 80088da:	655a      	str	r2, [r3, #84]	; 0x54
 80088dc:	e004      	b.n	80088e8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80088de:	4b08      	ldr	r3, [pc, #32]	; (8008900 <ulTaskNotifyTake+0x88>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	3a01      	subs	r2, #1
 80088e6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088e8:	4b05      	ldr	r3, [pc, #20]	; (8008900 <ulTaskNotifyTake+0x88>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80088f2:	f000 fe53 	bl	800959c <vPortExitCritical>

		return ulReturn;
 80088f6:	68fb      	ldr	r3, [r7, #12]
	}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	2000079c 	.word	0x2000079c
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	; 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	4613      	mov	r3, r2
 8008916:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008918:	2301      	movs	r3, #1
 800891a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10a      	bne.n	8008938 <xTaskGenericNotify+0x30>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	61bb      	str	r3, [r7, #24]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800893c:	f000 fdfe 	bl	800953c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008954:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	2202      	movs	r2, #2
 800895a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	2b04      	cmp	r3, #4
 8008962:	d828      	bhi.n	80089b6 <xTaskGenericNotify+0xae>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <xTaskGenericNotify+0x64>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	080089b7 	.word	0x080089b7
 8008970:	08008981 	.word	0x08008981
 8008974:	0800898f 	.word	0x0800898f
 8008978:	0800899b 	.word	0x0800899b
 800897c:	080089a3 	.word	0x080089a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	431a      	orrs	r2, r3
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800898c:	e013      	b.n	80089b6 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008998:	e00d      	b.n	80089b6 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80089a0:	e009      	b.n	80089b6 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80089a2:	7ffb      	ldrb	r3, [r7, #31]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d003      	beq.n	80089b0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80089ae:	e001      	b.n	80089b4 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80089b4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80089b6:	7ffb      	ldrb	r3, [r7, #31]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d13a      	bne.n	8008a32 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	3304      	adds	r3, #4
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fd fff5 	bl	80069b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ca:	4b1d      	ldr	r3, [pc, #116]	; (8008a40 <xTaskGenericNotify+0x138>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d903      	bls.n	80089da <xTaskGenericNotify+0xd2>
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	4a1a      	ldr	r2, [pc, #104]	; (8008a40 <xTaskGenericNotify+0x138>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4a17      	ldr	r2, [pc, #92]	; (8008a44 <xTaskGenericNotify+0x13c>)
 80089e8:	441a      	add	r2, r3
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7fd ff82 	bl	80068fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <xTaskGenericNotify+0x10c>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	617b      	str	r3, [r7, #20]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a18:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <xTaskGenericNotify+0x140>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d907      	bls.n	8008a32 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008a22:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <xTaskGenericNotify+0x144>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a32:	f000 fdb3 	bl	800959c <vPortExitCritical>

		return xReturn;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3728      	adds	r7, #40	; 0x28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000c78 	.word	0x20000c78
 8008a44:	200007a0 	.word	0x200007a0
 8008a48:	2000079c 	.word	0x2000079c
 8008a4c:	e000ed04 	.word	0xe000ed04

08008a50 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08e      	sub	sp, #56	; 0x38
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	603b      	str	r3, [r7, #0]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008a60:	2301      	movs	r3, #1
 8008a62:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a80:	f000 fe1e 	bl	80096c0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008a88:	f3ef 8211 	mrs	r2, BASEPRI
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	623a      	str	r2, [r7, #32]
 8008a9e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008aa0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d828      	bhi.n	8008b1c <xTaskGenericNotifyFromISR+0xcc>
 8008aca:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <xTaskGenericNotifyFromISR+0x80>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008b1d 	.word	0x08008b1d
 8008ad4:	08008ae5 	.word	0x08008ae5
 8008ad8:	08008af3 	.word	0x08008af3
 8008adc:	08008aff 	.word	0x08008aff
 8008ae0:	08008b07 	.word	0x08008b07
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	431a      	orrs	r2, r3
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008af0:	e014      	b.n	8008b1c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008afc:	e00e      	b.n	8008b1c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8008b04:	e00a      	b.n	8008b1c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d003      	beq.n	8008b16 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008b14:	e001      	b.n	8008b1a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8008b16:	2300      	movs	r3, #0
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008b1a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008b1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d147      	bne.n	8008bb4 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	61bb      	str	r3, [r7, #24]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b42:	4b22      	ldr	r3, [pc, #136]	; (8008bcc <xTaskGenericNotifyFromISR+0x17c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d11d      	bne.n	8008b86 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fd ff2e 	bl	80069b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b58:	4b1d      	ldr	r3, [pc, #116]	; (8008bd0 <xTaskGenericNotifyFromISR+0x180>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d903      	bls.n	8008b68 <xTaskGenericNotifyFromISR+0x118>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	4a1a      	ldr	r2, [pc, #104]	; (8008bd0 <xTaskGenericNotifyFromISR+0x180>)
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4a17      	ldr	r2, [pc, #92]	; (8008bd4 <xTaskGenericNotifyFromISR+0x184>)
 8008b76:	441a      	add	r2, r3
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	f7fd febb 	bl	80068fa <vListInsertEnd>
 8008b84:	e005      	b.n	8008b92 <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	3318      	adds	r3, #24
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4812      	ldr	r0, [pc, #72]	; (8008bd8 <xTaskGenericNotifyFromISR+0x188>)
 8008b8e:	f7fd feb4 	bl	80068fa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <xTaskGenericNotifyFromISR+0x18c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d909      	bls.n	8008bb4 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba8:	2201      	movs	r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	e002      	b.n	8008bb4 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008bae:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <xTaskGenericNotifyFromISR+0x190>)
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f383 8811 	msr	BASEPRI, r3
}
 8008bbe:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3738      	adds	r7, #56	; 0x38
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000c98 	.word	0x20000c98
 8008bd0:	20000c78 	.word	0x20000c78
 8008bd4:	200007a0 	.word	0x200007a0
 8008bd8:	20000c30 	.word	0x20000c30
 8008bdc:	2000079c 	.word	0x2000079c
 8008be0:	20000c84 	.word	0x20000c84

08008be4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bee:	4b21      	ldr	r3, [pc, #132]	; (8008c74 <prvAddCurrentTaskToDelayedList+0x90>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bf4:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3304      	adds	r3, #4
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fd fed8 	bl	80069b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d10a      	bne.n	8008c1e <prvAddCurrentTaskToDelayedList+0x3a>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d007      	beq.n	8008c1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c0e:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3304      	adds	r3, #4
 8008c14:	4619      	mov	r1, r3
 8008c16:	4819      	ldr	r0, [pc, #100]	; (8008c7c <prvAddCurrentTaskToDelayedList+0x98>)
 8008c18:	f7fd fe6f 	bl	80068fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c1c:	e026      	b.n	8008c6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c26:	4b14      	ldr	r3, [pc, #80]	; (8008c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d209      	bcs.n	8008c4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c36:	4b12      	ldr	r3, [pc, #72]	; (8008c80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	; (8008c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7fd fe7c 	bl	8006940 <vListInsert>
}
 8008c48:	e010      	b.n	8008c6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c4a:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4619      	mov	r1, r3
 8008c56:	4610      	mov	r0, r2
 8008c58:	f7fd fe72 	bl	8006940 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d202      	bcs.n	8008c6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c66:	4a08      	ldr	r2, [pc, #32]	; (8008c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	6013      	str	r3, [r2, #0]
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20000c74 	.word	0x20000c74
 8008c78:	2000079c 	.word	0x2000079c
 8008c7c:	20000c5c 	.word	0x20000c5c
 8008c80:	20000c2c 	.word	0x20000c2c
 8008c84:	20000c28 	.word	0x20000c28
 8008c88:	20000c90 	.word	0x20000c90

08008c8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	; 0x28
 8008c90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c96:	f000 fb1f 	bl	80092d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <xTimerCreateTimerTask+0x80>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d021      	beq.n	8008ce6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008caa:	1d3a      	adds	r2, r7, #4
 8008cac:	f107 0108 	add.w	r1, r7, #8
 8008cb0:	f107 030c 	add.w	r3, r7, #12
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fd fddb 	bl	8006870 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	9202      	str	r2, [sp, #8]
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	460a      	mov	r2, r1
 8008ccc:	4910      	ldr	r1, [pc, #64]	; (8008d10 <xTimerCreateTimerTask+0x84>)
 8008cce:	4811      	ldr	r0, [pc, #68]	; (8008d14 <xTimerCreateTimerTask+0x88>)
 8008cd0:	f7fe fe14 	bl	80078fc <xTaskCreateStatic>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	4a10      	ldr	r2, [pc, #64]	; (8008d18 <xTimerCreateTimerTask+0x8c>)
 8008cd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cda:	4b0f      	ldr	r3, [pc, #60]	; (8008d18 <xTimerCreateTimerTask+0x8c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10a      	bne.n	8008d02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	613b      	str	r3, [r7, #16]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008d02:	697b      	ldr	r3, [r7, #20]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000ccc 	.word	0x20000ccc
 8008d10:	0800a15c 	.word	0x0800a15c
 8008d14:	08008ee1 	.word	0x08008ee1
 8008d18:	20000cd0 	.word	0x20000cd0

08008d1c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008d2a:	2030      	movs	r0, #48	; 0x30
 8008d2c:	f000 fd06 	bl	800973c <pvPortMalloc>
 8008d30:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00d      	beq.n	8008d54 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	9301      	str	r3, [sp, #4]
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 f809 	bl	8008d5e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8008d54:	697b      	ldr	r3, [r7, #20]
	}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	607a      	str	r2, [r7, #4]
 8008d6a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	617b      	str	r3, [r7, #20]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d015      	beq.n	8008dba <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008d8e:	f000 faa3 	bl	80092d8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	6a3a      	ldr	r2, [r7, #32]
 8008dae:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	3304      	adds	r3, #4
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fd fd94 	bl	80068e2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008dba:	bf00      	nop
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08a      	sub	sp, #40	; 0x28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	623b      	str	r3, [r7, #32]
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008df2:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <xTimerGenericCommand+0x98>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d02a      	beq.n	8008e50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b05      	cmp	r3, #5
 8008e0a:	dc18      	bgt.n	8008e3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e0c:	f7ff fba0 	bl	8008550 <xTaskGetSchedulerState>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d109      	bne.n	8008e2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e16:	4b11      	ldr	r3, [pc, #68]	; (8008e5c <xTimerGenericCommand+0x98>)
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	f107 0110 	add.w	r1, r7, #16
 8008e1e:	2300      	movs	r3, #0
 8008e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e22:	f7fd ff99 	bl	8006d58 <xQueueGenericSend>
 8008e26:	6278      	str	r0, [r7, #36]	; 0x24
 8008e28:	e012      	b.n	8008e50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <xTimerGenericCommand+0x98>)
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f107 0110 	add.w	r1, r7, #16
 8008e32:	2300      	movs	r3, #0
 8008e34:	2200      	movs	r2, #0
 8008e36:	f7fd ff8f 	bl	8006d58 <xQueueGenericSend>
 8008e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e3c:	e008      	b.n	8008e50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e3e:	4b07      	ldr	r3, [pc, #28]	; (8008e5c <xTimerGenericCommand+0x98>)
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f107 0110 	add.w	r1, r7, #16
 8008e46:	2300      	movs	r3, #0
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	f7fe f883 	bl	8006f54 <xQueueGenericSendFromISR>
 8008e4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20000ccc 	.word	0x20000ccc

08008e60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <prvProcessExpiredTimer+0x7c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fd fd99 	bl	80069b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d122      	bne.n	8008ecc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	699a      	ldr	r2, [r3, #24]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	18d1      	adds	r1, r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	6978      	ldr	r0, [r7, #20]
 8008e94:	f000 f8c8 	bl	8009028 <prvInsertTimerInActiveList>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d016      	beq.n	8008ecc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	6978      	ldr	r0, [r7, #20]
 8008eaa:	f7ff ff8b 	bl	8008dc4 <xTimerGenericCommand>
 8008eae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60fb      	str	r3, [r7, #12]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	6978      	ldr	r0, [r7, #20]
 8008ed2:	4798      	blx	r3
}
 8008ed4:	bf00      	nop
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000cc4 	.word	0x20000cc4

08008ee0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ee8:	f107 0308 	add.w	r3, r7, #8
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 f857 	bl	8008fa0 <prvGetNextExpireTime>
 8008ef2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 f803 	bl	8008f04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008efe:	f000 f8d5 	bl	80090ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f02:	e7f1      	b.n	8008ee8 <prvTimerTask+0x8>

08008f04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f0e:	f7fe ff27 	bl	8007d60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f12:	f107 0308 	add.w	r3, r7, #8
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f866 	bl	8008fe8 <prvSampleTimeNow>
 8008f1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d130      	bne.n	8008f86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <prvProcessTimerOrBlockTask+0x3c>
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d806      	bhi.n	8008f40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f32:	f7fe ff23 	bl	8007d7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f36:	68f9      	ldr	r1, [r7, #12]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff ff91 	bl	8008e60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f3e:	e024      	b.n	8008f8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f46:	4b13      	ldr	r3, [pc, #76]	; (8008f94 <prvProcessTimerOrBlockTask+0x90>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	bf0c      	ite	eq
 8008f50:	2301      	moveq	r3, #1
 8008f52:	2300      	movne	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <prvProcessTimerOrBlockTask+0x94>)
 8008f5a:	6818      	ldr	r0, [r3, #0]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4619      	mov	r1, r3
 8008f66:	f7fe fc95 	bl	8007894 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f6a:	f7fe ff07 	bl	8007d7c <xTaskResumeAll>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f74:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <prvProcessTimerOrBlockTask+0x98>)
 8008f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	f3bf 8f6f 	isb	sy
}
 8008f84:	e001      	b.n	8008f8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008f86:	f7fe fef9 	bl	8007d7c <xTaskResumeAll>
}
 8008f8a:	bf00      	nop
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000cc8 	.word	0x20000cc8
 8008f98:	20000ccc 	.word	0x20000ccc
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fa8:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <prvGetNextExpireTime+0x44>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	bf0c      	ite	eq
 8008fb2:	2301      	moveq	r3, #1
 8008fb4:	2300      	movne	r3, #0
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	461a      	mov	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d105      	bne.n	8008fd2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fc6:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <prvGetNextExpireTime+0x44>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	e001      	b.n	8008fd6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	20000cc4 	.word	0x20000cc4

08008fe8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ff0:	f7fe ff62 	bl	8007eb8 <xTaskGetTickCount>
 8008ff4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <prvSampleTimeNow+0x3c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d205      	bcs.n	800900c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009000:	f000 f908 	bl	8009214 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e002      	b.n	8009012 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009012:	4a04      	ldr	r2, [pc, #16]	; (8009024 <prvSampleTimeNow+0x3c>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009018:	68fb      	ldr	r3, [r7, #12]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000cd4 	.word	0x20000cd4

08009028 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	429a      	cmp	r2, r3
 800904c:	d812      	bhi.n	8009074 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	1ad2      	subs	r2, r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	429a      	cmp	r2, r3
 800905a:	d302      	bcc.n	8009062 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800905c:	2301      	movs	r3, #1
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	e01b      	b.n	800909a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009062:	4b10      	ldr	r3, [pc, #64]	; (80090a4 <prvInsertTimerInActiveList+0x7c>)
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3304      	adds	r3, #4
 800906a:	4619      	mov	r1, r3
 800906c:	4610      	mov	r0, r2
 800906e:	f7fd fc67 	bl	8006940 <vListInsert>
 8009072:	e012      	b.n	800909a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d206      	bcs.n	800908a <prvInsertTimerInActiveList+0x62>
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	429a      	cmp	r2, r3
 8009082:	d302      	bcc.n	800908a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	e007      	b.n	800909a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <prvInsertTimerInActiveList+0x80>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7fd fc53 	bl	8006940 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800909a:	697b      	ldr	r3, [r7, #20]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20000cc8 	.word	0x20000cc8
 80090a8:	20000cc4 	.word	0x20000cc4

080090ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08e      	sub	sp, #56	; 0x38
 80090b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090b2:	e09d      	b.n	80091f0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	da18      	bge.n	80090ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090ba:	1d3b      	adds	r3, r7, #4
 80090bc:	3304      	adds	r3, #4
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	61fb      	str	r3, [r7, #28]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80090dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e2:	6850      	ldr	r0, [r2, #4]
 80090e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e6:	6892      	ldr	r2, [r2, #8]
 80090e8:	4611      	mov	r1, r2
 80090ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	db7d      	blt.n	80091ee <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	3304      	adds	r3, #4
 8009102:	4618      	mov	r0, r3
 8009104:	f7fd fc54 	bl	80069b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009108:	463b      	mov	r3, r7
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff ff6c 	bl	8008fe8 <prvSampleTimeNow>
 8009110:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b09      	cmp	r3, #9
 8009116:	d86b      	bhi.n	80091f0 <prvProcessReceivedCommands+0x144>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <prvProcessReceivedCommands+0x74>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009149 	.word	0x08009149
 8009124:	08009149 	.word	0x08009149
 8009128:	08009149 	.word	0x08009149
 800912c:	080091f1 	.word	0x080091f1
 8009130:	080091a5 	.word	0x080091a5
 8009134:	080091dd 	.word	0x080091dd
 8009138:	08009149 	.word	0x08009149
 800913c:	08009149 	.word	0x08009149
 8009140:	080091f1 	.word	0x080091f1
 8009144:	080091a5 	.word	0x080091a5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	18d1      	adds	r1, r2, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009156:	f7ff ff67 	bl	8009028 <prvInsertTimerInActiveList>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d047      	beq.n	80091f0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009166:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d13f      	bne.n	80091f0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	441a      	add	r2, r3
 8009178:	2300      	movs	r3, #0
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	2300      	movs	r3, #0
 800917e:	2100      	movs	r1, #0
 8009180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009182:	f7ff fe1f 	bl	8008dc4 <xTimerGenericCommand>
 8009186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d130      	bne.n	80091f0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	61bb      	str	r3, [r7, #24]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	617b      	str	r3, [r7, #20]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ca:	699a      	ldr	r2, [r3, #24]
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	18d1      	adds	r1, r2, r3
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091d6:	f7ff ff27 	bl	8009028 <prvInsertTimerInActiveList>
					break;
 80091da:	e009      	b.n	80091f0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d104      	bne.n	80091f0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80091e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e8:	f000 faba 	bl	8009760 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80091ec:	e000      	b.n	80091f0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80091ee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80091f0:	4b07      	ldr	r3, [pc, #28]	; (8009210 <prvProcessReceivedCommands+0x164>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	1d39      	adds	r1, r7, #4
 80091f6:	2200      	movs	r2, #0
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fd ff43 	bl	8007084 <xQueueReceive>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	f47f af57 	bne.w	80090b4 <prvProcessReceivedCommands+0x8>
	}
}
 8009206:	bf00      	nop
 8009208:	bf00      	nop
 800920a:	3730      	adds	r7, #48	; 0x30
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000ccc 	.word	0x20000ccc

08009214 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800921a:	e045      	b.n	80092a8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800921c:	4b2c      	ldr	r3, [pc, #176]	; (80092d0 <prvSwitchTimerLists+0xbc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009226:	4b2a      	ldr	r3, [pc, #168]	; (80092d0 <prvSwitchTimerLists+0xbc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3304      	adds	r3, #4
 8009234:	4618      	mov	r0, r3
 8009236:	f7fd fbbb 	bl	80069b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	69db      	ldr	r3, [r3, #28]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d12e      	bne.n	80092a8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	4413      	add	r3, r2
 8009252:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	429a      	cmp	r2, r3
 800925a:	d90e      	bls.n	800927a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009268:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <prvSwitchTimerLists+0xbc>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4610      	mov	r0, r2
 8009274:	f7fd fb64 	bl	8006940 <vListInsert>
 8009278:	e016      	b.n	80092a8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800927a:	2300      	movs	r3, #0
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	2300      	movs	r3, #0
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	2100      	movs	r1, #0
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7ff fd9d 	bl	8008dc4 <xTimerGenericCommand>
 800928a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009296:	f383 8811 	msr	BASEPRI, r3
 800929a:	f3bf 8f6f 	isb	sy
 800929e:	f3bf 8f4f 	dsb	sy
 80092a2:	603b      	str	r3, [r7, #0]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092a8:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <prvSwitchTimerLists+0xbc>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1b4      	bne.n	800921c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80092b2:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <prvSwitchTimerLists+0xbc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <prvSwitchTimerLists+0xc0>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a04      	ldr	r2, [pc, #16]	; (80092d0 <prvSwitchTimerLists+0xbc>)
 80092be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80092c0:	4a04      	ldr	r2, [pc, #16]	; (80092d4 <prvSwitchTimerLists+0xc0>)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	6013      	str	r3, [r2, #0]
}
 80092c6:	bf00      	nop
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000cc4 	.word	0x20000cc4
 80092d4:	20000cc8 	.word	0x20000cc8

080092d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80092de:	f000 f92d 	bl	800953c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80092e2:	4b15      	ldr	r3, [pc, #84]	; (8009338 <prvCheckForValidListAndQueue+0x60>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d120      	bne.n	800932c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80092ea:	4814      	ldr	r0, [pc, #80]	; (800933c <prvCheckForValidListAndQueue+0x64>)
 80092ec:	f7fd fada 	bl	80068a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80092f0:	4813      	ldr	r0, [pc, #76]	; (8009340 <prvCheckForValidListAndQueue+0x68>)
 80092f2:	f7fd fad7 	bl	80068a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <prvCheckForValidListAndQueue+0x6c>)
 80092f8:	4a10      	ldr	r2, [pc, #64]	; (800933c <prvCheckForValidListAndQueue+0x64>)
 80092fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092fc:	4b12      	ldr	r3, [pc, #72]	; (8009348 <prvCheckForValidListAndQueue+0x70>)
 80092fe:	4a10      	ldr	r2, [pc, #64]	; (8009340 <prvCheckForValidListAndQueue+0x68>)
 8009300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009302:	2300      	movs	r3, #0
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	4b11      	ldr	r3, [pc, #68]	; (800934c <prvCheckForValidListAndQueue+0x74>)
 8009308:	4a11      	ldr	r2, [pc, #68]	; (8009350 <prvCheckForValidListAndQueue+0x78>)
 800930a:	2110      	movs	r1, #16
 800930c:	200a      	movs	r0, #10
 800930e:	f7fd fbe1 	bl	8006ad4 <xQueueGenericCreateStatic>
 8009312:	4603      	mov	r3, r0
 8009314:	4a08      	ldr	r2, [pc, #32]	; (8009338 <prvCheckForValidListAndQueue+0x60>)
 8009316:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009318:	4b07      	ldr	r3, [pc, #28]	; (8009338 <prvCheckForValidListAndQueue+0x60>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009320:	4b05      	ldr	r3, [pc, #20]	; (8009338 <prvCheckForValidListAndQueue+0x60>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	490b      	ldr	r1, [pc, #44]	; (8009354 <prvCheckForValidListAndQueue+0x7c>)
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fa62 	bl	80077f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800932c:	f000 f936 	bl	800959c <vPortExitCritical>
}
 8009330:	bf00      	nop
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000ccc 	.word	0x20000ccc
 800933c:	20000c9c 	.word	0x20000c9c
 8009340:	20000cb0 	.word	0x20000cb0
 8009344:	20000cc4 	.word	0x20000cc4
 8009348:	20000cc8 	.word	0x20000cc8
 800934c:	20000d78 	.word	0x20000d78
 8009350:	20000cd8 	.word	0x20000cd8
 8009354:	0800a164 	.word	0x0800a164

08009358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3b04      	subs	r3, #4
 8009368:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3b04      	subs	r3, #4
 8009376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	f023 0201 	bic.w	r2, r3, #1
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3b04      	subs	r3, #4
 8009386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009388:	4a08      	ldr	r2, [pc, #32]	; (80093ac <pxPortInitialiseStack+0x54>)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3b14      	subs	r3, #20
 8009392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3b20      	subs	r3, #32
 800939e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80093a0:	68fb      	ldr	r3, [r7, #12]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr
 80093ac:	080093b1 	.word	0x080093b1

080093b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80093ba:	4b12      	ldr	r3, [pc, #72]	; (8009404 <prvTaskExitError+0x54>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c2:	d00a      	beq.n	80093da <prvTaskExitError+0x2a>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	60fb      	str	r3, [r7, #12]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <prvTaskExitError+0x28>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	60bb      	str	r3, [r7, #8]
}
 80093ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093ee:	bf00      	nop
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0fc      	beq.n	80093f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bc80      	pop	{r7}
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000038 	.word	0x20000038
	...

08009410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009410:	4b07      	ldr	r3, [pc, #28]	; (8009430 <pxCurrentTCBConst2>)
 8009412:	6819      	ldr	r1, [r3, #0]
 8009414:	6808      	ldr	r0, [r1, #0]
 8009416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800941a:	f380 8809 	msr	PSP, r0
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f04f 0000 	mov.w	r0, #0
 8009426:	f380 8811 	msr	BASEPRI, r0
 800942a:	f04e 0e0d 	orr.w	lr, lr, #13
 800942e:	4770      	bx	lr

08009430 <pxCurrentTCBConst2>:
 8009430:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop

08009438 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009438:	4806      	ldr	r0, [pc, #24]	; (8009454 <prvPortStartFirstTask+0x1c>)
 800943a:	6800      	ldr	r0, [r0, #0]
 800943c:	6800      	ldr	r0, [r0, #0]
 800943e:	f380 8808 	msr	MSP, r0
 8009442:	b662      	cpsie	i
 8009444:	b661      	cpsie	f
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	df00      	svc	0
 8009450:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009452:	bf00      	nop
 8009454:	e000ed08 	.word	0xe000ed08

08009458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800945e:	4b32      	ldr	r3, [pc, #200]	; (8009528 <xPortStartScheduler+0xd0>)
 8009460:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	22ff      	movs	r2, #255	; 0xff
 800946e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009480:	b2da      	uxtb	r2, r3
 8009482:	4b2a      	ldr	r3, [pc, #168]	; (800952c <xPortStartScheduler+0xd4>)
 8009484:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009486:	4b2a      	ldr	r3, [pc, #168]	; (8009530 <xPortStartScheduler+0xd8>)
 8009488:	2207      	movs	r2, #7
 800948a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800948c:	e009      	b.n	80094a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800948e:	4b28      	ldr	r3, [pc, #160]	; (8009530 <xPortStartScheduler+0xd8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3b01      	subs	r3, #1
 8009494:	4a26      	ldr	r2, [pc, #152]	; (8009530 <xPortStartScheduler+0xd8>)
 8009496:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094aa:	2b80      	cmp	r3, #128	; 0x80
 80094ac:	d0ef      	beq.n	800948e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094ae:	4b20      	ldr	r3, [pc, #128]	; (8009530 <xPortStartScheduler+0xd8>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f1c3 0307 	rsb	r3, r3, #7
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d00a      	beq.n	80094d0 <xPortStartScheduler+0x78>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	60bb      	str	r3, [r7, #8]
}
 80094cc:	bf00      	nop
 80094ce:	e7fe      	b.n	80094ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094d0:	4b17      	ldr	r3, [pc, #92]	; (8009530 <xPortStartScheduler+0xd8>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	021b      	lsls	r3, r3, #8
 80094d6:	4a16      	ldr	r2, [pc, #88]	; (8009530 <xPortStartScheduler+0xd8>)
 80094d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094da:	4b15      	ldr	r3, [pc, #84]	; (8009530 <xPortStartScheduler+0xd8>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094e2:	4a13      	ldr	r2, [pc, #76]	; (8009530 <xPortStartScheduler+0xd8>)
 80094e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094ee:	4b11      	ldr	r3, [pc, #68]	; (8009534 <xPortStartScheduler+0xdc>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a10      	ldr	r2, [pc, #64]	; (8009534 <xPortStartScheduler+0xdc>)
 80094f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094fa:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <xPortStartScheduler+0xdc>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a0d      	ldr	r2, [pc, #52]	; (8009534 <xPortStartScheduler+0xdc>)
 8009500:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009504:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009506:	f000 f8b9 	bl	800967c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800950a:	4b0b      	ldr	r3, [pc, #44]	; (8009538 <xPortStartScheduler+0xe0>)
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009510:	f7ff ff92 	bl	8009438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009514:	f7fe fdae 	bl	8008074 <vTaskSwitchContext>
	prvTaskExitError();
 8009518:	f7ff ff4a 	bl	80093b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	e000e400 	.word	0xe000e400
 800952c:	20000dc8 	.word	0x20000dc8
 8009530:	20000dcc 	.word	0x20000dcc
 8009534:	e000ed20 	.word	0xe000ed20
 8009538:	20000038 	.word	0x20000038

0800953c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	607b      	str	r3, [r7, #4]
}
 8009554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009556:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <vPortEnterCritical+0x58>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3301      	adds	r3, #1
 800955c:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <vPortEnterCritical+0x58>)
 800955e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009560:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <vPortEnterCritical+0x58>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d10f      	bne.n	8009588 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009568:	4b0b      	ldr	r3, [pc, #44]	; (8009598 <vPortEnterCritical+0x5c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <vPortEnterCritical+0x4c>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	603b      	str	r3, [r7, #0]
}
 8009584:	bf00      	nop
 8009586:	e7fe      	b.n	8009586 <vPortEnterCritical+0x4a>
	}
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000038 	.word	0x20000038
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095a2:	4b11      	ldr	r3, [pc, #68]	; (80095e8 <vPortExitCritical+0x4c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <vPortExitCritical+0x24>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	607b      	str	r3, [r7, #4]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095c0:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <vPortExitCritical+0x4c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	4a08      	ldr	r2, [pc, #32]	; (80095e8 <vPortExitCritical+0x4c>)
 80095c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <vPortExitCritical+0x4c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d105      	bne.n	80095de <vPortExitCritical+0x42>
 80095d2:	2300      	movs	r3, #0
 80095d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	f383 8811 	msr	BASEPRI, r3
}
 80095dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bc80      	pop	{r7}
 80095e6:	4770      	bx	lr
 80095e8:	20000038 	.word	0x20000038
 80095ec:	00000000 	.word	0x00000000

080095f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095f0:	f3ef 8009 	mrs	r0, PSP
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <pxCurrentTCBConst>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009600:	6010      	str	r0, [r2, #0]
 8009602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800960a:	f380 8811 	msr	BASEPRI, r0
 800960e:	f7fe fd31 	bl	8008074 <vTaskSwitchContext>
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8811 	msr	BASEPRI, r0
 800961a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	6808      	ldr	r0, [r1, #0]
 8009622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009626:	f380 8809 	msr	PSP, r0
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	4770      	bx	lr

08009630 <pxCurrentTCBConst>:
 8009630:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop

08009638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	607b      	str	r3, [r7, #4]
}
 8009650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009652:	f7fe fc51 	bl	8007ef8 <xTaskIncrementTick>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800965c:	4b06      	ldr	r3, [pc, #24]	; (8009678 <SysTick_Handler+0x40>)
 800965e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	2300      	movs	r3, #0
 8009666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f383 8811 	msr	BASEPRI, r3
}
 800966e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009680:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <vPortSetupTimerInterrupt+0x30>)
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009686:	4b0a      	ldr	r3, [pc, #40]	; (80096b0 <vPortSetupTimerInterrupt+0x34>)
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <vPortSetupTimerInterrupt+0x38>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <vPortSetupTimerInterrupt+0x3c>)
 8009692:	fba2 2303 	umull	r2, r3, r2, r3
 8009696:	099b      	lsrs	r3, r3, #6
 8009698:	4a08      	ldr	r2, [pc, #32]	; (80096bc <vPortSetupTimerInterrupt+0x40>)
 800969a:	3b01      	subs	r3, #1
 800969c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800969e:	4b03      	ldr	r3, [pc, #12]	; (80096ac <vPortSetupTimerInterrupt+0x30>)
 80096a0:	2207      	movs	r2, #7
 80096a2:	601a      	str	r2, [r3, #0]
}
 80096a4:	bf00      	nop
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr
 80096ac:	e000e010 	.word	0xe000e010
 80096b0:	e000e018 	.word	0xe000e018
 80096b4:	2000002c 	.word	0x2000002c
 80096b8:	10624dd3 	.word	0x10624dd3
 80096bc:	e000e014 	.word	0xe000e014

080096c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096c6:	f3ef 8305 	mrs	r3, IPSR
 80096ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b0f      	cmp	r3, #15
 80096d0:	d914      	bls.n	80096fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096d2:	4a16      	ldr	r2, [pc, #88]	; (800972c <vPortValidateInterruptPriority+0x6c>)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096dc:	4b14      	ldr	r3, [pc, #80]	; (8009730 <vPortValidateInterruptPriority+0x70>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	7afa      	ldrb	r2, [r7, #11]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d20a      	bcs.n	80096fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	607b      	str	r3, [r7, #4]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096fc:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <vPortValidateInterruptPriority+0x74>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009704:	4b0c      	ldr	r3, [pc, #48]	; (8009738 <vPortValidateInterruptPriority+0x78>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	429a      	cmp	r2, r3
 800970a:	d90a      	bls.n	8009722 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	603b      	str	r3, [r7, #0]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <vPortValidateInterruptPriority+0x60>
	}
 8009722:	bf00      	nop
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	bc80      	pop	{r7}
 800972a:	4770      	bx	lr
 800972c:	e000e3f0 	.word	0xe000e3f0
 8009730:	20000dc8 	.word	0x20000dc8
 8009734:	e000ed0c 	.word	0xe000ed0c
 8009738:	20000dcc 	.word	0x20000dcc

0800973c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8009744:	f7fe fb0c 	bl	8007d60 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f845 	bl	80097d8 <malloc>
 800974e:	4603      	mov	r3, r0
 8009750:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009752:	f7fe fb13 	bl	8007d7c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8009756:	68fb      	ldr	r3, [r7, #12]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	if( pv )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d006      	beq.n	800977c <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800976e:	f7fe faf7 	bl	8007d60 <vTaskSuspendAll>
		{
			free( pv );
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f838 	bl	80097e8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8009778:	f7fe fb00 	bl	8007d7c <xTaskResumeAll>
	}
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <__errno>:
 8009784:	4b01      	ldr	r3, [pc, #4]	; (800978c <__errno+0x8>)
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	2000003c 	.word	0x2000003c

08009790 <__libc_init_array>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	2600      	movs	r6, #0
 8009794:	4d0c      	ldr	r5, [pc, #48]	; (80097c8 <__libc_init_array+0x38>)
 8009796:	4c0d      	ldr	r4, [pc, #52]	; (80097cc <__libc_init_array+0x3c>)
 8009798:	1b64      	subs	r4, r4, r5
 800979a:	10a4      	asrs	r4, r4, #2
 800979c:	42a6      	cmp	r6, r4
 800979e:	d109      	bne.n	80097b4 <__libc_init_array+0x24>
 80097a0:	f000 fc6c 	bl	800a07c <_init>
 80097a4:	2600      	movs	r6, #0
 80097a6:	4d0a      	ldr	r5, [pc, #40]	; (80097d0 <__libc_init_array+0x40>)
 80097a8:	4c0a      	ldr	r4, [pc, #40]	; (80097d4 <__libc_init_array+0x44>)
 80097aa:	1b64      	subs	r4, r4, r5
 80097ac:	10a4      	asrs	r4, r4, #2
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	d105      	bne.n	80097be <__libc_init_array+0x2e>
 80097b2:	bd70      	pop	{r4, r5, r6, pc}
 80097b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b8:	4798      	blx	r3
 80097ba:	3601      	adds	r6, #1
 80097bc:	e7ee      	b.n	800979c <__libc_init_array+0xc>
 80097be:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c2:	4798      	blx	r3
 80097c4:	3601      	adds	r6, #1
 80097c6:	e7f2      	b.n	80097ae <__libc_init_array+0x1e>
 80097c8:	0800a2d8 	.word	0x0800a2d8
 80097cc:	0800a2d8 	.word	0x0800a2d8
 80097d0:	0800a2d8 	.word	0x0800a2d8
 80097d4:	0800a2dc 	.word	0x0800a2dc

080097d8 <malloc>:
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <malloc+0xc>)
 80097da:	4601      	mov	r1, r0
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	f000 b86d 	b.w	80098bc <_malloc_r>
 80097e2:	bf00      	nop
 80097e4:	2000003c 	.word	0x2000003c

080097e8 <free>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <free+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f000 b819 	b.w	8009824 <_free_r>
 80097f2:	bf00      	nop
 80097f4:	2000003c 	.word	0x2000003c

080097f8 <memcpy>:
 80097f8:	440a      	add	r2, r1
 80097fa:	4291      	cmp	r1, r2
 80097fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009800:	d100      	bne.n	8009804 <memcpy+0xc>
 8009802:	4770      	bx	lr
 8009804:	b510      	push	{r4, lr}
 8009806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800980a:	4291      	cmp	r1, r2
 800980c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009810:	d1f9      	bne.n	8009806 <memcpy+0xe>
 8009812:	bd10      	pop	{r4, pc}

08009814 <memset>:
 8009814:	4603      	mov	r3, r0
 8009816:	4402      	add	r2, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>

08009824 <_free_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4605      	mov	r5, r0
 8009828:	2900      	cmp	r1, #0
 800982a:	d043      	beq.n	80098b4 <_free_r+0x90>
 800982c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009830:	1f0c      	subs	r4, r1, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	bfb8      	it	lt
 8009836:	18e4      	addlt	r4, r4, r3
 8009838:	f000 f8ca 	bl	80099d0 <__malloc_lock>
 800983c:	4a1e      	ldr	r2, [pc, #120]	; (80098b8 <_free_r+0x94>)
 800983e:	6813      	ldr	r3, [r2, #0]
 8009840:	4610      	mov	r0, r2
 8009842:	b933      	cbnz	r3, 8009852 <_free_r+0x2e>
 8009844:	6063      	str	r3, [r4, #4]
 8009846:	6014      	str	r4, [r2, #0]
 8009848:	4628      	mov	r0, r5
 800984a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800984e:	f000 b8c5 	b.w	80099dc <__malloc_unlock>
 8009852:	42a3      	cmp	r3, r4
 8009854:	d90a      	bls.n	800986c <_free_r+0x48>
 8009856:	6821      	ldr	r1, [r4, #0]
 8009858:	1862      	adds	r2, r4, r1
 800985a:	4293      	cmp	r3, r2
 800985c:	bf01      	itttt	eq
 800985e:	681a      	ldreq	r2, [r3, #0]
 8009860:	685b      	ldreq	r3, [r3, #4]
 8009862:	1852      	addeq	r2, r2, r1
 8009864:	6022      	streq	r2, [r4, #0]
 8009866:	6063      	str	r3, [r4, #4]
 8009868:	6004      	str	r4, [r0, #0]
 800986a:	e7ed      	b.n	8009848 <_free_r+0x24>
 800986c:	461a      	mov	r2, r3
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	b10b      	cbz	r3, 8009876 <_free_r+0x52>
 8009872:	42a3      	cmp	r3, r4
 8009874:	d9fa      	bls.n	800986c <_free_r+0x48>
 8009876:	6811      	ldr	r1, [r2, #0]
 8009878:	1850      	adds	r0, r2, r1
 800987a:	42a0      	cmp	r0, r4
 800987c:	d10b      	bne.n	8009896 <_free_r+0x72>
 800987e:	6820      	ldr	r0, [r4, #0]
 8009880:	4401      	add	r1, r0
 8009882:	1850      	adds	r0, r2, r1
 8009884:	4283      	cmp	r3, r0
 8009886:	6011      	str	r1, [r2, #0]
 8009888:	d1de      	bne.n	8009848 <_free_r+0x24>
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	4401      	add	r1, r0
 8009890:	6011      	str	r1, [r2, #0]
 8009892:	6053      	str	r3, [r2, #4]
 8009894:	e7d8      	b.n	8009848 <_free_r+0x24>
 8009896:	d902      	bls.n	800989e <_free_r+0x7a>
 8009898:	230c      	movs	r3, #12
 800989a:	602b      	str	r3, [r5, #0]
 800989c:	e7d4      	b.n	8009848 <_free_r+0x24>
 800989e:	6820      	ldr	r0, [r4, #0]
 80098a0:	1821      	adds	r1, r4, r0
 80098a2:	428b      	cmp	r3, r1
 80098a4:	bf01      	itttt	eq
 80098a6:	6819      	ldreq	r1, [r3, #0]
 80098a8:	685b      	ldreq	r3, [r3, #4]
 80098aa:	1809      	addeq	r1, r1, r0
 80098ac:	6021      	streq	r1, [r4, #0]
 80098ae:	6063      	str	r3, [r4, #4]
 80098b0:	6054      	str	r4, [r2, #4]
 80098b2:	e7c9      	b.n	8009848 <_free_r+0x24>
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	bf00      	nop
 80098b8:	20000dd0 	.word	0x20000dd0

080098bc <_malloc_r>:
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	1ccd      	adds	r5, r1, #3
 80098c0:	f025 0503 	bic.w	r5, r5, #3
 80098c4:	3508      	adds	r5, #8
 80098c6:	2d0c      	cmp	r5, #12
 80098c8:	bf38      	it	cc
 80098ca:	250c      	movcc	r5, #12
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	4606      	mov	r6, r0
 80098d0:	db01      	blt.n	80098d6 <_malloc_r+0x1a>
 80098d2:	42a9      	cmp	r1, r5
 80098d4:	d903      	bls.n	80098de <_malloc_r+0x22>
 80098d6:	230c      	movs	r3, #12
 80098d8:	6033      	str	r3, [r6, #0]
 80098da:	2000      	movs	r0, #0
 80098dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098de:	f000 f877 	bl	80099d0 <__malloc_lock>
 80098e2:	4921      	ldr	r1, [pc, #132]	; (8009968 <_malloc_r+0xac>)
 80098e4:	680a      	ldr	r2, [r1, #0]
 80098e6:	4614      	mov	r4, r2
 80098e8:	b99c      	cbnz	r4, 8009912 <_malloc_r+0x56>
 80098ea:	4f20      	ldr	r7, [pc, #128]	; (800996c <_malloc_r+0xb0>)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	b923      	cbnz	r3, 80098fa <_malloc_r+0x3e>
 80098f0:	4621      	mov	r1, r4
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 f83c 	bl	8009970 <_sbrk_r>
 80098f8:	6038      	str	r0, [r7, #0]
 80098fa:	4629      	mov	r1, r5
 80098fc:	4630      	mov	r0, r6
 80098fe:	f000 f837 	bl	8009970 <_sbrk_r>
 8009902:	1c43      	adds	r3, r0, #1
 8009904:	d123      	bne.n	800994e <_malloc_r+0x92>
 8009906:	230c      	movs	r3, #12
 8009908:	4630      	mov	r0, r6
 800990a:	6033      	str	r3, [r6, #0]
 800990c:	f000 f866 	bl	80099dc <__malloc_unlock>
 8009910:	e7e3      	b.n	80098da <_malloc_r+0x1e>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	1b5b      	subs	r3, r3, r5
 8009916:	d417      	bmi.n	8009948 <_malloc_r+0x8c>
 8009918:	2b0b      	cmp	r3, #11
 800991a:	d903      	bls.n	8009924 <_malloc_r+0x68>
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	441c      	add	r4, r3
 8009920:	6025      	str	r5, [r4, #0]
 8009922:	e004      	b.n	800992e <_malloc_r+0x72>
 8009924:	6863      	ldr	r3, [r4, #4]
 8009926:	42a2      	cmp	r2, r4
 8009928:	bf0c      	ite	eq
 800992a:	600b      	streq	r3, [r1, #0]
 800992c:	6053      	strne	r3, [r2, #4]
 800992e:	4630      	mov	r0, r6
 8009930:	f000 f854 	bl	80099dc <__malloc_unlock>
 8009934:	f104 000b 	add.w	r0, r4, #11
 8009938:	1d23      	adds	r3, r4, #4
 800993a:	f020 0007 	bic.w	r0, r0, #7
 800993e:	1ac2      	subs	r2, r0, r3
 8009940:	d0cc      	beq.n	80098dc <_malloc_r+0x20>
 8009942:	1a1b      	subs	r3, r3, r0
 8009944:	50a3      	str	r3, [r4, r2]
 8009946:	e7c9      	b.n	80098dc <_malloc_r+0x20>
 8009948:	4622      	mov	r2, r4
 800994a:	6864      	ldr	r4, [r4, #4]
 800994c:	e7cc      	b.n	80098e8 <_malloc_r+0x2c>
 800994e:	1cc4      	adds	r4, r0, #3
 8009950:	f024 0403 	bic.w	r4, r4, #3
 8009954:	42a0      	cmp	r0, r4
 8009956:	d0e3      	beq.n	8009920 <_malloc_r+0x64>
 8009958:	1a21      	subs	r1, r4, r0
 800995a:	4630      	mov	r0, r6
 800995c:	f000 f808 	bl	8009970 <_sbrk_r>
 8009960:	3001      	adds	r0, #1
 8009962:	d1dd      	bne.n	8009920 <_malloc_r+0x64>
 8009964:	e7cf      	b.n	8009906 <_malloc_r+0x4a>
 8009966:	bf00      	nop
 8009968:	20000dd0 	.word	0x20000dd0
 800996c:	20000dd4 	.word	0x20000dd4

08009970 <_sbrk_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	2300      	movs	r3, #0
 8009974:	4d05      	ldr	r5, [pc, #20]	; (800998c <_sbrk_r+0x1c>)
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f9 fa12 	bl	8002da4 <_sbrk>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_sbrk_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_sbrk_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	2000110c 	.word	0x2000110c

08009990 <siprintf>:
 8009990:	b40e      	push	{r1, r2, r3}
 8009992:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009996:	b500      	push	{lr}
 8009998:	b09c      	sub	sp, #112	; 0x70
 800999a:	ab1d      	add	r3, sp, #116	; 0x74
 800999c:	9002      	str	r0, [sp, #8]
 800999e:	9006      	str	r0, [sp, #24]
 80099a0:	9107      	str	r1, [sp, #28]
 80099a2:	9104      	str	r1, [sp, #16]
 80099a4:	4808      	ldr	r0, [pc, #32]	; (80099c8 <siprintf+0x38>)
 80099a6:	4909      	ldr	r1, [pc, #36]	; (80099cc <siprintf+0x3c>)
 80099a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ac:	9105      	str	r1, [sp, #20]
 80099ae:	6800      	ldr	r0, [r0, #0]
 80099b0:	a902      	add	r1, sp, #8
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	f000 f874 	bl	8009aa0 <_svfiprintf_r>
 80099b8:	2200      	movs	r2, #0
 80099ba:	9b02      	ldr	r3, [sp, #8]
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	b01c      	add	sp, #112	; 0x70
 80099c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c4:	b003      	add	sp, #12
 80099c6:	4770      	bx	lr
 80099c8:	2000003c 	.word	0x2000003c
 80099cc:	ffff0208 	.word	0xffff0208

080099d0 <__malloc_lock>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__malloc_lock+0x8>)
 80099d2:	f000 bafb 	b.w	8009fcc <__retarget_lock_acquire_recursive>
 80099d6:	bf00      	nop
 80099d8:	20001114 	.word	0x20001114

080099dc <__malloc_unlock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__malloc_unlock+0x8>)
 80099de:	f000 baf6 	b.w	8009fce <__retarget_lock_release_recursive>
 80099e2:	bf00      	nop
 80099e4:	20001114 	.word	0x20001114

080099e8 <__ssputs_r>:
 80099e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	688e      	ldr	r6, [r1, #8]
 80099ee:	4682      	mov	sl, r0
 80099f0:	429e      	cmp	r6, r3
 80099f2:	460c      	mov	r4, r1
 80099f4:	4690      	mov	r8, r2
 80099f6:	461f      	mov	r7, r3
 80099f8:	d838      	bhi.n	8009a6c <__ssputs_r+0x84>
 80099fa:	898a      	ldrh	r2, [r1, #12]
 80099fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a00:	d032      	beq.n	8009a68 <__ssputs_r+0x80>
 8009a02:	6825      	ldr	r5, [r4, #0]
 8009a04:	6909      	ldr	r1, [r1, #16]
 8009a06:	3301      	adds	r3, #1
 8009a08:	eba5 0901 	sub.w	r9, r5, r1
 8009a0c:	6965      	ldr	r5, [r4, #20]
 8009a0e:	444b      	add	r3, r9
 8009a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a18:	106d      	asrs	r5, r5, #1
 8009a1a:	429d      	cmp	r5, r3
 8009a1c:	bf38      	it	cc
 8009a1e:	461d      	movcc	r5, r3
 8009a20:	0553      	lsls	r3, r2, #21
 8009a22:	d531      	bpl.n	8009a88 <__ssputs_r+0xa0>
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7ff ff49 	bl	80098bc <_malloc_r>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	b950      	cbnz	r0, 8009a44 <__ssputs_r+0x5c>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	f8ca 3000 	str.w	r3, [sl]
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	464a      	mov	r2, r9
 8009a46:	6921      	ldr	r1, [r4, #16]
 8009a48:	f7ff fed6 	bl	80097f8 <memcpy>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	6126      	str	r6, [r4, #16]
 8009a5a:	444e      	add	r6, r9
 8009a5c:	6026      	str	r6, [r4, #0]
 8009a5e:	463e      	mov	r6, r7
 8009a60:	6165      	str	r5, [r4, #20]
 8009a62:	eba5 0509 	sub.w	r5, r5, r9
 8009a66:	60a5      	str	r5, [r4, #8]
 8009a68:	42be      	cmp	r6, r7
 8009a6a:	d900      	bls.n	8009a6e <__ssputs_r+0x86>
 8009a6c:	463e      	mov	r6, r7
 8009a6e:	4632      	mov	r2, r6
 8009a70:	4641      	mov	r1, r8
 8009a72:	6820      	ldr	r0, [r4, #0]
 8009a74:	f000 faba 	bl	8009fec <memmove>
 8009a78:	68a3      	ldr	r3, [r4, #8]
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	1b9b      	subs	r3, r3, r6
 8009a7e:	4432      	add	r2, r6
 8009a80:	2000      	movs	r0, #0
 8009a82:	60a3      	str	r3, [r4, #8]
 8009a84:	6022      	str	r2, [r4, #0]
 8009a86:	e7db      	b.n	8009a40 <__ssputs_r+0x58>
 8009a88:	462a      	mov	r2, r5
 8009a8a:	f000 fac9 	bl	800a020 <_realloc_r>
 8009a8e:	4606      	mov	r6, r0
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d1e1      	bne.n	8009a58 <__ssputs_r+0x70>
 8009a94:	4650      	mov	r0, sl
 8009a96:	6921      	ldr	r1, [r4, #16]
 8009a98:	f7ff fec4 	bl	8009824 <_free_r>
 8009a9c:	e7c7      	b.n	8009a2e <__ssputs_r+0x46>
	...

08009aa0 <_svfiprintf_r>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	4698      	mov	r8, r3
 8009aa6:	898b      	ldrh	r3, [r1, #12]
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	061b      	lsls	r3, r3, #24
 8009aac:	460d      	mov	r5, r1
 8009aae:	4614      	mov	r4, r2
 8009ab0:	b09d      	sub	sp, #116	; 0x74
 8009ab2:	d50e      	bpl.n	8009ad2 <_svfiprintf_r+0x32>
 8009ab4:	690b      	ldr	r3, [r1, #16]
 8009ab6:	b963      	cbnz	r3, 8009ad2 <_svfiprintf_r+0x32>
 8009ab8:	2140      	movs	r1, #64	; 0x40
 8009aba:	f7ff feff 	bl	80098bc <_malloc_r>
 8009abe:	6028      	str	r0, [r5, #0]
 8009ac0:	6128      	str	r0, [r5, #16]
 8009ac2:	b920      	cbnz	r0, 8009ace <_svfiprintf_r+0x2e>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8009acc:	e0d1      	b.n	8009c72 <_svfiprintf_r+0x1d2>
 8009ace:	2340      	movs	r3, #64	; 0x40
 8009ad0:	616b      	str	r3, [r5, #20]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad6:	2320      	movs	r3, #32
 8009ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009adc:	2330      	movs	r3, #48	; 0x30
 8009ade:	f04f 0901 	mov.w	r9, #1
 8009ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ae6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c8c <_svfiprintf_r+0x1ec>
 8009aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aee:	4623      	mov	r3, r4
 8009af0:	469a      	mov	sl, r3
 8009af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af6:	b10a      	cbz	r2, 8009afc <_svfiprintf_r+0x5c>
 8009af8:	2a25      	cmp	r2, #37	; 0x25
 8009afa:	d1f9      	bne.n	8009af0 <_svfiprintf_r+0x50>
 8009afc:	ebba 0b04 	subs.w	fp, sl, r4
 8009b00:	d00b      	beq.n	8009b1a <_svfiprintf_r+0x7a>
 8009b02:	465b      	mov	r3, fp
 8009b04:	4622      	mov	r2, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	4638      	mov	r0, r7
 8009b0a:	f7ff ff6d 	bl	80099e8 <__ssputs_r>
 8009b0e:	3001      	adds	r0, #1
 8009b10:	f000 80aa 	beq.w	8009c68 <_svfiprintf_r+0x1c8>
 8009b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b16:	445a      	add	r2, fp
 8009b18:	9209      	str	r2, [sp, #36]	; 0x24
 8009b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 80a2 	beq.w	8009c68 <_svfiprintf_r+0x1c8>
 8009b24:	2300      	movs	r3, #0
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b2e:	f10a 0a01 	add.w	sl, sl, #1
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	9307      	str	r3, [sp, #28]
 8009b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b3c:	4654      	mov	r4, sl
 8009b3e:	2205      	movs	r2, #5
 8009b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b44:	4851      	ldr	r0, [pc, #324]	; (8009c8c <_svfiprintf_r+0x1ec>)
 8009b46:	f000 fa43 	bl	8009fd0 <memchr>
 8009b4a:	9a04      	ldr	r2, [sp, #16]
 8009b4c:	b9d8      	cbnz	r0, 8009b86 <_svfiprintf_r+0xe6>
 8009b4e:	06d0      	lsls	r0, r2, #27
 8009b50:	bf44      	itt	mi
 8009b52:	2320      	movmi	r3, #32
 8009b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b58:	0711      	lsls	r1, r2, #28
 8009b5a:	bf44      	itt	mi
 8009b5c:	232b      	movmi	r3, #43	; 0x2b
 8009b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b62:	f89a 3000 	ldrb.w	r3, [sl]
 8009b66:	2b2a      	cmp	r3, #42	; 0x2a
 8009b68:	d015      	beq.n	8009b96 <_svfiprintf_r+0xf6>
 8009b6a:	4654      	mov	r4, sl
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	9a07      	ldr	r2, [sp, #28]
 8009b74:	4621      	mov	r1, r4
 8009b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b7a:	3b30      	subs	r3, #48	; 0x30
 8009b7c:	2b09      	cmp	r3, #9
 8009b7e:	d94e      	bls.n	8009c1e <_svfiprintf_r+0x17e>
 8009b80:	b1b0      	cbz	r0, 8009bb0 <_svfiprintf_r+0x110>
 8009b82:	9207      	str	r2, [sp, #28]
 8009b84:	e014      	b.n	8009bb0 <_svfiprintf_r+0x110>
 8009b86:	eba0 0308 	sub.w	r3, r0, r8
 8009b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	46a2      	mov	sl, r4
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	e7d2      	b.n	8009b3c <_svfiprintf_r+0x9c>
 8009b96:	9b03      	ldr	r3, [sp, #12]
 8009b98:	1d19      	adds	r1, r3, #4
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	9103      	str	r1, [sp, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfbb      	ittet	lt
 8009ba2:	425b      	neglt	r3, r3
 8009ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba8:	9307      	strge	r3, [sp, #28]
 8009baa:	9307      	strlt	r3, [sp, #28]
 8009bac:	bfb8      	it	lt
 8009bae:	9204      	strlt	r2, [sp, #16]
 8009bb0:	7823      	ldrb	r3, [r4, #0]
 8009bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8009bb4:	d10c      	bne.n	8009bd0 <_svfiprintf_r+0x130>
 8009bb6:	7863      	ldrb	r3, [r4, #1]
 8009bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bba:	d135      	bne.n	8009c28 <_svfiprintf_r+0x188>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	3402      	adds	r4, #2
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	9203      	str	r2, [sp, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bfb8      	it	lt
 8009bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c9c <_svfiprintf_r+0x1fc>
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	7821      	ldrb	r1, [r4, #0]
 8009bda:	f000 f9f9 	bl	8009fd0 <memchr>
 8009bde:	b140      	cbz	r0, 8009bf2 <_svfiprintf_r+0x152>
 8009be0:	2340      	movs	r3, #64	; 0x40
 8009be2:	eba0 000a 	sub.w	r0, r0, sl
 8009be6:	fa03 f000 	lsl.w	r0, r3, r0
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	3401      	adds	r4, #1
 8009bee:	4303      	orrs	r3, r0
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf6:	2206      	movs	r2, #6
 8009bf8:	4825      	ldr	r0, [pc, #148]	; (8009c90 <_svfiprintf_r+0x1f0>)
 8009bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bfe:	f000 f9e7 	bl	8009fd0 <memchr>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d038      	beq.n	8009c78 <_svfiprintf_r+0x1d8>
 8009c06:	4b23      	ldr	r3, [pc, #140]	; (8009c94 <_svfiprintf_r+0x1f4>)
 8009c08:	bb1b      	cbnz	r3, 8009c52 <_svfiprintf_r+0x1b2>
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	3307      	adds	r3, #7
 8009c0e:	f023 0307 	bic.w	r3, r3, #7
 8009c12:	3308      	adds	r3, #8
 8009c14:	9303      	str	r3, [sp, #12]
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	4433      	add	r3, r6
 8009c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1c:	e767      	b.n	8009aee <_svfiprintf_r+0x4e>
 8009c1e:	460c      	mov	r4, r1
 8009c20:	2001      	movs	r0, #1
 8009c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c26:	e7a5      	b.n	8009b74 <_svfiprintf_r+0xd4>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f04f 0c0a 	mov.w	ip, #10
 8009c2e:	4619      	mov	r1, r3
 8009c30:	3401      	adds	r4, #1
 8009c32:	9305      	str	r3, [sp, #20]
 8009c34:	4620      	mov	r0, r4
 8009c36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c3a:	3a30      	subs	r2, #48	; 0x30
 8009c3c:	2a09      	cmp	r2, #9
 8009c3e:	d903      	bls.n	8009c48 <_svfiprintf_r+0x1a8>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0c5      	beq.n	8009bd0 <_svfiprintf_r+0x130>
 8009c44:	9105      	str	r1, [sp, #20]
 8009c46:	e7c3      	b.n	8009bd0 <_svfiprintf_r+0x130>
 8009c48:	4604      	mov	r4, r0
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c50:	e7f0      	b.n	8009c34 <_svfiprintf_r+0x194>
 8009c52:	ab03      	add	r3, sp, #12
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	462a      	mov	r2, r5
 8009c58:	4638      	mov	r0, r7
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <_svfiprintf_r+0x1f8>)
 8009c5c:	a904      	add	r1, sp, #16
 8009c5e:	f3af 8000 	nop.w
 8009c62:	1c42      	adds	r2, r0, #1
 8009c64:	4606      	mov	r6, r0
 8009c66:	d1d6      	bne.n	8009c16 <_svfiprintf_r+0x176>
 8009c68:	89ab      	ldrh	r3, [r5, #12]
 8009c6a:	065b      	lsls	r3, r3, #25
 8009c6c:	f53f af2c 	bmi.w	8009ac8 <_svfiprintf_r+0x28>
 8009c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c72:	b01d      	add	sp, #116	; 0x74
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c78:	ab03      	add	r3, sp, #12
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	4638      	mov	r0, r7
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <_svfiprintf_r+0x1f8>)
 8009c82:	a904      	add	r1, sp, #16
 8009c84:	f000 f87c 	bl	8009d80 <_printf_i>
 8009c88:	e7eb      	b.n	8009c62 <_svfiprintf_r+0x1c2>
 8009c8a:	bf00      	nop
 8009c8c:	0800a2a4 	.word	0x0800a2a4
 8009c90:	0800a2ae 	.word	0x0800a2ae
 8009c94:	00000000 	.word	0x00000000
 8009c98:	080099e9 	.word	0x080099e9
 8009c9c:	0800a2aa 	.word	0x0800a2aa

08009ca0 <_printf_common>:
 8009ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca4:	4616      	mov	r6, r2
 8009ca6:	4699      	mov	r9, r3
 8009ca8:	688a      	ldr	r2, [r1, #8]
 8009caa:	690b      	ldr	r3, [r1, #16]
 8009cac:	4607      	mov	r7, r0
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	bfb8      	it	lt
 8009cb2:	4613      	movlt	r3, r2
 8009cb4:	6033      	str	r3, [r6, #0]
 8009cb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cba:	460c      	mov	r4, r1
 8009cbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cc0:	b10a      	cbz	r2, 8009cc6 <_printf_common+0x26>
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	6033      	str	r3, [r6, #0]
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	0699      	lsls	r1, r3, #26
 8009cca:	bf42      	ittt	mi
 8009ccc:	6833      	ldrmi	r3, [r6, #0]
 8009cce:	3302      	addmi	r3, #2
 8009cd0:	6033      	strmi	r3, [r6, #0]
 8009cd2:	6825      	ldr	r5, [r4, #0]
 8009cd4:	f015 0506 	ands.w	r5, r5, #6
 8009cd8:	d106      	bne.n	8009ce8 <_printf_common+0x48>
 8009cda:	f104 0a19 	add.w	sl, r4, #25
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	6832      	ldr	r2, [r6, #0]
 8009ce2:	1a9b      	subs	r3, r3, r2
 8009ce4:	42ab      	cmp	r3, r5
 8009ce6:	dc28      	bgt.n	8009d3a <_printf_common+0x9a>
 8009ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cec:	1e13      	subs	r3, r2, #0
 8009cee:	6822      	ldr	r2, [r4, #0]
 8009cf0:	bf18      	it	ne
 8009cf2:	2301      	movne	r3, #1
 8009cf4:	0692      	lsls	r2, r2, #26
 8009cf6:	d42d      	bmi.n	8009d54 <_printf_common+0xb4>
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d00:	47c0      	blx	r8
 8009d02:	3001      	adds	r0, #1
 8009d04:	d020      	beq.n	8009d48 <_printf_common+0xa8>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	68e5      	ldr	r5, [r4, #12]
 8009d0a:	f003 0306 	and.w	r3, r3, #6
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	bf18      	it	ne
 8009d12:	2500      	movne	r5, #0
 8009d14:	6832      	ldr	r2, [r6, #0]
 8009d16:	f04f 0600 	mov.w	r6, #0
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	bf08      	it	eq
 8009d1e:	1aad      	subeq	r5, r5, r2
 8009d20:	6922      	ldr	r2, [r4, #16]
 8009d22:	bf08      	it	eq
 8009d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	bfc4      	itt	gt
 8009d2c:	1a9b      	subgt	r3, r3, r2
 8009d2e:	18ed      	addgt	r5, r5, r3
 8009d30:	341a      	adds	r4, #26
 8009d32:	42b5      	cmp	r5, r6
 8009d34:	d11a      	bne.n	8009d6c <_printf_common+0xcc>
 8009d36:	2000      	movs	r0, #0
 8009d38:	e008      	b.n	8009d4c <_printf_common+0xac>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	4649      	mov	r1, r9
 8009d40:	4638      	mov	r0, r7
 8009d42:	47c0      	blx	r8
 8009d44:	3001      	adds	r0, #1
 8009d46:	d103      	bne.n	8009d50 <_printf_common+0xb0>
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d50:	3501      	adds	r5, #1
 8009d52:	e7c4      	b.n	8009cde <_printf_common+0x3e>
 8009d54:	2030      	movs	r0, #48	; 0x30
 8009d56:	18e1      	adds	r1, r4, r3
 8009d58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d62:	4422      	add	r2, r4
 8009d64:	3302      	adds	r3, #2
 8009d66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d6a:	e7c5      	b.n	8009cf8 <_printf_common+0x58>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	4622      	mov	r2, r4
 8009d70:	4649      	mov	r1, r9
 8009d72:	4638      	mov	r0, r7
 8009d74:	47c0      	blx	r8
 8009d76:	3001      	adds	r0, #1
 8009d78:	d0e6      	beq.n	8009d48 <_printf_common+0xa8>
 8009d7a:	3601      	adds	r6, #1
 8009d7c:	e7d9      	b.n	8009d32 <_printf_common+0x92>
	...

08009d80 <_printf_i>:
 8009d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d84:	460c      	mov	r4, r1
 8009d86:	7e27      	ldrb	r7, [r4, #24]
 8009d88:	4691      	mov	r9, r2
 8009d8a:	2f78      	cmp	r7, #120	; 0x78
 8009d8c:	4680      	mov	r8, r0
 8009d8e:	469a      	mov	sl, r3
 8009d90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009d92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d96:	d807      	bhi.n	8009da8 <_printf_i+0x28>
 8009d98:	2f62      	cmp	r7, #98	; 0x62
 8009d9a:	d80a      	bhi.n	8009db2 <_printf_i+0x32>
 8009d9c:	2f00      	cmp	r7, #0
 8009d9e:	f000 80d9 	beq.w	8009f54 <_printf_i+0x1d4>
 8009da2:	2f58      	cmp	r7, #88	; 0x58
 8009da4:	f000 80a4 	beq.w	8009ef0 <_printf_i+0x170>
 8009da8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009db0:	e03a      	b.n	8009e28 <_printf_i+0xa8>
 8009db2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009db6:	2b15      	cmp	r3, #21
 8009db8:	d8f6      	bhi.n	8009da8 <_printf_i+0x28>
 8009dba:	a001      	add	r0, pc, #4	; (adr r0, 8009dc0 <_printf_i+0x40>)
 8009dbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009dc0:	08009e19 	.word	0x08009e19
 8009dc4:	08009e2d 	.word	0x08009e2d
 8009dc8:	08009da9 	.word	0x08009da9
 8009dcc:	08009da9 	.word	0x08009da9
 8009dd0:	08009da9 	.word	0x08009da9
 8009dd4:	08009da9 	.word	0x08009da9
 8009dd8:	08009e2d 	.word	0x08009e2d
 8009ddc:	08009da9 	.word	0x08009da9
 8009de0:	08009da9 	.word	0x08009da9
 8009de4:	08009da9 	.word	0x08009da9
 8009de8:	08009da9 	.word	0x08009da9
 8009dec:	08009f3b 	.word	0x08009f3b
 8009df0:	08009e5d 	.word	0x08009e5d
 8009df4:	08009f1d 	.word	0x08009f1d
 8009df8:	08009da9 	.word	0x08009da9
 8009dfc:	08009da9 	.word	0x08009da9
 8009e00:	08009f5d 	.word	0x08009f5d
 8009e04:	08009da9 	.word	0x08009da9
 8009e08:	08009e5d 	.word	0x08009e5d
 8009e0c:	08009da9 	.word	0x08009da9
 8009e10:	08009da9 	.word	0x08009da9
 8009e14:	08009f25 	.word	0x08009f25
 8009e18:	680b      	ldr	r3, [r1, #0]
 8009e1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e1e:	1d1a      	adds	r2, r3, #4
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	600a      	str	r2, [r1, #0]
 8009e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e0a4      	b.n	8009f76 <_printf_i+0x1f6>
 8009e2c:	6825      	ldr	r5, [r4, #0]
 8009e2e:	6808      	ldr	r0, [r1, #0]
 8009e30:	062e      	lsls	r6, r5, #24
 8009e32:	f100 0304 	add.w	r3, r0, #4
 8009e36:	d50a      	bpl.n	8009e4e <_printf_i+0xce>
 8009e38:	6805      	ldr	r5, [r0, #0]
 8009e3a:	600b      	str	r3, [r1, #0]
 8009e3c:	2d00      	cmp	r5, #0
 8009e3e:	da03      	bge.n	8009e48 <_printf_i+0xc8>
 8009e40:	232d      	movs	r3, #45	; 0x2d
 8009e42:	426d      	negs	r5, r5
 8009e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e48:	230a      	movs	r3, #10
 8009e4a:	485e      	ldr	r0, [pc, #376]	; (8009fc4 <_printf_i+0x244>)
 8009e4c:	e019      	b.n	8009e82 <_printf_i+0x102>
 8009e4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e52:	6805      	ldr	r5, [r0, #0]
 8009e54:	600b      	str	r3, [r1, #0]
 8009e56:	bf18      	it	ne
 8009e58:	b22d      	sxthne	r5, r5
 8009e5a:	e7ef      	b.n	8009e3c <_printf_i+0xbc>
 8009e5c:	680b      	ldr	r3, [r1, #0]
 8009e5e:	6825      	ldr	r5, [r4, #0]
 8009e60:	1d18      	adds	r0, r3, #4
 8009e62:	6008      	str	r0, [r1, #0]
 8009e64:	0628      	lsls	r0, r5, #24
 8009e66:	d501      	bpl.n	8009e6c <_printf_i+0xec>
 8009e68:	681d      	ldr	r5, [r3, #0]
 8009e6a:	e002      	b.n	8009e72 <_printf_i+0xf2>
 8009e6c:	0669      	lsls	r1, r5, #25
 8009e6e:	d5fb      	bpl.n	8009e68 <_printf_i+0xe8>
 8009e70:	881d      	ldrh	r5, [r3, #0]
 8009e72:	2f6f      	cmp	r7, #111	; 0x6f
 8009e74:	bf0c      	ite	eq
 8009e76:	2308      	moveq	r3, #8
 8009e78:	230a      	movne	r3, #10
 8009e7a:	4852      	ldr	r0, [pc, #328]	; (8009fc4 <_printf_i+0x244>)
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e82:	6866      	ldr	r6, [r4, #4]
 8009e84:	2e00      	cmp	r6, #0
 8009e86:	bfa8      	it	ge
 8009e88:	6821      	ldrge	r1, [r4, #0]
 8009e8a:	60a6      	str	r6, [r4, #8]
 8009e8c:	bfa4      	itt	ge
 8009e8e:	f021 0104 	bicge.w	r1, r1, #4
 8009e92:	6021      	strge	r1, [r4, #0]
 8009e94:	b90d      	cbnz	r5, 8009e9a <_printf_i+0x11a>
 8009e96:	2e00      	cmp	r6, #0
 8009e98:	d04d      	beq.n	8009f36 <_printf_i+0x1b6>
 8009e9a:	4616      	mov	r6, r2
 8009e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8009ea4:	5dc7      	ldrb	r7, [r0, r7]
 8009ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009eaa:	462f      	mov	r7, r5
 8009eac:	42bb      	cmp	r3, r7
 8009eae:	460d      	mov	r5, r1
 8009eb0:	d9f4      	bls.n	8009e9c <_printf_i+0x11c>
 8009eb2:	2b08      	cmp	r3, #8
 8009eb4:	d10b      	bne.n	8009ece <_printf_i+0x14e>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	07df      	lsls	r7, r3, #31
 8009eba:	d508      	bpl.n	8009ece <_printf_i+0x14e>
 8009ebc:	6923      	ldr	r3, [r4, #16]
 8009ebe:	6861      	ldr	r1, [r4, #4]
 8009ec0:	4299      	cmp	r1, r3
 8009ec2:	bfde      	ittt	le
 8009ec4:	2330      	movle	r3, #48	; 0x30
 8009ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009eca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ece:	1b92      	subs	r2, r2, r6
 8009ed0:	6122      	str	r2, [r4, #16]
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	f8cd a000 	str.w	sl, [sp]
 8009edc:	aa03      	add	r2, sp, #12
 8009ede:	f7ff fedf 	bl	8009ca0 <_printf_common>
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d14c      	bne.n	8009f80 <_printf_i+0x200>
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	b004      	add	sp, #16
 8009eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef0:	4834      	ldr	r0, [pc, #208]	; (8009fc4 <_printf_i+0x244>)
 8009ef2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ef6:	680e      	ldr	r6, [r1, #0]
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	f856 5b04 	ldr.w	r5, [r6], #4
 8009efe:	061f      	lsls	r7, r3, #24
 8009f00:	600e      	str	r6, [r1, #0]
 8009f02:	d514      	bpl.n	8009f2e <_printf_i+0x1ae>
 8009f04:	07d9      	lsls	r1, r3, #31
 8009f06:	bf44      	itt	mi
 8009f08:	f043 0320 	orrmi.w	r3, r3, #32
 8009f0c:	6023      	strmi	r3, [r4, #0]
 8009f0e:	b91d      	cbnz	r5, 8009f18 <_printf_i+0x198>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	f023 0320 	bic.w	r3, r3, #32
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	2310      	movs	r3, #16
 8009f1a:	e7af      	b.n	8009e7c <_printf_i+0xfc>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	f043 0320 	orr.w	r3, r3, #32
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	2378      	movs	r3, #120	; 0x78
 8009f26:	4828      	ldr	r0, [pc, #160]	; (8009fc8 <_printf_i+0x248>)
 8009f28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f2c:	e7e3      	b.n	8009ef6 <_printf_i+0x176>
 8009f2e:	065e      	lsls	r6, r3, #25
 8009f30:	bf48      	it	mi
 8009f32:	b2ad      	uxthmi	r5, r5
 8009f34:	e7e6      	b.n	8009f04 <_printf_i+0x184>
 8009f36:	4616      	mov	r6, r2
 8009f38:	e7bb      	b.n	8009eb2 <_printf_i+0x132>
 8009f3a:	680b      	ldr	r3, [r1, #0]
 8009f3c:	6826      	ldr	r6, [r4, #0]
 8009f3e:	1d1d      	adds	r5, r3, #4
 8009f40:	6960      	ldr	r0, [r4, #20]
 8009f42:	600d      	str	r5, [r1, #0]
 8009f44:	0635      	lsls	r5, r6, #24
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	d501      	bpl.n	8009f4e <_printf_i+0x1ce>
 8009f4a:	6018      	str	r0, [r3, #0]
 8009f4c:	e002      	b.n	8009f54 <_printf_i+0x1d4>
 8009f4e:	0671      	lsls	r1, r6, #25
 8009f50:	d5fb      	bpl.n	8009f4a <_printf_i+0x1ca>
 8009f52:	8018      	strh	r0, [r3, #0]
 8009f54:	2300      	movs	r3, #0
 8009f56:	4616      	mov	r6, r2
 8009f58:	6123      	str	r3, [r4, #16]
 8009f5a:	e7ba      	b.n	8009ed2 <_printf_i+0x152>
 8009f5c:	680b      	ldr	r3, [r1, #0]
 8009f5e:	1d1a      	adds	r2, r3, #4
 8009f60:	600a      	str	r2, [r1, #0]
 8009f62:	681e      	ldr	r6, [r3, #0]
 8009f64:	2100      	movs	r1, #0
 8009f66:	4630      	mov	r0, r6
 8009f68:	6862      	ldr	r2, [r4, #4]
 8009f6a:	f000 f831 	bl	8009fd0 <memchr>
 8009f6e:	b108      	cbz	r0, 8009f74 <_printf_i+0x1f4>
 8009f70:	1b80      	subs	r0, r0, r6
 8009f72:	6060      	str	r0, [r4, #4]
 8009f74:	6863      	ldr	r3, [r4, #4]
 8009f76:	6123      	str	r3, [r4, #16]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f7e:	e7a8      	b.n	8009ed2 <_printf_i+0x152>
 8009f80:	4632      	mov	r2, r6
 8009f82:	4649      	mov	r1, r9
 8009f84:	4640      	mov	r0, r8
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	47d0      	blx	sl
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	d0ab      	beq.n	8009ee6 <_printf_i+0x166>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	079b      	lsls	r3, r3, #30
 8009f92:	d413      	bmi.n	8009fbc <_printf_i+0x23c>
 8009f94:	68e0      	ldr	r0, [r4, #12]
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	4298      	cmp	r0, r3
 8009f9a:	bfb8      	it	lt
 8009f9c:	4618      	movlt	r0, r3
 8009f9e:	e7a4      	b.n	8009eea <_printf_i+0x16a>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	4632      	mov	r2, r6
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	47d0      	blx	sl
 8009faa:	3001      	adds	r0, #1
 8009fac:	d09b      	beq.n	8009ee6 <_printf_i+0x166>
 8009fae:	3501      	adds	r5, #1
 8009fb0:	68e3      	ldr	r3, [r4, #12]
 8009fb2:	9903      	ldr	r1, [sp, #12]
 8009fb4:	1a5b      	subs	r3, r3, r1
 8009fb6:	42ab      	cmp	r3, r5
 8009fb8:	dcf2      	bgt.n	8009fa0 <_printf_i+0x220>
 8009fba:	e7eb      	b.n	8009f94 <_printf_i+0x214>
 8009fbc:	2500      	movs	r5, #0
 8009fbe:	f104 0619 	add.w	r6, r4, #25
 8009fc2:	e7f5      	b.n	8009fb0 <_printf_i+0x230>
 8009fc4:	0800a2b5 	.word	0x0800a2b5
 8009fc8:	0800a2c6 	.word	0x0800a2c6

08009fcc <__retarget_lock_acquire_recursive>:
 8009fcc:	4770      	bx	lr

08009fce <__retarget_lock_release_recursive>:
 8009fce:	4770      	bx	lr

08009fd0 <memchr>:
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	b510      	push	{r4, lr}
 8009fd4:	b2c9      	uxtb	r1, r1
 8009fd6:	4402      	add	r2, r0
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	d101      	bne.n	8009fe2 <memchr+0x12>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e003      	b.n	8009fea <memchr+0x1a>
 8009fe2:	7804      	ldrb	r4, [r0, #0]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	428c      	cmp	r4, r1
 8009fe8:	d1f6      	bne.n	8009fd8 <memchr+0x8>
 8009fea:	bd10      	pop	{r4, pc}

08009fec <memmove>:
 8009fec:	4288      	cmp	r0, r1
 8009fee:	b510      	push	{r4, lr}
 8009ff0:	eb01 0402 	add.w	r4, r1, r2
 8009ff4:	d902      	bls.n	8009ffc <memmove+0x10>
 8009ff6:	4284      	cmp	r4, r0
 8009ff8:	4623      	mov	r3, r4
 8009ffa:	d807      	bhi.n	800a00c <memmove+0x20>
 8009ffc:	1e43      	subs	r3, r0, #1
 8009ffe:	42a1      	cmp	r1, r4
 800a000:	d008      	beq.n	800a014 <memmove+0x28>
 800a002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a00a:	e7f8      	b.n	8009ffe <memmove+0x12>
 800a00c:	4601      	mov	r1, r0
 800a00e:	4402      	add	r2, r0
 800a010:	428a      	cmp	r2, r1
 800a012:	d100      	bne.n	800a016 <memmove+0x2a>
 800a014:	bd10      	pop	{r4, pc}
 800a016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a01a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a01e:	e7f7      	b.n	800a010 <memmove+0x24>

0800a020 <_realloc_r>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	4607      	mov	r7, r0
 800a024:	4614      	mov	r4, r2
 800a026:	460e      	mov	r6, r1
 800a028:	b921      	cbnz	r1, 800a034 <_realloc_r+0x14>
 800a02a:	4611      	mov	r1, r2
 800a02c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a030:	f7ff bc44 	b.w	80098bc <_malloc_r>
 800a034:	b922      	cbnz	r2, 800a040 <_realloc_r+0x20>
 800a036:	f7ff fbf5 	bl	8009824 <_free_r>
 800a03a:	4625      	mov	r5, r4
 800a03c:	4628      	mov	r0, r5
 800a03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a040:	f000 f814 	bl	800a06c <_malloc_usable_size_r>
 800a044:	42a0      	cmp	r0, r4
 800a046:	d20f      	bcs.n	800a068 <_realloc_r+0x48>
 800a048:	4621      	mov	r1, r4
 800a04a:	4638      	mov	r0, r7
 800a04c:	f7ff fc36 	bl	80098bc <_malloc_r>
 800a050:	4605      	mov	r5, r0
 800a052:	2800      	cmp	r0, #0
 800a054:	d0f2      	beq.n	800a03c <_realloc_r+0x1c>
 800a056:	4631      	mov	r1, r6
 800a058:	4622      	mov	r2, r4
 800a05a:	f7ff fbcd 	bl	80097f8 <memcpy>
 800a05e:	4631      	mov	r1, r6
 800a060:	4638      	mov	r0, r7
 800a062:	f7ff fbdf 	bl	8009824 <_free_r>
 800a066:	e7e9      	b.n	800a03c <_realloc_r+0x1c>
 800a068:	4635      	mov	r5, r6
 800a06a:	e7e7      	b.n	800a03c <_realloc_r+0x1c>

0800a06c <_malloc_usable_size_r>:
 800a06c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a070:	1f18      	subs	r0, r3, #4
 800a072:	2b00      	cmp	r3, #0
 800a074:	bfbc      	itt	lt
 800a076:	580b      	ldrlt	r3, [r1, r0]
 800a078:	18c0      	addlt	r0, r0, r3
 800a07a:	4770      	bx	lr

0800a07c <_init>:
 800a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07e:	bf00      	nop
 800a080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a082:	bc08      	pop	{r3}
 800a084:	469e      	mov	lr, r3
 800a086:	4770      	bx	lr

0800a088 <_fini>:
 800a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08a:	bf00      	nop
 800a08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08e:	bc08      	pop	{r3}
 800a090:	469e      	mov	lr, r3
 800a092:	4770      	bx	lr
